<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Themes-rsses on WHMCS Developer Documentation</title>
    <link>//developers.whmcs.com/themes/index.xml</link>
    <description>Recent content in Themes-rsses on WHMCS Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <atom:link href="//developers.whmcs.com/themes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Themes</title>
      <link>//developers.whmcs.com/themes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;System themes and order form templates let you control the Client Area, the client-facing user interface in WHMCS. WHMCS allows you to provide a seamless experience for your customers by customising the look of the Client Area to match your company&amp;rsquo;s website and branding.&lt;/p&gt;

&lt;h2 id=&#34;system-themes&#34;&gt;System Themes&lt;/h2&gt;

&lt;p&gt;Themes, or &lt;em&gt;System Themes&lt;/em&gt;, in WHMCS control the client-facing user interface. WHMCS allows you to provide a seamless experience for your website visitors by using system themes to customise the Client Area to match the rest of your website.&lt;/p&gt;

&lt;p&gt;WHMCS currently ships with two system themes for the Client Area:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Twenty-One&lt;/strong&gt; was introduced in WHMCS 8.1 and is currently the default system theme for new installations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Six&lt;/strong&gt; was the default theme for WHMCS 6.0 through 8.0.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We recommend using and customising &lt;strong&gt;Twenty-One&lt;/strong&gt;. We will remove &lt;strong&gt;Six&lt;/strong&gt; in a future version of WHMCS.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;We recommend using &lt;a href=&#34;//developers.whmcs.com/themes/child-themes/&#34;&gt;Child Themes&lt;/a&gt; for your customisations.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;You can set the &lt;strong&gt;System Theme&lt;/strong&gt; in WHMCS&amp;rsquo;s Admin Area at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt; in the &lt;strong&gt;General&lt;/strong&gt; tab.&lt;/p&gt;

&lt;h2 id=&#34;order-form-templates&#34;&gt;Order Form Templates&lt;/h2&gt;

&lt;p&gt;Order form templates control the look and feel of individual product and shopping cart pages in the Client Area.&lt;/p&gt;

&lt;p&gt;You can set a &lt;strong&gt;Default Order Form Template&lt;/strong&gt; at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt; in the &lt;strong&gt;Ordering&lt;/strong&gt; tab. You can also select an order form template for individual product groups at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; Products/Services&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In WHMCS 8.1 and later, WHMCS automatically checks for compatibility between your &lt;strong&gt;System Theme&lt;/strong&gt; and the order form templates you use.&lt;/p&gt;

&lt;p&gt;For more information about order form templates, see &lt;a href=&#34;//developers.whmcs.com/themes/order-form-templates/&#34;&gt;Order Form Templates&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>//developers.whmcs.com/themes/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/getting-started/</guid>
      <description>

&lt;p&gt;The default theme that ships with WHMCS is called the &lt;strong&gt;Twenty-One&lt;/strong&gt; theme.&lt;/p&gt;

&lt;p&gt;If you wish to customise any of the themes that ship by default with WHMCS, we recommend using the &lt;a href=&#34;//developers.whmcs.com/themes/child-themes&#34;&gt;Child Themes&lt;/a&gt; functionality.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-child-theme&#34;&gt;Creating a Child Theme&lt;/h2&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;Recommended for all new theme development in WHMCS 8.1 and later.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;Please see &lt;a href=&#34;//developers.whmcs.com/themes/child-themes&#34;&gt;Child Themes&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-custom-theme&#34;&gt;Creating a Custom Theme&lt;/h2&gt;

&lt;p&gt;If you wish to create a new Parent Theme (that other themes can inherit from and be a child of), or are using WHMCS 8.0 or earlier, you can create a Custom Theme. For all other scenarios, we recommend using &lt;a href=&#34;//developers.whmcs.com/themes/child-themes&#34;&gt;Child Themes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first step is to create your own copy of the template. This ensures your customisations are not lost when updating.&lt;/p&gt;

&lt;h3 id=&#34;method-1-using-source-control&#34;&gt;Method 1: Using Source Control&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re familiar with Git version control, we make our system themes and order form templates available as read-only repositories on &lt;a href=&#34;https://github.com/WHMCS/&#34;&gt;GitHub&lt;/a&gt;. You can use these to build your template in a way that can be tracked and automatically updated.&lt;/p&gt;

&lt;p&gt;To use this, navigate to the WHMCS templates directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/whmcs/templates/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, clone the repository into your new template directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/WHMCS/templates-six.git my-template-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, you can &lt;a href=&#34;//developers.whmcs.com/themes/customising&#34;&gt;customise&lt;/a&gt; your system theme or &lt;a href=&#34;//developers.whmcs.com/themes/order-form-templates&#34;&gt;order form template&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;method-2-without-source-control&#34;&gt;Method 2: Without Source Control&lt;/h3&gt;

&lt;p&gt;Alternatively, if you aren&amp;rsquo;t familiar with Git version control or don&amp;rsquo;t wish to use it, you can make a copy of the template directory within WHMCS.&lt;/p&gt;

&lt;p&gt;To do this, copy the theme or order form template directory (for example, &lt;code&gt;~/templates/twenty-one/&lt;/code&gt;) to &lt;code&gt;~/templates/yourname/&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;Template names should be a single word, consisting of only lowercase letters and numbers.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;Next, you can &lt;a href=&#34;//developers.whmcs.com/themes/customising&#34;&gt;customise&lt;/a&gt; your system theme or &lt;a href=&#34;//developers.whmcs.com/themes/order-form-templates&#34;&gt;order form template&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Child Themes</title>
      <link>//developers.whmcs.com/themes/child-themes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/child-themes/</guid>
      <description>

&lt;h2 id=&#34;what-is-a-child-theme&#34;&gt;What is a Child Theme?&lt;/h2&gt;

&lt;p&gt;A Child Theme is a theme that inherits templates and assets from another theme, referred to as the Parent Theme.&lt;/p&gt;

&lt;p&gt;With a Child Theme, your theme only needs to contain the template files you wish to customise and change. For CSS styling-only customisations, your theme doesn&amp;rsquo;t have to contain any template files at all.&lt;/p&gt;

&lt;p&gt;The result is a smaller theme that&amp;rsquo;s easier to maintain, and that automatically receives updates to template files that are not customised, making applying software updates faster, easier, and more automated.&lt;/p&gt;

&lt;p&gt;A Child Theme is the recommended way to customise WHMCS as of WHMCS 8.&lt;/p&gt;

&lt;h3 id=&#34;why-use-a-child-theme&#34;&gt;Why Use a Child Theme?&lt;/h3&gt;

&lt;p&gt;There are two main reasons to use Child Themes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separation of Customisations — A Child Theme can be used to customise any part of a parent theme in a way that keeps those customisations separate from the Parent Theme&amp;rsquo;s files.&lt;/li&gt;
&lt;li&gt;Simplified Maintenance and Updates — Using a Child Theme has the benefit of referencing all uncustomised files from the Parent Theme. This makes updates easier by having changes in the Parent Theme automatically take effect within the Child Theme.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;what-is-a-parent-theme&#34;&gt;What is a Parent Theme?&lt;/h2&gt;

&lt;p&gt;A parent theme is a complete theme that includes all of the WHMCS template files and assets that the theme requires in order to work.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Six&lt;/code&gt; and &lt;code&gt;Twenty-One&lt;/code&gt; themes that ship by default with WHMCS are both Parent Themes.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;You can use these steps to create a Child Theme:&lt;/p&gt;

&lt;h3 id=&#34;1-create-a-child-theme-folder&#34;&gt;1. Create a Child Theme Folder&lt;/h3&gt;

&lt;p&gt;First, create a new folder in the &lt;code&gt;templates&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;The new directory needs a name. For example, &lt;code&gt;mytheme&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;Names should only contain lowercase letters, numbers, hyphens, and underscores. They cannot include spaces.&lt;/p&gt;
&lt;/div&gt;


&lt;h3 id=&#34;2-create-a-theme-yaml-file&#34;&gt;2. Create a theme.yaml File&lt;/h3&gt;

&lt;p&gt;Next, you&amp;rsquo;ll need to create a &lt;code&gt;theme.yaml&lt;/code&gt; file to indicate to WHMCS that this is a Child Theme. It must define the Parent Theme to be used.&lt;/p&gt;

&lt;p&gt;The sample below defines a name, author, and parent theme (&lt;code&gt;twenty-one&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# My Theme Configuration File

name: &amp;quot;My Custom Theme&amp;quot;
author: &amp;quot;WHMCS Limited&amp;quot;
config:
  parent: twenty-one
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following information is required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt; — The name you will see in the WHMCS Admin Area.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt; / &lt;code&gt;parent&lt;/code&gt; — The name of the Parent Theme directory. The Parent Theme in the example above is the Twenty-One theme, so the parent theme directory name is &lt;code&gt;twenty-one&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;theme.yaml&lt;/code&gt; file can also define other parameters about your theme. To learn more, see &lt;a href=&#34;//developers.whmcs.com/themes/theme-parameters/&#34;&gt;Theme Parameters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create child themes with parents that are, in turn, children of other themes, as long as the ultimate parent theme includes all of the required WHMCS template files and assets. However, we do not recommend this for most uses.&lt;/p&gt;

&lt;h3 id=&#34;3-create-a-custom-css-file&#34;&gt;3. Create a custom.css File&lt;/h3&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;If you do not intend to make &lt;em&gt;any&lt;/em&gt; CSS-related changes you can skip this step. However, we strongly recommend doing this for all new Child Themes.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;Create a subfolder named &lt;code&gt;css&lt;/code&gt;, and, within that, create a stylesheet file named &lt;code&gt;custom.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is where you should put the CSS rules and declarations to control the look of your theme. Anything you define here will override styling defined by the Parent Theme. If you only want your Child Theme to contain CSS updates, using this method will give you a maintenance-free, automatically-updating Child Theme.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Example override for the primary background color */
.primary-bg-color {
    background-color: #ddd;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;The &lt;code&gt;custom.css&lt;/code&gt; stylesheet will be loaded automatically if the Parent Theme supports it. All themes that ship by default with WHMCS offer this functionality.&lt;/p&gt;
&lt;/div&gt;


&lt;h3 id=&#34;4-update-files&#34;&gt;4. Update Files&lt;/h3&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;If you are &lt;strong&gt;only&lt;/strong&gt; making CSS customisations (via the &lt;code&gt;css/custom.css&lt;/code&gt; file above), you can skip this step.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;If you are customising files that exist in the Parent Theme, we recommend copying those files to your theme folder and then customising them as needed. Leave the Parent Theme&amp;rsquo;s copy of the file unchanged.&lt;/p&gt;

&lt;p&gt;Any file you add to your Child Theme will override the same file in the Parent Theme. Commonly-overriden files include the header and footer template files, the homepage, client area home, and contact pages. For example, to customise the footer, you would copy the Parent Theme&amp;rsquo;s &lt;code&gt;footer.tpl&lt;/code&gt; file to the Child Theme&amp;rsquo;s folder and customise it there.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;Copying the file&amp;rsquo;s contents and customising it rather than starting from an empty file is particularly important for customising the header and footer, which contain essential code required for the correct operation of the WHMCS Client Area.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;You can also incorporate your own newly-created files for use in your customisations.&lt;/p&gt;

&lt;h3 id=&#34;5-preview-the-theme&#34;&gt;5. Preview the Theme&lt;/h3&gt;

&lt;p&gt;To preview the theme, you can use the &lt;code&gt;?systpl=xxxx&lt;/code&gt; URL parameter.&lt;/p&gt;

&lt;p&gt;To learn more, see &lt;a href=&#34;//developers.whmcs.com/themes/testing/&#34;&gt;Testing&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;6-activate-the-theme&#34;&gt;6. Activate the Theme&lt;/h3&gt;

&lt;p&gt;Once you&amp;rsquo;re happy with your new theme and are ready to make it live, follow the steps below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Log in to your WHMCS Admin Area.&lt;/li&gt;
&lt;li&gt;Navigate to &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Under the &lt;strong&gt;System Theme&lt;/strong&gt; setting on the &lt;strong&gt;General&lt;/strong&gt; tab, select the name of the theme you created above.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Save Changes&lt;/strong&gt; and visitors to your site will immediately begin seeing your new theme.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;loading-assets&#34;&gt;Loading Assets&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;assetPath&lt;/code&gt; helper is available for use in themes. It loads assets in a smart way and enables Child Themes to override them.&lt;/p&gt;

&lt;p&gt;Use of this function is particularly important for Parent Theme developers. It makes it possible for Child Theme developers to override assets without editing file paths. However, in most Child Themes, assets may be loaded in the normal way — with hardcoded paths — without any negative side effects.&lt;/p&gt;

&lt;p&gt;Example usage of the &lt;code&gt;assetPath&lt;/code&gt; helper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link href=&amp;quot;{assetPath file=&#39;mycssfile.css&#39;}&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;{assetPath file=&#39;myjsfile.js&#39;}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To learn more about the &lt;code&gt;assetPath&lt;/code&gt; helper and other functions available to Theme Developers, see &lt;a href=&#34;//developers.whmcs.com/themes/functions/&#34;&gt;Functions&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Theme Configuration File</title>
      <link>//developers.whmcs.com/themes/theme-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/theme-parameters/</guid>
      <description>

&lt;h2 id=&#34;the-theme-yaml-file&#34;&gt;The theme.yaml File&lt;/h2&gt;

&lt;p&gt;Parent Themes, &lt;a href=&#34;//developers.whmcs.com/themes/child-themes/&#34;&gt;Child Themes&lt;/a&gt;, and Order Form Templates should include a &lt;code&gt;theme.yaml&lt;/code&gt; file. This file defines the theme or Order Form Template, including its name and author, description, its parent, its dependencies, and the assets it can provide for any children to which it is the parent.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;We made this method available for Order Form Templates in WHMCS 6.1 and improved it to include themes in WHMCS 8.1.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;For example, this &lt;code&gt;theme.yaml&lt;/code&gt; file sets the theme as a child of the Twenty-One Parent Theme, as well as specifying other theme information:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name: &amp;quot;Example&amp;quot;
description: &amp;quot;My Company&#39;s Branding&amp;quot;
author: &amp;quot;Hosting Company, L.L.C.&amp;quot;
config:
  parent: twenty-one
dependencies:
  bootstrap: 4.5.2
provides:
  jquery: 1.12
  fontawesome: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This file &lt;strong&gt;must&lt;/strong&gt; be a valid &lt;a href=&#34;https://en.wikipedia.org/wiki/YAML&#34;&gt;YAML file&lt;/a&gt; and must use the indentation style illustrated above.&lt;/p&gt;

&lt;h2 id=&#34;parameters&#34;&gt;Parameters&lt;/h2&gt;

&lt;p&gt;You can specify these items in a &lt;code&gt;theme.yaml&lt;/code&gt; file:&lt;/p&gt;

&lt;h3 id=&#34;name&#34;&gt;name&lt;/h3&gt;

&lt;p&gt;The System Theme or Order Form Template name.
* For System Themes, this displays in the &lt;strong&gt;System Theme&lt;/strong&gt; menu at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt; in the &lt;strong&gt;General&lt;/strong&gt; tab.
* For Order Form Templates, this displays in &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt; in the &lt;strong&gt;Ordering&lt;/strong&gt; tab and for individual product groups at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; Products/Services&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;description&#34;&gt;description&lt;/h3&gt;

&lt;p&gt;A description of the theme or Order Form Template.&lt;/p&gt;

&lt;h3 id=&#34;author&#34;&gt;author&lt;/h3&gt;

&lt;p&gt;Generally, this should be your name. It could also be your company&amp;rsquo;s name.&lt;/p&gt;

&lt;h3 id=&#34;config-parent&#34;&gt;config: parent&lt;/h3&gt;

&lt;p&gt;The name of the directory that contains the Parent Theme or Order Form Template. (Do not use the display name.)&lt;/p&gt;

&lt;h3 id=&#34;dependencies&#34;&gt;dependencies&lt;/h3&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;It is unlikely for a theme to list anything under &lt;code&gt;dependencies&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;A list of assets that a child needs its parent to provide in order to function. If you don&amp;rsquo;t specify anything under &lt;code&gt;dependencies&lt;/code&gt;, WHMCS assumes compatibility. (This behavior is necessary in order to ensure continued compatibility with older custom themes.)&lt;/p&gt;

&lt;h3 id=&#34;provides&#34;&gt;provides&lt;/h3&gt;

&lt;p&gt;A list of assets that the theme or Order Form Template can provide to any children.&lt;/p&gt;

&lt;h2 id=&#34;compatibility&#34;&gt;Compatibility&lt;/h2&gt;

&lt;p&gt;WHMCS checks for compatibility between themes and Order Form Templates each time that you select a theme from the &lt;strong&gt;System Theme&lt;/strong&gt; menu at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt; in the &lt;strong&gt;General&lt;/strong&gt; tab. This checks the &lt;code&gt;provides&lt;/code&gt; list, &lt;code&gt;dependencies&lt;/code&gt; list, and &lt;code&gt;config&lt;/code&gt; details in order to make this assessment.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;If you receive an error, start troubleshooting by checking the &lt;code&gt;theme.yaml&lt;/code&gt; files for both the theme (and its parents) and the Order Form Template (and its parents). This will allow you to identify which dependencies aren&amp;rsquo;t being met.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;When checking &lt;code&gt;provides&lt;/code&gt; and &lt;code&gt;dependencies&lt;/code&gt; lists, WHMCS assumes compatibility for any missing segments of the version number. For example, if you set an Order Form Template to have Bootstrap 4 as a dependency in the &lt;code&gt;dependencies&lt;/code&gt; list, WHMCS will consider Bootstrap 4.5.2 (or any other version number beginning in &lt;code&gt;4.&lt;/code&gt;) as fulfilling it in the &lt;code&gt;provides&lt;/code&gt; list for the Parent Theme.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Order Form Templates</title>
      <link>//developers.whmcs.com/themes/order-form-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/order-form-templates/</guid>
      <description>

&lt;h2 id=&#34;what-is-an-order-form-template&#34;&gt;What is an Order Form Template?&lt;/h2&gt;

&lt;p&gt;Order Form Templates control the way products and the shopping cart appear when customers make purchases.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can find more information about Order Form Templates &lt;a href=&#34;https://docs.whmcs.com/Order_Form_Templates&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You may want to refer to the &lt;a href=&#34;https://docs.whmcs.com/Standard_Order_Form_Templates&#34;&gt;list of WHMCS-shipped Order Form Templates&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;To customise other aspects of the WHMCS Client Area, we recommend creating a &lt;a href=&#34;//developers.whmcs.com/themes/child-themes/&#34;&gt;Child Theme&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;You can set the system default Order Form Template at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt; in the &lt;strong&gt;Ordering&lt;/strong&gt; tab. This is where errors will display if there&amp;rsquo;s a compatibility issue between the current &lt;strong&gt;System Theme&lt;/strong&gt; and the default Order Form Template.&lt;/p&gt;

&lt;h2 id=&#34;order-form-template-dependencies&#34;&gt;Order Form Template Dependencies&lt;/h2&gt;

&lt;p&gt;An inheritance system allows parent-child relationships, with parents providing assets to children. Many custom Order Form Templates will require one or more assets in order to function. These needs are stated in the &lt;code&gt;dependencies&lt;/code&gt; list in the child&amp;rsquo;s &lt;code&gt;theme.yaml&lt;/code&gt; file, and then are fulfilled by the items in the &lt;code&gt;provides&lt;/code&gt; list in the parent&amp;rsquo;s &lt;code&gt;theme.yaml&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;For more about the &lt;code&gt;theme.yaml&lt;/code&gt; file and how to use it to declare and fulfill dependencies, see &lt;a href=&#34;//developers.whmcs.com/themes/theme-parameters/&#34;&gt;The Theme Configuration File&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&#34;creating-an-order-form-template&#34;&gt;Creating an Order Form Template&lt;/h2&gt;

&lt;p&gt;Using parent-child relationships, you don&amp;rsquo;t need to create a custom copy of all of the template files. Only copy or create the files you want to customise, and the remaining Order Form Templates will then load from the parent when you define them. This will make your customised Order Form Template easier to maintain. When you upgrade to a new version of WHMCS, the system updates any changes to Order Form Template files that aren&amp;rsquo;t customised.&lt;/p&gt;

&lt;p&gt;To create an Order Form Template:&lt;/p&gt;

&lt;h3 id=&#34;1-create-an-order-form-template-folder&#34;&gt;1. Create an Order Form Template Folder&lt;/h3&gt;

&lt;p&gt;First, create a new folder in the &lt;code&gt;/templates/orderforms/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;The new directory needs a name. For example, &lt;code&gt;mycart&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;Names should only contain lowercase letters, numbers, hyphens, and underscores. They cannot include spaces.&lt;/p&gt;
&lt;/div&gt;


&lt;h3 id=&#34;2-create-a-theme-yaml-file&#34;&gt;2. Create a theme.yaml File&lt;/h3&gt;

&lt;p&gt;In the new folder, create a &lt;code&gt;theme.yaml&lt;/code&gt; file and populate it with information, making sure to specify a parent. At minimum, your &lt;code&gt;theme.yaml&lt;/code&gt; file must contain these lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config:
  parent: standard_cart
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;For more about the &lt;code&gt;theme.yaml&lt;/code&gt; file and its contents, see &lt;a href=&#34;//developers.whmcs.com/themes/theme-parameters/&#34;&gt;The Theme Configuration File&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;h3 id=&#34;3-customize-files&#34;&gt;3. Customize Files&lt;/h3&gt;

&lt;p&gt;Copy the files that you want to customise from the parent Order Form Template.&lt;/p&gt;

&lt;p&gt;For example, the Standard Cart Order Form Template is the parent for the Premium Comparison Order Form Template. Premium Comparison consists only of a &lt;code&gt;products.tpl&lt;/code&gt; Order Form Template file. All of the other steps of the order process use Standard Cart.&lt;/p&gt;

&lt;p&gt;For a current list of Order Form Template files, see &lt;a href=&#34;https://docs.whmcs.com/Order_Form_Templates&#34;&gt;Order Form Templates&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;testing-order-form-templates&#34;&gt;Testing Order Form Templates&lt;/h2&gt;

&lt;p&gt;WHMCS allows you to preview Order Form Templates before making them live. This is done using the &lt;code&gt;?carttpl=xxxx&lt;/code&gt; URL parameter.&lt;/p&gt;

&lt;h2 id=&#34;activating-order-form-templates&#34;&gt;Activating Order Form Templates&lt;/h2&gt;

&lt;p&gt;You can set the Order Form Template for specific product groups at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; Products/Services&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Customising</title>
      <link>//developers.whmcs.com/themes/customising/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/customising/</guid>
      <description>

&lt;h2 id=&#34;customising-themes&#34;&gt;Customising Themes&lt;/h2&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;For information on customising Order Forms, see &lt;a href=&#34;//developers.whmcs.com/themes/order-form-templates/&#34;&gt;Order Form Templates&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;The header and footer system theme template files are common to every page and act as a wrapper around the primary body content. They are an excellent place to begin customising a theme.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We strongly recommend that you maintain all of the template includes and output variables in the default template files in your custom header and footer. This will help ensure compatibility with addons and extensions you install later.&lt;/li&gt;
&lt;li&gt;Navigation bar and sidebar content is defined within WHMCS and passed to the templates for output. This allows modules and addons to interact with and manipulate these areas of the client area dynamically. The output styling of these is controlled by include files which are explained in more detail below.&lt;/li&gt;
&lt;li&gt;The footer template file includes a number of lines of JavaScript code immediately prior to the closing &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag. These are essential to the correct operation of the client area. &lt;strong&gt;Do not&lt;/strong&gt; remove these lines.&lt;/li&gt;
&lt;li&gt;You may also wish to consider creating &lt;a href=&#34;//developers.whmcs.com/themes/child-themes/&#34;&gt;child themes&lt;/a&gt;, which have simpler development and maintenance requirements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;custom-logo&#34;&gt;Custom Logo&lt;/h2&gt;

&lt;p&gt;The Twenty-One and Six themes display either your company name or logo in the top-left corner of the Client Area. If you supply a logo, the &lt;code&gt;$assetLogoPath&lt;/code&gt; variable contains the relative path to the logo file. You can upload the logo in the &lt;strong&gt;Setup Wizard&lt;/strong&gt; or at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt; in the &lt;strong&gt;General&lt;/strong&gt; tab.&lt;/p&gt;

&lt;p&gt;To set a custom logo, it must be saved as either &lt;code&gt;logo.png&lt;/code&gt; or &lt;code&gt;logo.jpg&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;include-files&#34;&gt;Include Files&lt;/h2&gt;

&lt;p&gt;Include templates are templates that are shared and used by multiple pages. They are located within the &lt;code&gt;/includes/&lt;/code&gt; subdirectory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Common to All Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;head.tpl&lt;/code&gt; - Defines the CSS and Javascript files included within the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of a page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;navbar.tpl&lt;/code&gt; - Controls the output of the primary navigation bar menu items&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sidebar.tpl&lt;/code&gt; - Controls the output of the sidebar menu items.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Used as Required&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;captcha.tpl&lt;/code&gt; - Used to output the captcha verification image wherever used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pwstrength.tpl&lt;/code&gt; - Used to output the password strength meter and tooltip wherever used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tablelist.tpl&lt;/code&gt; - Controls the output of all filterable data list tables throughout the client area.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Editing any of these template files will affect everywhere that the respective elements are used. One place to edit and one place to maintain during upgrades will help make applying and preserving your customisations easier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS Styling</title>
      <link>//developers.whmcs.com/themes/css-styling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/css-styling/</guid>
      <description>

&lt;h2 id=&#34;custom-css&#34;&gt;Custom CSS&lt;/h2&gt;

&lt;p&gt;If you want to make changes to any of the CSS that is applied by default, we recommend making those customisations inside of the &lt;code&gt;/css/custom.css&lt;/code&gt; file. This file is included after &lt;code&gt;styles.css&lt;/code&gt;, allowing you to override any of the CSS defined within it. It will not be affected by future updates to the WHMCS software.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;ul&gt;
&lt;li&gt;We strongly recommend adding your custom CSS rules to the &lt;code&gt;custom.css&lt;/code&gt; file and &lt;strong&gt;not&lt;/strong&gt; editing &lt;code&gt;/css/styles.css&lt;/code&gt; directly because it will make updating easier.&lt;/li&gt;
&lt;li&gt;You may also wish to consider creating a &lt;a href=&#34;//developers.whmcs.com/themes/child-themes/&#34;&gt;child theme&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;h2 id=&#34;using-font-awesome&#34;&gt;Using Font Awesome&lt;/h2&gt;

&lt;p&gt;To use Font Awesome icons, you may include the latest Font Awesome release shipped with WHMCS by including the line below within the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of your template:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;link href=&amp;quot;{$WEB_ROOT}/assets/css/fontawesome-all.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Themes that do not include the above line will have it injected automatically. If you wish to prevent this behaviour, include the following line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;!-- /css/fontawesome-all.min.css --&amp;gt;&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Navigation</title>
      <link>//developers.whmcs.com/themes/navigation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/navigation/</guid>
      <description>

&lt;h2 id=&#34;navigation-bars&#34;&gt;Navigation Bars&lt;/h2&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;This guide assumes you are already familiar with creating and using &lt;a href=&#34;//developers.whmcs.com/hooks/&#34;&gt;Hook files in WHMCS&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;There are two navigation bars in WHMCS&amp;rsquo;s client area. They exist as part of the system theme.&lt;/p&gt;

&lt;p&gt;The primary navigation bar contains the bulk of the menu and floats to the left of the secondary navigation bar. The secondary navigation bar contains user-specific items and changes if a client is logged in to WHMCS. When a client is not logged in then the secondary navigation contains a login link, and when a client is logged in then the secondary menu contains links to the client&amp;rsquo;s account.&lt;/p&gt;

&lt;p&gt;Responsive mode is activated when WHMCS&amp;rsquo;s client area is viewed on a smaller screen device such as a phone or tablet. At that point, WHMCS will collapse the navigation bar into a fold-out menu.&lt;/p&gt;

&lt;p&gt;The navigation bar elements are controlled in a programmatically, allowing modules and hooks to dynamically interact with the navigation menu elements.&lt;/p&gt;

&lt;p&gt;The look and feel of the navigation bar can be customised via the &lt;code&gt;/includes/header.tpl&lt;/code&gt; and &lt;code&gt;/includes/navbar.tpl&lt;/code&gt; system theme template files.&lt;/p&gt;

&lt;h2 id=&#34;finding-a-menu-name&#34;&gt;Finding a Menu Name&lt;/h2&gt;

&lt;p&gt;Every menu item has a unique name that is used to reference it. You will need this name in order to manipulate it. To make it easier, we have made the name of each sidebar menu item available in the HTML source of the page, which means it can be retrieved using the &lt;em&gt;Inspect Element&lt;/em&gt; option available in most modern browsers. For example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;menus-find-name.png&#34; alt=&#34;Navigation Menus: Finding a Menu Name&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have the menu item name that you wish to manipulate, which in the example above is &lt;code&gt;Account Details&lt;/code&gt;, you can manipulate it as described below.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;The client area&amp;rsquo;s menu system is defined in a tree structure. Each menu item has one parent item and can have many child items. To manipulate a menu item within a sidebar panel, you first need to retrieve the parent menu item, which in the case above is &lt;code&gt;Account&lt;/code&gt;, followed by the &lt;code&gt;Account Details&lt;/code&gt; menu item within it.&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&#34;changing-the-text-label-of-a-menu-item&#34;&gt;Changing the Text Label of a Menu Item&lt;/h2&gt;

&lt;p&gt;All sidebar menu items that are supplied by default use display names controlled by language files. Simply search in your active language file for the text you see in the menu item label, and you can adjust or change it there as required.&lt;/p&gt;

&lt;p&gt;Alternatively, you can manipulate the display text via a hook as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimarySidebar&#39;, 1, function(MenuItem $primarySidebar)
{
    $primarySidebar-&amp;gt;getChild(&amp;quot;My Account&amp;quot;)
        -&amp;gt;getChild(&amp;quot;Billing Information&amp;quot;)
        -&amp;gt;setLabel(&amp;quot;Custom Text Here&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above example retrieves the &lt;code&gt;My Account&lt;/code&gt; menu item, followed by the &lt;code&gt;Billing Information&lt;/code&gt; menu item, which is a child within that. The same logic should be applied to all dropdown menu items.&lt;/p&gt;

&lt;h2 id=&#34;changing-where-a-menu-item-links-to&#34;&gt;Changing where a Menu Item Links To&lt;/h2&gt;

&lt;p&gt;You can change where a menu item points using the &lt;code&gt;setUri&lt;/code&gt; method. For example, if you use an external system to control announcements, you could do something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimaryNavbar&#39;, 1, function (MenuItem $primaryNavbar)
{
    $navItem = $primaryNavbar-&amp;gt;getChild(&#39;Support&#39;);
    if (is_null($navItem)) {
        return;
    }

    $navItem = $navItem-&amp;gt;getChild(&#39;Announcements&#39;);
    if (is_null($navItem)) {
        return;
    }

    $navItem-&amp;gt;setUri(&#39;https://www.example.com/3rdpartyblogsystem&#39;);

});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rearranging-menu-items&#34;&gt;Rearranging Menu Items&lt;/h2&gt;

&lt;p&gt;You can change the display order of menu items as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimaryNavbar&#39;, 1, function (MenuItem $primaryNavbar)
{
    $navItem = $primaryNavbar-&amp;gt;getChild(&#39;Support&#39;);
    if (is_null($navItem)) {
        return;
    }

    $navItem = $navItem-&amp;gt;getChild(&#39;Announcements&#39;);
    if (is_null($navItem)) {
        return;
    }

    $navItem-&amp;gt;setOrder(1);

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following helpers are also available:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Moves a menu item up one position
$primaryNavbar-&amp;gt;getChild(&#39;Support&#39;)-&amp;gt;getChild(&#39;Announcements&#39;)-&amp;gt;moveUp();
// Moves a menu item down one position
$primaryNavbar-&amp;gt;getChild(&#39;Support&#39;)-&amp;gt;getChild(&#39;Announcements&#39;)-&amp;gt;moveDown();
// Moves a menu item to the first position
$primaryNavbar-&amp;gt;getChild(&#39;Support&#39;)-&amp;gt;getChild(&#39;Announcements&#39;)-&amp;gt;moveToFront();
// Moves a menu item to the last position
$primaryNavbar-&amp;gt;getChild(&#39;Support&#39;)-&amp;gt;getChild(&#39;Announcements&#39;)-&amp;gt;moveToBack();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-a-menu-item&#34;&gt;Adding a Menu Item&lt;/h2&gt;

&lt;p&gt;You can add a new link to the primary navigation as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimaryNavbar&#39;, 1, function (MenuItem $primaryNavbar)
{
    $primaryNavbar-&amp;gt;addChild(&#39;Menu Name&#39;)
        -&amp;gt;setUri(&#39;https://www.example.com/&#39;)
        -&amp;gt;setOrder(70);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-an-additional-child-menu-item&#34;&gt;Adding an Additional Child Menu Item&lt;/h2&gt;

&lt;p&gt;You can add additional menu items as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimaryNavbar&#39;, 1, function (MenuItem $primaryNavbar)
{
    if (!is_null($primaryNavbar-&amp;gt;getChild(&#39;Support&#39;))) {
        $primaryNavbar-&amp;gt;getChild(&#39;Support&#39;)
            -&amp;gt;addChild(&#39;Emergency Contacts&#39;, array(
                &#39;label&#39; =&amp;gt; Lang::trans(&#39;emergencyContacts&#39;),
                &#39;uri&#39; =&amp;gt; &#39;emergency.php&#39;,
                &#39;order&#39; =&amp;gt; &#39;100&#39;,
            ));
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add a menu item conditionally based on client login status, you can do that using menu context as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimaryNavbar&#39;, 1, function (MenuItem $primaryNavbar)
{
    $client = Menu::context(&#39;client&#39;);

    // only add menu item when no client logged in
    if (is_null($client)) {
        $primaryNavbar-&amp;gt;addChild(&#39;Example&#39;)
            -&amp;gt;setUri(&#39;https://www.example.com/&#39;)
            -&amp;gt;setOrder(100);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hiding-or-removing-a-menu-item&#34;&gt;Hiding or Removing a Menu Item&lt;/h2&gt;

&lt;p&gt;You can remove a menu item as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimaryNavbar&#39;, 1, function (MenuItem $primaryNavbar)
{
    if (!is_null($primaryNavbar-&amp;gt;getChild(&#39;Support&#39;))) {
        $primaryNavbar-&amp;gt;getChild(&#39;Support&#39;)-&amp;gt;removeChild(&#39;Announcements&#39;);
    }
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sidebars</title>
      <link>//developers.whmcs.com/themes/sidebars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/sidebars/</guid>
      <description>

&lt;h2 id=&#34;sidebars&#34;&gt;Sidebars&lt;/h2&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;This guide assumes you are already familiar with creating and using &lt;a href=&#34;//developers.whmcs.com/hooks/&#34;&gt;Hook files in WHMCS&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;There are two sidebars in WHMCS&amp;rsquo;s client area. The primary sidebar contains sidebar elements that are displayed above the body content when in responsive mode. The secondary sidebar contains sidebar elements that are displayed below the body content when in responsive mode. In desktop mode, there will be no noticeable difference between primary and secondary sidebar items.&lt;/p&gt;

&lt;p&gt;The sidebar elements and panels are controlled in a programmatic way, allowing modules and hooks to dynamically interact with the sidebar items.&lt;/p&gt;

&lt;p&gt;The look and feel of the navigation bar can be customised via the &lt;code&gt;/includes/header.tpl&lt;/code&gt; and &lt;code&gt;/includes/navbar.tpl&lt;/code&gt; system theme template files.&lt;/p&gt;

&lt;h2 id=&#34;finding-a-sidebar-name&#34;&gt;Finding a Sidebar Name&lt;/h2&gt;

&lt;p&gt;Every sidebar menu item has a unique name that is used to reference it. You will need this name in order to manipulate it. To make it easier, we have made the name of each sidebar menu item available in the HTML source of the page, which means it can be retrieved using the &lt;em&gt;Inspect Element&lt;/em&gt; option available in most modern browsers. For example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;find-sidebar-name.png&#34; alt=&#34;Sidebar Menus: Finding a Sidebar Name&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you have the menu item name that you wish to manipulate, which in the example above is &lt;code&gt;Account Details&lt;/code&gt;, you can manipulate it as described below.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;The client area&amp;rsquo;s sidebar menu system is defined in a tree structure. Each menu item has one parent item and can have many child items. To manipulate a menu item within a sidebar panel, you first need to retrieve the parent menu item, which in the case above is &lt;code&gt;Account&lt;/code&gt;, followed by the &lt;code&gt;Account Details&lt;/code&gt; menu item within it.&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&#34;changing-the-text-label-of-a-sidebar-item&#34;&gt;Changing the Text Label of a Sidebar Item&lt;/h2&gt;

&lt;p&gt;All sidebar menu items that are supplied by default use display names controlled by language file. Simply search in your active language file for the text you see in the menu item label, and you can adjust or change it there as required.&lt;/p&gt;

&lt;p&gt;Alternatively, you can manipulate the display text via a hook as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimarySidebar&#39;, 1, function(MenuItem $primarySidebar)
{
    $primarySidebar-&amp;gt;getChild(&amp;quot;My Account&amp;quot;)
        -&amp;gt;getChild(&amp;quot;Billing Information&amp;quot;)
        -&amp;gt;setLabel(&amp;quot;Custom Text Here&amp;quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how in the above we first retrieve the &lt;code&gt;Support&lt;/code&gt; menu item, followed by the &lt;code&gt;Announcements&lt;/code&gt; menu item, which is a child within that. The same logic should be applied to all dropdown menu items.&lt;/p&gt;

&lt;h2 id=&#34;changing-where-a-sidebar-item-points-to&#34;&gt;Changing where a Sidebar Item Points To&lt;/h2&gt;

&lt;p&gt;You can change where a menu item points using the &lt;code&gt;setUri&lt;/code&gt; method. For example, if you use an external system to control announcements, you could do something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimarySidebar&#39;, 1, function(MenuItem $primarySidebar)
{
    $primarySidebar-&amp;gt;getChild(&#39;My Account&#39;)
        -&amp;gt;getChild(&#39;Billing Information&#39;)
        -&amp;gt;setUri(&#39;https://www.example.com/billingInfo&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rearranging-sidebar-items&#34;&gt;Rearranging Sidebar Items&lt;/h2&gt;

&lt;p&gt;You can change the display order of menu items as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimarySidebar&#39;, 1, function(MenuItem $primarySidebar)
{
    $primarySidebar-&amp;gt;getChild(&#39;My Account&#39;)
        -&amp;gt;getChild(&#39;Billing Information&#39;)
        -&amp;gt;setOrder(25); // default menu items have orders 10, 20, 30, etc...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following helpers are also available:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Moves a menu item up one position
$primaryNavbar-&amp;gt;getChild(&#39;My Account&#39;)-&amp;gt;getChild(&#39;Billing Information&#39;)-&amp;gt;moveUp();
// Moves a menu item down one position
$primaryNavbar-&amp;gt;getChild(&#39;My Account&#39;)-&amp;gt;getChild(&#39;Billing Information&#39;)-&amp;gt;moveDown();
// Moves a menu item to the first position
$primaryNavbar-&amp;gt;getChild(&#39;My Account&#39;)-&amp;gt;getChild(&#39;Billing Information&#39;)-&amp;gt;moveToFront();
// Moves a menu item to the last position
$primaryNavbar-&amp;gt;getChild(&#39;My Account&#39;)-&amp;gt;getChild(&#39;Billing Information&#39;)-&amp;gt;moveToBack();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-an-additional-sidebar-menu-item&#34;&gt;Adding an Additional Sidebar Menu Item&lt;/h2&gt;

&lt;p&gt;To add an additional item to a menu, check that the sidebar exists on the particular page before specifying it. You can add additional menu items as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimarySidebar&#39;, 1, function (MenuItem $primarySidebar)

{
    if (!is_null($primarySidebar-&amp;gt;getChild(&#39;My Account&#39;))) {
        $primarySidebar-&amp;gt;getChild(&#39;My Account&#39;)
            -&amp;gt;addChild(&#39;Mailing List Subscription Prefs&#39;)
                -&amp;gt;setLabel(&#39;Subscription Preferences&#39;)
                -&amp;gt;setUri(&#39;subscriptionprefs.php&#39;)
                -&amp;gt;setOrder(100);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hiding-or-removing-a-sidebar-menu-item&#34;&gt;Hiding or Removing a Sidebar Menu Item&lt;/h2&gt;

&lt;p&gt;You can remove a menu item as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\View\Menu\Item as MenuItem;

add_hook(&#39;ClientAreaPrimarySidebar&#39;, 1, function(MenuItem $primarySidebar)
{
    $primarySidebar-&amp;gt;getChild(&#39;My Account&#39;)
        -&amp;gt;removeChild(&#39;Billing Information&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>//developers.whmcs.com/themes/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/variables/</guid>
      <description>

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;In the Smarty template language, template variables take the format &lt;code&gt;{$variable_name}&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;template-parameters&#34;&gt;Template Parameters&lt;/h2&gt;

&lt;p&gt;The following template parameters are made available to all system themes and order form templates:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;{$BASE_PATH_CSS}&lt;/td&gt;
&lt;td&gt;The base URL to common CSS assets.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$BASE_PATH_FONTS}&lt;/td&gt;
&lt;td&gt;The base URL to common font assets.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$BASE_PATH_IMG}&lt;/td&gt;
&lt;td&gt;The base URL to common image assets.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$BASE_PATH_JS}&lt;/td&gt;
&lt;td&gt;The base URL to common JavaScript assets.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$charset}&lt;/td&gt;
&lt;td&gt;The configured character set.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$client}&lt;/td&gt;
&lt;td&gt;The currently logged in client, or &lt;code&gt;null&lt;/code&gt; if a client is not logged in.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$companyname}&lt;/td&gt;
&lt;td&gt;The configured company name.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$date_day}&lt;/td&gt;
&lt;td&gt;The current calendar day.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$date_month}&lt;/td&gt;
&lt;td&gt;The current calendar month.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$date_year}&lt;/td&gt;
&lt;td&gt;The current calendar year.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$filename}&lt;/td&gt;
&lt;td&gt;The base name of the current file requested by the web browser.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$language}&lt;/td&gt;
&lt;td&gt;The name of the language to display to the user.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$loggedin}&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on whether a client is logged in.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$logo}&lt;/td&gt;
&lt;td&gt;The path to the configured logo image.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$pagetitle}&lt;/td&gt;
&lt;td&gt;The current page&amp;rsquo;s title.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$reCaptchaPublicKey}&lt;/td&gt;
&lt;td&gt;The configured reCAPTCHA site key. This can be an empty string if the WHMCS installation does not use Google reCAPTCHA.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$systemNonSSLURL}&lt;/td&gt;
&lt;td&gt;The configured non-SSL URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$systemsslurl}&lt;/td&gt;
&lt;td&gt;The configured SSL URL.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$systemurl}&lt;/td&gt;
&lt;td&gt;The URL to the WHMCS system. This is either the SSL or non-SSL URL depending on whether the current page loaded via HTTPS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$template}&lt;/td&gt;
&lt;td&gt;The name of the system theme used for display.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$todaysdate}&lt;/td&gt;
&lt;td&gt;The current date, presented in &lt;code&gt;l, jS F Y&lt;/code&gt; format.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$token}&lt;/td&gt;
&lt;td&gt;A CSRF token to use on POST forms.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;{$WEB_ROOT}&lt;/td&gt;
&lt;td&gt;Your WHMCS system&amp;rsquo;s base URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For a complete listing of all variables available to you in a given template file, add the following line to your template file. Then, use a browser to access the page that calls the template. You will receive a popup list of all available template data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{debug}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>//developers.whmcs.com/themes/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/functions/</guid>
      <description>

&lt;h3 id=&#34;replace&#34;&gt;Replace&lt;/h3&gt;

&lt;p&gt;This is a shorthand version of the &lt;code&gt;str_replace&lt;/code&gt; function. Use it to replace a value in a string.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{$variable_name|replace:&#39;hello&#39;:&#39;world&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;count&#34;&gt;Count&lt;/h3&gt;

&lt;p&gt;Use this to count the number of entries in an array.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{$variable_name|count}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Conditionals</title>
      <link>//developers.whmcs.com/themes/conditionals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/conditionals/</guid>
      <description>

&lt;p&gt;It is often necessary to display text or messages when certain conditions are met.&lt;/p&gt;

&lt;p&gt;{if} statements in Smarty have much the same flexibility as PHP if statements.&lt;/p&gt;

&lt;p&gt;Every {if} must be paired with a matching {/if}. {else} and {elseif} are also permitted.&lt;/p&gt;

&lt;p&gt;All PHP conditionals and functions are recognized, such as &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;is_array()&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{if $filename eq &amp;quot;announcements.php&amp;quot;}
    This is the announcements page
{else}
    This is not the announcements page
{/if}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information, please refer to &lt;a href=&#34;http://www.smarty.net/docs/en/language.function.if.tpl&#34;&gt;http://www.smarty.net/docs/en/language.function.if.tpl&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP Logic</title>
      <link>//developers.whmcs.com/themes/php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/php/</guid>
      <description>

&lt;h1 id=&#34;using-hooks&#34;&gt;Using Hooks&lt;/h1&gt;

&lt;p&gt;We recommend that all custom PHP logic be performed via hooks. Hooks are the &lt;strong&gt;only&lt;/strong&gt; future-proof way of performing your own PHP logic at the time of page rendering.&lt;/p&gt;

&lt;p&gt;Historically, Smarty has allowed you to define custom PHP logic directly within system theme and order form template files. This has often been used by users and third party developers as a quick and convenient way of performing additional logic and defining additional system theme and order form template output.&lt;/p&gt;

&lt;p&gt;However, as of Smarty 3, support for the {php} block has been removed, and we are only providing legacy support to ease the transition for developers and users who work with our platform and rely on this functionality.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;The exposure of the template object via the legacy variable &lt;code&gt;$template&lt;/code&gt;, available within the deprecated PHP blocks context, is only available if &lt;code&gt;template_object&lt;/code&gt; is itemized in the &lt;code&gt;enabled_special_smarty_vars&lt;/code&gt; array as described in our &lt;a href=&#34;https://docs.whmcs.com/Smarty_Security_Policy#Supported_Policy_Settings_and_Values&#34;&gt;Smarty Security Policy
&lt;/a&gt; documentation.&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;The below example demonstrates how a hook can be used to perform additional PHP logic and define system theme and order form template variables for use in client area template files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/**
 * Hook sample for defining additional template variables
 *
 * @param array $vars Existing defined template variables
 *
 * @return array
 */
function hook_template_variables_example($vars)
{
    $extraTemplateVariables = array();

    // set a fixed value
    $extraTemplateVariables[&#39;fixedValue&#39;] = &#39;abc&#39;;

    // fetch clients data if available
    $clientsData = isset($vars[&#39;clientsdetails&#39;]) ? $vars[&#39;clientsdetails&#39;] : null;

    // determine if client is logged in
    if (is_array($clientsData) &amp;amp;&amp;amp; isset($clientsData[&#39;id&#39;])) {
        $userId = $clientsData[&#39;id&#39;];
        // perform calculation here
        $extraTemplateVariables[&#39;userSpecificValue&#39;] = &#39;123&#39;;
        $extraTemplateVariables[&#39;anotherUserOnlyValue&#39;] = &#39;456&#39;;
    }

    // return array of template variables to define
    return $extraTemplateVariables;
}

add_hook(&#39;ClientAreaPageViewTicket&#39;, 1, &#39;hook_template_variables_example&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;The example above executes on the &lt;strong&gt;View Ticket&lt;/strong&gt; page within the client area. There are hook points available for every page of the WHMCS client area. They allow you to define template variables in this way. For a full list, see the Client Area Interface Hooks Index Listing.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;The above hook defines the &lt;code&gt;{$fixedValue}&lt;/code&gt; template variable and, in the case of a logged in user, the &lt;code&gt;{$userSpecificValue}&lt;/code&gt; and &lt;code&gt;{$anotherUserOnlyValue}&lt;/code&gt; variables. These can then be used inside the associated template file (in this case, &lt;code&gt;viewticket.tpl&lt;/code&gt;) in the regular way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;The fixed value is {$fixedValue}.&amp;lt;/p&amp;gt;

{if $userSpecificValue &amp;amp;&amp;amp; $anotherUserOnlyValue}
    &amp;lt;p&amp;gt;I also have this {$userSpecificValue} and {$anotherUserOnlyValue} to show you.&amp;lt;/p&amp;gt;
{/if}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>//developers.whmcs.com/themes/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/testing/</guid>
      <description>

&lt;h2 id=&#34;testing-your-customizations&#34;&gt;Testing Your Customizations&lt;/h2&gt;

&lt;p&gt;WHMCS allows you to preview themes and Order Form Templates before making them live. This is done using URL parameters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For themes, use the &lt;code&gt;?systpl=xxxx&lt;/code&gt; URL parameter.&lt;/li&gt;
&lt;li&gt;For Order Form Templates, use the &lt;code&gt;?carttpl=xxxx&lt;/code&gt; URL parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, to preview a custom system theme named &lt;code&gt;mytemplate&lt;/code&gt; in a WHMCS Client Area at &lt;code&gt;http://www.yourdomain.com/whmcs/&lt;/code&gt;, you would navigate to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.yourdomain.com/whmcs/?systpl=mytemplate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you view a system theme or order form template through this method, the system will validate whether all of the theme or order form template&amp;rsquo;s dependencies are met. If they aren&amp;rsquo;t, the page will not display.&lt;/p&gt;

&lt;p&gt;If the dependencies were met and the theme or order form template displayed successfully, the system theme or Order Form Template will be stored for the duration of your browser session, allowing you to exercise all areas of the Client Area with your new system theme.&lt;/p&gt;

&lt;h2 id=&#34;activating-themes&#34;&gt;Activating Themes&lt;/h2&gt;

&lt;p&gt;Once you&amp;rsquo;re happy with your new theme and are ready to make it live, follow the steps below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Log in to your WHMCS Admin Area.&lt;/li&gt;
&lt;li&gt;Navigate to &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Under the &lt;strong&gt;System Theme&lt;/strong&gt; setting on the &lt;strong&gt;General&lt;/strong&gt; tab, select the name of the theme you created above.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Save Changes&lt;/strong&gt; and visitors to your site will immediately begin seeing your new theme.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Visitors to your site will immediately seeing your new system theme.&lt;/p&gt;

&lt;h2 id=&#34;activating-order-form-templates&#34;&gt;Activating Order Form Templates&lt;/h2&gt;

&lt;p&gt;There are two places in the WHMCS Admin Area in which you can set Order Form Templates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can set the system default Order Form Template at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt; in the &lt;strong&gt;Ordering&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;You can set the Order Form Template for specific product groups at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; Products/Services&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>//developers.whmcs.com/themes/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/themes/debugging/</guid>
      <description>

&lt;h2 id=&#34;causes-of-errors&#34;&gt;Causes of Errors&lt;/h2&gt;

&lt;p&gt;The most common error in custom system theme and order form template development, syntax errors in template files, can cause a page to be unable to render completely.&lt;/p&gt;

&lt;p&gt;Other causes of errors include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using features of Smarty that have been removed in the upstream Smarty package.&lt;/li&gt;
&lt;li&gt;An incompatible custom or third-party module.&lt;/li&gt;
&lt;li&gt;Using PHP code blocks without the &lt;strong&gt;Allow Smarty PHP Tags&lt;/strong&gt; setting enabled at &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; General Settings&lt;/strong&gt; in the &lt;strong&gt;Security&lt;/strong&gt; tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;If you see a blank page after making a change to a template file, check for any logged error messages in the &lt;strong&gt;Activity Log&lt;/strong&gt; at &lt;strong&gt;Configuration &amp;gt; System Logs&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;If you don&amp;rsquo;t find anything in the activity logs, switching to a different system theme or order form template is an easy way to determine if the issue is with your system theme or order form template, or if the problem is something else.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;If you find a variable is not correctly being populated and displayed within a template, this may indicate the variable does not exist or is not available within the template it is being utilised in. Adding &lt;code&gt;{debug}&lt;/code&gt; to the template file and accessing the page that calls that template in a browser will result in a popup list of all available variables within that template, allowing you to determine if that variable is available.&lt;/p&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;For a full list of all template variables made available to all system themes and order form templates, see &lt;a href=&#34;//developers.whmcs.com/themes/variables/&#34;&gt;Variables&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

</description>
    </item>
    
  </channel>
</rss>