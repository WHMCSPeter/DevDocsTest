<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Payment-gateways-rsses on WHMCS Developer Documentation</title>
    <link>//developers.whmcs.com/payment-gateways/index.xml</link>
    <description>Recent content in Payment-gateways-rsses on WHMCS Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <atom:link href="//developers.whmcs.com/payment-gateways/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Payment Gateways</title>
      <link>//developers.whmcs.com/payment-gateways/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/</guid>
      <description>&lt;p&gt;Creating a gateway module allows connection from WHMCS to providers that aren’t supported in a default installation.
There are 2 core types of gateway modules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Third Party Gateways – Where a customer leaves the site to pay and returns when the payment process completes.&lt;/li&gt;
&lt;li&gt;Merchant Gateways – Where a customer enters credit card details in WHMCS.
The payment processes in the background.
Can also include 3D Secure where the user leaves your site.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before starting development of the module for WHMCS, decide which type of gateway module to create.
With that, module creation is ready to begin.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>//developers.whmcs.com/payment-gateways/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/getting-started/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Gateway modules allow a connection between WHMCS and merchants that aren&amp;rsquo;t supported in WHMCS.
This documentation will explain a module&amp;rsquo;s structure and everything needed to create a gateway module for WHMCS.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;To get started, begin by downloading the module development kit from our GitHub site.
There are two sample modules available, depending upon the &lt;a href=&#34;#module-type&#34;&gt;type of gateway&lt;/a&gt; being developed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Third Party Gateway: &lt;a href=&#34;https://github.com/WHMCS/sample-gateway-module&#34;&gt;https://github.com/WHMCS/sample-gateway-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Merchant Gateway: &lt;a href=&#34;https://github.com/WHMCS/sample-merchant-gateway&#34;&gt;https://github.com/WHMCS/sample-merchant-gateway&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take the gateway module template &amp;ldquo;template.php&amp;rdquo; from this download and rename it to &amp;ldquo;yourgatewayname.php&amp;rdquo;.
It should be all lowercase and must start with a letter.
Prefix all functions within a gateway module with the filename.
Open the file and replace all occurrences of &lt;strong&gt;template_&lt;/strong&gt; with &lt;strong&gt;yourgatewayname_&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;config-array&#34;&gt;Config Array&lt;/h2&gt;

&lt;p&gt;Configure the yourgatewayname_config array.
This function is the primary function required by all gateway modules.
The function defines both the display name for the module, and any settings that the gateway module requires.
The available field types are &amp;ldquo;text&amp;rdquo;, &amp;ldquo;dropdown&amp;rdquo;, &amp;ldquo;textarea&amp;rdquo; and &amp;ldquo;yesno&amp;rdquo; (checkboxes).
The sample config array in &amp;ldquo;template.php&amp;rdquo; demonstrates how to use each of these types.
The general formula:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Specify a system name (all in lowercase for the setting to be referenced by in the module code itself)&lt;/li&gt;
&lt;li&gt;A FriendlyName&lt;/li&gt;
&lt;li&gt;Type&lt;/li&gt;
&lt;li&gt;Any settings specific to that field type.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Any fields defined here will be available in all gateway module functions in the $params array.
Avoid common names like currency, invoiceid, etc, as these will conflict with the standard variables.&lt;/p&gt;

&lt;h2 id=&#34;module-type&#34;&gt;Module Type&lt;/h2&gt;

&lt;p&gt;Determine which type of module needs to be created from the 2 core types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Third Party Gateways&lt;/strong&gt; – Where a customer leaves the site to pay and returns when the payment process completes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Merchant Gateways&lt;/strong&gt; – Where a customer enters credit card details in WHMCS.
The payment processes in the background.
Can also include 3D Secure where the user leaves your site.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For a Third Party gateway go to &lt;a href=&#34;//developers.whmcs.com/payment-gateways/third-party-gateway&#34; title=&#34;Third Party Gateway&#34;&gt;Third Party Gateway&lt;/a&gt;.
For a merchant gateway go to &lt;a href=&#34;//developers.whmcs.com/payment-gateways/merchant-gateway&#34; title=&#34;Merchant Gateway&#34;&gt;Merchant Gateway&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Third Party Gateway</title>
      <link>//developers.whmcs.com/payment-gateways/third-party-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/third-party-gateway/</guid>
      <description>

&lt;p&gt;Follow the steps below to create a third party gateway module.
A module where the customer leaves WHMCS to make the payment.
Delete the _capture function before activating the new gateway module in WHMCS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Delete the &lt;strong&gt;_capture&lt;/strong&gt; function from the module template.&lt;/li&gt;
&lt;li&gt;Enter the gateway-specific code for taking the user to the payment process within the _link function.
An example of this step is in the gateway module template supplied with the dev kit.
The code output by this function is HTML, usually for a &amp;lt;&lt;strong&gt;form&lt;/strong&gt;&amp;gt; with a post method.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;h3 id=&#34;invoice-variables&#34;&gt;Invoice Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;invoiceid&#39;] # Invoice ID Number
$params[&#39;description&#39;] # Description (eg. Company Name - Invoice #xxx)
$params[&#39;amount&#39;] # Format: xxx.xx
$params[&#39;currency&#39;] # Currency Code (eg. GBD, USD, etc...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;client-variables&#34;&gt;Client Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;clientdetails&#39;][&#39;firstname&#39;] # Client&#39;s First Name
$params[&#39;clientdetails&#39;][&#39;lastname&#39;] # Client&#39;s Last Name
$params[&#39;clientdetails&#39;][&#39;email&#39;] # Client&#39;s Email Address
$params[&#39;clientdetails&#39;][&#39;address1&#39;] # Client&#39;s Address
$params[&#39;clientdetails&#39;][&#39;address2&#39;]
$params[&#39;clientdetails&#39;][&#39;city&#39;]
$params[&#39;clientdetails&#39;][&#39;state&#39;]
$params[&#39;clientdetails&#39;][&#39;postcode&#39;]
$params[&#39;clientdetails&#39;][&#39;country&#39;]
$params[&#39;clientdetails&#39;][&#39;phonenumber&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;system-variables&#34;&gt;System Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;companyname&#39;] # your Company Name setting in WHMCS
$params[&#39;systemurl&#39;] # the url to the Client Area
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Processing of a payment is in a callback file separate from the module.
(see &lt;a href=&#34;//developers.whmcs.com/payment-gateways/callbacks&#34; title=&#34;Callback Files&#34;&gt;here&lt;/a&gt; for more information).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the gateway won&amp;rsquo;t support automated refunds, delete the _refund function.
Otherwise, refer to the Refund section on page 7 of the sample module.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Merchant Gateway</title>
      <link>//developers.whmcs.com/payment-gateways/merchant-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/merchant-gateway/</guid>
      <description>

&lt;p&gt;A merchant gateway is where the customer enters their card details via the client area.
To create one: Delete the _link function before activating the new module in WHMCS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Delete the _link function from the module template.&lt;/li&gt;
&lt;li&gt;Enter the gateway-specific code for processing the payment into the _capture function.
Generally, this takes the format of an HTTP/Curl request to the gateway provider&amp;rsquo;s API.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;h3 id=&#34;invoice-variables&#34;&gt;Invoice Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;invoiceid&#39;] # Invoice ID Number
$params[&#39;description&#39;] # Description (eg. Company Name - Invoice #xxx)
$params[&#39;amount&#39;] # Format: xxx.xx
$params[&#39;currency&#39;] # Currency Code (eg. GBD, USD, etc...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;client-variables&#34;&gt;Client Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;clientdetails&#39;][&#39;firstname&#39;] # Client&#39;s First Name
$params[&#39;clientdetails&#39;][&#39;lastname&#39;] # Client&#39;s Last Name
$params[&#39;clientdetails&#39;][&#39;email&#39;] # Client&#39;s Email Address
$params[&#39;clientdetails&#39;][&#39;address1&#39;] # Client&#39;s Address
$params[&#39;clientdetails&#39;][&#39;address2&#39;]
$params[&#39;clientdetails&#39;][&#39;city&#39;]
$params[&#39;clientdetails&#39;][&#39;state&#39;]
$params[&#39;clientdetails&#39;][&#39;postcode&#39;]
$params[&#39;clientdetails&#39;][&#39;country&#39;]
$params[&#39;clientdetails&#39;][&#39;phonenumber&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;system-variables&#34;&gt;System Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;companyname&#39;] # your Company Name setting in WHMCS
$params[&#39;systemurl&#39;] # the url to the Client Area
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;card-details&#34;&gt;Card Details&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;cardtype&#39;] # the Card Type (Visa, MasterCard, etc…)
$params[&#39;cardnum&#39;] # the Card Number
$params[&#39;cardexp&#39;] # the Card’s Expiry Date (Format: MMYY)
$params[&#39;cardstart&#39;] # the Card’s Start Date (Format: MMYY)
$params[&#39;cardissuenum&#39;] # the Card’s Issue Number (Switch/Solo Cards)
$params[&#39;cccvv&#39;] # Not always present (recurring transactions)
# but would always be present for client initiated attempts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;responses&#34;&gt;Responses&lt;/h2&gt;

&lt;h3 id=&#34;success&#34;&gt;Success&lt;/h3&gt;

&lt;p&gt;Once processed, and the transaction has a response, return an array with the results to WHMCS.
For a successful capture, use the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return array(
    &amp;quot;status&amp;quot; =&amp;gt; &amp;quot;success&amp;quot;, # The status index must be success to tell WHMCS that the capture was successful.
    &amp;quot;transid&amp;quot; =&amp;gt; $results[&amp;quot;transid&amp;quot;], # The transid key should be the value of the transaction ID that came back from the gateway.
    &amp;quot;rawdata&amp;quot; =&amp;gt; $results, # The rawdata key should be an array of the data returned from the gateway for storage in the WHMCS Gateway Log.
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;failure&#34;&gt;Failure&lt;/h3&gt;

&lt;p&gt;If the transaction were to fail, use the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return array(
    &amp;quot;status&amp;quot; =&amp;gt; &amp;quot;declined&amp;quot;,
    &amp;quot;rawdata&amp;quot; =&amp;gt; $results,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The status key can be any value (declined, error, invalid hash, etc).
This value will display as the reason for failure, in the gateway log.
The rawdata key should be an array of the data returned from the gateway for storage in the WHMCS Gateway Log.&lt;/p&gt;

&lt;p&gt;If the gateway supports 3D Secure (Verified by Visa or MasterCard Secure Code) then please refer &lt;a href=&#34;//developers.whmcs.com/provisioning-modules/3d-secure&#34; title=&#34;3D Secure Process&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;refunds&#34;&gt;Refunds&lt;/h2&gt;

&lt;p&gt;Code for processing a refund goes into the &lt;strong&gt;_refund&lt;/strong&gt; function.
This receives the same variables as the &lt;strong&gt;_capture&lt;/strong&gt; function, but with an added transaction id:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;transid&#39;] # the transaction ID of the original transaction to refund
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The return arrays for a success or failure should be exactly the same as described above for the &lt;strong&gt;_capture&lt;/strong&gt; function.
If the gateway module will not support refunds, delete the &lt;strong&gt;_refund&lt;/strong&gt; function from the module file.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Callback Files</title>
      <link>//developers.whmcs.com/payment-gateways/callbacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/callbacks/</guid>
      <description>

&lt;p&gt;If a gateway provider supports notifying when a payment is successful, WHMCS uses a callback file to receive those.
A callback will process the response and apply a payment as required.
An included sample callback file is in the dev kit for this purpose named &lt;strong&gt;callback.php&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Rename it to match the gateway module.&lt;/li&gt;
&lt;li&gt;Modify the variables within it, as per the comments in the code.&lt;/li&gt;
&lt;li&gt;Modify it to match the variables that the specific gateway returns.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;helper-functions&#34;&gt;Helper Functions&lt;/h2&gt;

&lt;p&gt;Included in the sample file are a number of helper functions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$GATEWAY = getGatewayVariables(‘yourgatewayname’);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This function can be used to retrieve the configuration data for a module as specified in the &lt;strong&gt;_config&lt;/strong&gt; array.
For example, it might be needed to get a gateway username or secret key to validate a callback.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$invoiceid = checkCbInvoiceID($invoiceid, $GATEWAY[‘name’]);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use this function can to check that the invoice ID received back is valid.
Pass the $invoiceid and the gateway name into the function.
If the invoice number is valid, the script will continue executing.
Otherwise, the script will halt and an appropriate gateway log entry created.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;checkCbTransID($transid);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use this function can to check for any existing transactions for a given transaction ID.
This protects against duplicate callbacks.
If the transaction ID is already in the database, the callback script execution will halt.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;logTransaction($GATEWAY[‘name’], $_POST, &amp;quot;Successful&amp;quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Use this function can to create a gateway log entry.
The first variable needs to be the name of the gateway module.
The second should be an array of data, such as the &lt;strong&gt;$_POST&lt;/strong&gt; or &lt;strong&gt;$_REQUEST&lt;/strong&gt; super globals.
The last variable should be the result or status to show in the log.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Payment Reversals</title>
      <link>//developers.whmcs.com/payment-gateways/reversals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/reversals/</guid>
      <description>

&lt;p&gt;WHMCS 7.2 and later supports payment reversal callbacks.&lt;/p&gt;

&lt;p&gt;If your payment gateway provider supports sending notifications when a payment dispute or chargeback is initiated, you can leverage this to have automated actions performed within WHMCS including reverting of next due date increments, changing the invoice status to Collections and sending administrative users an email notification.&lt;/p&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Supported as part of the callback file, you can trigger a payment reversal action within WHMCS by executing the following function call.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Reverse a payment.
 *
 * @param string $reverseTransactionId
 * @param string $originalTransactionId
 *
 * @throws Exception
 */
try {
    $reverseTransactionId = &#39;10643229BD2660707&#39;;
    $originalTransactionId = &#39;7WA952319L375522P&#39;;
    paymentReversed($reverseTransactionId, $originalTransactionId);
} catch (\Exception $e) {
    // Transaction could not be found or already reversed
    $errorMessage = $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two required input parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reverseTransactionId&lt;/code&gt; - The unique transaction ID assigned to the reversal action&lt;/li&gt;
&lt;li&gt;&lt;code&gt;originalTransactionId&lt;/code&gt; - The unique transaction ID of the original transaction to be reversed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function will throw exceptions under the following conditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple Original Transaction ID matches found - in the case of more than one transaction being found for a given original Transaction ID, the reversal cannot be processed automatically&lt;/li&gt;
&lt;li&gt;Original Transaction Not Found - occurs when the original Transaction ID is not found in the database&lt;/li&gt;
&lt;li&gt;Transaction Already Reversed - occurs when the original Transaction ID has already been refunded, or the reversal Transaction ID already exists in the database&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>3D Secure Process</title>
      <link>//developers.whmcs.com/payment-gateways/3d-secure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/3d-secure/</guid>
      <description>

&lt;p&gt;If the merchant gateway supports 3D Secure (also known as Verified by Visa or MasterCard Secure Code), then it can be utilized within WHMCS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a function to the module named &lt;strong&gt;yourgatewayname_3dsecure&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Return the HTML for the &lt;strong&gt;&lt;form&gt;&lt;/strong&gt; post method to take the user to the 3D Secure process.
An example of this is below:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;strong&gt;_3dsecure&lt;/strong&gt; function is passed all the same &lt;a href=&#34;//developers.whmcs.com/payment-gateways/merchant-gateways#variables&#34; title=&#34;Merchant Gateway Variables&#34;&gt;variables&lt;/a&gt; that the &lt;strong&gt;_capture&lt;/strong&gt; function is.
The return url should be a &lt;a href=&#34;//developers.whmcs.com/payment-gateways/callbacks&#34; title=&#34;Callback Files&#34;&gt;callback file&lt;/a&gt; to handle the response.&lt;/p&gt;

&lt;h2 id=&#34;example-function&#34;&gt;Example Function&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function yourgatewayname_3dsecure(array $params = array()) {
    return &#39;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;https://www.gateway.com/3dsecure/&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;gwlogin&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;loginid&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;invoiceid&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;invoiceid&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;amount&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;amount&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;firstname&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;firstname&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;lastname&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;lastname&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;address&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;address1&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;city&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;city&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;state&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;state&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;postcode&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;postcode&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;country&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;country&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;phonenumber&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;phonenumber&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;email&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;email&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;ccnumber&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;cardnum&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;expirymonth&amp;quot; value=&amp;quot;&#39; . substr($params[&#39;cardexp&#39;], 0, 2) . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;expiryyear&amp;quot; value=&amp;quot;&#39; . substr($params[&#39;cardexp&#39;], 2, 2) . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;cvv2&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;cccvv&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;return_url&amp;quot; value=&amp;quot;&#39; . $params[&#39;systemurl&#39;] . &#39;/modules/gateways/callback/yourgatewayname.php&amp;quot; /&amp;gt;
&amp;lt;noscript&amp;gt;
&amp;lt;div class=&amp;quot;errorbox&amp;quot;&amp;gt;&amp;lt;b&amp;gt;JavaScript is currently disabled or is not supported by your
browser.&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;Please click the continue button to proceed with the processing of your
transaction.&amp;lt;/div&amp;gt;
&amp;lt;p align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Continue &amp;gt;&amp;gt;&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/noscript&amp;gt;
&amp;lt;/form&amp;gt;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tokenised Remote Storage</title>
      <link>//developers.whmcs.com/payment-gateways/tokenised-remote-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/tokenised-remote-storage/</guid>
      <description>

&lt;p&gt;With increasing rules &amp;amp; requirements surrounding the storing of credit card details,
merchant gateways are offering services where repeat rebills can be performed without needing to store credit card details.
Gateway modules can use this functionality.&lt;/p&gt;

&lt;p&gt;The basic logic behind token gateways in WHMCS is that clients must either have a credit card number or a token stored in order for recurring billing.
Add a function named &lt;strong&gt;_storeremote&lt;/strong&gt; to the custom gateway module.
This function will override the default storage when entering new credit card details.
Instead of saving in the database, &lt;strong&gt;_storeremote&lt;/strong&gt; communicates with the gateways API, and returns a token that gets assigned to WHMCS.&lt;/p&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;A number of variables as passed into the &lt;strong&gt;_storeremote&lt;/strong&gt; function as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;gatewayid&#39;] # the token stored for the client
$params[&#39;cardtype&#39;] #the Card Type (Visa, MasterCard, etc…)
$params[&#39;cardnum&#39;] # the Card Number
$params[&#39;cardexp&#39;] # the Card’s Expiry Date (Format: MMYY)
$params[&#39;cardstart&#39;] # the Card’s Start Date (Format: MMYY)
$params[&#39;cardissuenum&#39;] # the Card’s Issue Number (Switch/Solo Cards)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;calling&#34;&gt;Calling&lt;/h2&gt;

&lt;p&gt;On the first call, the gatewayid will be empty.
When empty, create a new profile at the gateway.
On later calls, the created gatewayid that will be passed in and the existing profile updated.
If the cardnum variable is empty, this indicates a removal request of the stored credit card details.
Once the card details have been updated or stored remotely, return either a success or failure response to tell WHMCS if it worked.
If successful, return also the token that has been assigned:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return array(
    &amp;quot;status&amp;quot; =&amp;gt; &amp;quot;success&amp;quot;,
    &amp;quot;gatewayid&amp;quot; =&amp;gt; $results[&amp;quot;token&amp;quot;],
    &amp;quot;rawdata&amp;quot; =&amp;gt; $results,
);

return array(
    &amp;quot;status&amp;quot; =&amp;gt; &amp;quot;failed&amp;quot;,
    &amp;quot;rawdata&amp;quot; =&amp;gt; $results,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this function exists in a gateway module, WHMCS will only store the card type, expiry date and the last 4 digits locally in the database.
Clients and Admins will still be able to see exactly what card is stored remotely from within WHMCS.
Then within the capture function, instead of &lt;code&gt;$params[‘cardnum’]&lt;/code&gt;, &lt;code&gt;$params[‘gatewayid’]&lt;/code&gt; is received to perform the capture.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation &amp; Activation</title>
      <link>//developers.whmcs.com/payment-gateways/installation-activation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/installation-activation/</guid>
      <description>

&lt;p&gt;To install the new module, upload it to the &lt;code&gt;/modules/gateways/&lt;/code&gt; folder of your WHMCS installation.&lt;/p&gt;

&lt;p&gt;If the module includes a callback file, that should be uploaded to the &lt;code&gt;/modules/gateways/callback/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Once uploaded, navigate to &lt;strong&gt;Setup &amp;gt; Payment Gateways&lt;/strong&gt; to activate and configure the new module.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;&lt;strong&gt;Important Note&lt;/strong&gt; The process of activating a module detects the type of module that has been created. Therefore if you experience unexpected behaviours, please try deactivating and reactivating your module before continuing.&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&#34;troubleshooting-errors-during-activation&#34;&gt;Troubleshooting errors during activation&lt;/h2&gt;

&lt;p&gt;If you receive a blank page or error message within the &lt;strong&gt;Setup &amp;gt; Payment Gateways&lt;/strong&gt; page upon uploading your new payment gateway module, this indicates there could be a syntax error within the new code.&lt;/p&gt;

&lt;p&gt;To debug this, you can turn on error reporting.  To do this, navigate to &lt;strong&gt;Setup &amp;gt; General Settings &amp;gt; Other&lt;/strong&gt; and check the &lt;strong&gt;Display Errors&lt;/strong&gt; setting.&lt;/p&gt;

&lt;p&gt;This enables PHP error reporting and should show the cause of any issues. Once resolved, remember to disable Display Errors again.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>