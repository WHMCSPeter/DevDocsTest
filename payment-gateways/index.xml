<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Payment-gateways-rsses on WHMCS Developer Documentation</title>
    <link>//developers.whmcs.com/payment-gateways/index.xml</link>
    <description>Recent content in Payment-gateways-rsses on WHMCS Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <atom:link href="//developers.whmcs.com/payment-gateways/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Payment Gateways</title>
      <link>//developers.whmcs.com/payment-gateways/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/</guid>
      <description>&lt;p&gt;Creating a payment gateway module allows you to connect and integrate WHMCS with additional payment service providers.&lt;/p&gt;

&lt;p&gt;The following guide assumes you have downloaded and are using one of the sample modules made available via our &lt;a href=&#34;https://github.com/whmcs&#34;&gt;Github page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get started, continue to the Getting Started page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>//developers.whmcs.com/payment-gateways/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/getting-started/</guid>
      <description>

&lt;p&gt;Payment gateway modules allow you to connect and integrate WHMCS with additional payment service providers.&lt;/p&gt;

&lt;h2 id=&#34;types-of-payment-gateway&#34;&gt;Types of payment gateway&lt;/h2&gt;

&lt;p&gt;Before you begin, you need to determine the type of payment gateway module you will be creating.&lt;/p&gt;

&lt;p&gt;There are 3 primary types of payment gateway module:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Third Party Gateways&lt;/strong&gt; – Where a customer leaves the site to pay and returns when the payment process is complete. Examples include PayPal Standard, 2Checkout&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Merchant Gateways&lt;/strong&gt; – Where a customer enters credit card details in WHMCS. The payment processes in the background. Can also include 3D Secure where the user leaves your site. Examples include PayPal Pro, Authorize.net AIM&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tokenised Gateways&lt;/strong&gt; - A variation of a merchant gateway where credit card details are not stored locally. Tokenised Gateways can be further broken down into two groups:&lt;/p&gt;

&lt;p&gt;i. Remote Storage - Where the customer enters credit card details within WHMCS but the card details are not stored locally within the database instead being submitted immediately to the payment gateway and only a token returned by the gateway being stored.&lt;/p&gt;

&lt;p&gt;ii. iFrame Gateways - Where the gateway payment checkout process is loaded within an iframe. Examples include SagePay Form, Quantum Vault&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;To get started, begin by downloading the appropriate sample module from our &lt;a href=&#34;https://github.com/whmcs&#34;&gt;Github page&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Third Party Gateway: &lt;a href=&#34;https://github.com/WHMCS/sample-gateway-module&#34;&gt;https://github.com/WHMCS/sample-gateway-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Merchant Gateway: &lt;a href=&#34;https://github.com/WHMCS/sample-merchant-gateway&#34;&gt;https://github.com/WHMCS/sample-merchant-gateway&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take the gateway module example file within the repo and rename it to &lt;code&gt;yourgatewayname.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The filename should be all lowercase and must start with a letter.&lt;/p&gt;

&lt;p&gt;After renaming it, open the file and replace all occurrences of &lt;code&gt;gatewaymodule_&lt;/code&gt; with &lt;code&gt;yourgatewayname_&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;We recommend prefixing all functions within a gateway module with the filename to avoid naming conflicts.&lt;/p&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Meta Data Parameters</title>
      <link>//developers.whmcs.com/payment-gateways/meta-data-params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/meta-data-params/</guid>
      <description>&lt;p&gt;The meta data function allows you to define module related capabilities and settings.&lt;/p&gt;

&lt;p&gt;Payment Gateway Modules support the following meta data configuration parameters.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Supported As Of&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DisplayName&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;Module Name&lt;/td&gt;
&lt;td&gt;An alternate display name that will be used instead of the filename if defined&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;APIVersion&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;5.2&lt;/td&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;Defines API Version the module uses. Use &lt;code&gt;1.1&lt;/code&gt; unless you have a need specific to use &lt;code&gt;1.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DisableLocalCreditCardInput&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Set to true if credit card input should not be allowed locally for this payment gateway module.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TokenisedStorage&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;7.1&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Set to true if this payment gateway module leverages tokenised storage for credit card information.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>//developers.whmcs.com/payment-gateways/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/configuration/</guid>
      <description>

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;A payment gateway module can have user configurable options that are set via the WHMCS admin interface.&lt;/p&gt;

&lt;p&gt;These are defined in the &lt;code&gt;_config&lt;/code&gt; function of the module which is a required function for all gateway modules.&lt;/p&gt;

&lt;p&gt;The function defines both the display name for the module, and any settings that the gateway module requires.&lt;/p&gt;

&lt;h3 id=&#34;defining-configuration-fields&#34;&gt;Defining configuration fields&lt;/h3&gt;

&lt;p&gt;The sample gateway module demonstrates each type of field and the options available for them.&lt;/p&gt;

&lt;p&gt;Below is an example field definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;accountID&#39; =&amp;gt; array(
    &#39;FriendlyName&#39; =&amp;gt; &#39;Account ID&#39;,
    &#39;Type&#39; =&amp;gt; &#39;text&#39;,
    &#39;Size&#39; =&amp;gt; &#39;25&#39;,
    &#39;Default&#39; =&amp;gt; &#39;&#39;,
    &#39;Description&#39; =&amp;gt; &#39;Enter your account ID here&#39;,
),
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each field includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A system name - a normalized name by which the field can be referenced in module code&lt;/li&gt;
&lt;li&gt;A FriendlyName - a human readable friendly display name for the field&lt;/li&gt;
&lt;li&gt;Type - The type of field. The available field types are &amp;ldquo;text&amp;rdquo;, &amp;ldquo;dropdown&amp;rdquo;, &amp;ldquo;textarea&amp;rdquo; and &amp;ldquo;yesno&amp;rdquo; (checkboxes).&lt;/li&gt;
&lt;li&gt;Any settings specific to that field type including Size, Default Value and Description&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Any fields defined here will be available along with their configured values in all gateway module functions in the $params array.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;Avoid common names like currency, invoiceid, etc, as these may conflict with the standard variables.&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&#34;build-your-gateway&#34;&gt;Build your gateway&lt;/h2&gt;

&lt;p&gt;Now it&amp;rsquo;s time to integrate your payment gateway provider.&lt;/p&gt;

&lt;p&gt;For a Third Party Gateway, &lt;a href=&#34;//developers.whmcs.com/payment-gateways/third-party-gateway&#34; title=&#34;Third Party Gateway&#34;&gt;click here&lt;/a&gt;. For a Merchant Gateway, &lt;a href=&#34;//developers.whmcs.com/payment-gateways/merchant-gateway&#34; title=&#34;Merchant Gateway&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Third Party Gateway</title>
      <link>//developers.whmcs.com/payment-gateways/third-party-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/third-party-gateway/</guid>
      <description>

&lt;p&gt;Follow the steps below to create a third party gateway module.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;A Third Party Gateway module is one where a customer leaves the site to pay and returns when the payment process is complete. Examples include PayPal Standard, 2Checkout&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Delete the &lt;code&gt;_capture&lt;/code&gt; function from the module template.&lt;/li&gt;
&lt;li&gt;Define the HTML code that will forward the user to the payment gateway to complete the payment process inside the &lt;code&gt;_link&lt;/code&gt; function. This is typically done by way of an HTML form utilizing the &lt;strong&gt;POST&lt;/strong&gt; method.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;h3 id=&#34;invoice-variables&#34;&gt;Invoice Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;invoiceid&#39;] # Invoice ID Number
$params[&#39;description&#39;] # Description (eg. Company Name - Invoice #xxx)
$params[&#39;amount&#39;] # Format: xxx.xx
$params[&#39;currency&#39;] # Currency Code (eg. GBD, USD, etc...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;client-variables&#34;&gt;Client Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;clientdetails&#39;][&#39;firstname&#39;] # Client&#39;s First Name
$params[&#39;clientdetails&#39;][&#39;lastname&#39;] # Client&#39;s Last Name
$params[&#39;clientdetails&#39;][&#39;email&#39;] # Client&#39;s Email Address
$params[&#39;clientdetails&#39;][&#39;address1&#39;] # Client&#39;s Address
$params[&#39;clientdetails&#39;][&#39;address2&#39;]
$params[&#39;clientdetails&#39;][&#39;city&#39;]
$params[&#39;clientdetails&#39;][&#39;state&#39;]
$params[&#39;clientdetails&#39;][&#39;postcode&#39;]
$params[&#39;clientdetails&#39;][&#39;country&#39;]
$params[&#39;clientdetails&#39;][&#39;phonenumber&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;system-variables&#34;&gt;System Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;companyname&#39;] # your Company Name setting in WHMCS
$params[&#39;systemurl&#39;] # the url to the Client Area
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Processing of payment notifications can be done in a callback file. See &lt;a href=&#34;//developers.whmcs.com/payment-gateways/callbacks&#34; title=&#34;Callback Files&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Support for refunding of transactions can be implemented using a refund routine. See &lt;a href=&#34;//developers.whmcs.com/payment-gateways/refunds&#34; title=&#34;Refunding Transactions&#34;&gt;here&lt;/a&gt; for more information.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Merchant Gateway</title>
      <link>//developers.whmcs.com/payment-gateways/merchant-gateway/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/merchant-gateway/</guid>
      <description>

&lt;p&gt;Follow the steps below to create a third party gateway module.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;A Merchant Gateway is one where a customer enters credit card details in WHMCS. The payment processes in the background. Can also include 3D Secure where the user leaves your site. Examples include PayPal Pro, Authorize.net AIM&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Delete the &lt;code&gt;_link&lt;/code&gt; function from the module template.&lt;/li&gt;
&lt;li&gt;Enter the gateway-specific code for processing the payment into the _capture function.
Typically this takes the format of an HTTP/Curl request to the gateway provider&amp;rsquo;s API.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;h3 id=&#34;invoice-variables&#34;&gt;Invoice Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;invoiceid&#39;] # Invoice ID Number
$params[&#39;description&#39;] # Description (eg. Company Name - Invoice #xxx)
$params[&#39;amount&#39;] # Format: xxx.xx
$params[&#39;currency&#39;] # Currency Code (eg. GBD, USD, etc...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;client-variables&#34;&gt;Client Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;clientdetails&#39;][&#39;firstname&#39;] # Client&#39;s First Name
$params[&#39;clientdetails&#39;][&#39;lastname&#39;] # Client&#39;s Last Name
$params[&#39;clientdetails&#39;][&#39;email&#39;] # Client&#39;s Email Address
$params[&#39;clientdetails&#39;][&#39;address1&#39;] # Client&#39;s Address
$params[&#39;clientdetails&#39;][&#39;address2&#39;]
$params[&#39;clientdetails&#39;][&#39;city&#39;]
$params[&#39;clientdetails&#39;][&#39;state&#39;]
$params[&#39;clientdetails&#39;][&#39;postcode&#39;]
$params[&#39;clientdetails&#39;][&#39;country&#39;]
$params[&#39;clientdetails&#39;][&#39;phonenumber&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;system-variables&#34;&gt;System Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;companyname&#39;] # your Company Name setting in WHMCS
$params[&#39;systemurl&#39;] # the url to the Client Area
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;card-details&#34;&gt;Card Details&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;cardtype&#39;] # the Card Type (Visa, MasterCard, etc…)
$params[&#39;cardnum&#39;] # the Card Number
$params[&#39;cardexp&#39;] # the Card’s Expiry Date (Format: MMYY)
$params[&#39;cardstart&#39;] # the Card’s Start Date (Format: MMYY)
$params[&#39;cardissuenum&#39;] # the Card’s Issue Number (Switch/Solo Cards)
$params[&#39;cccvv&#39;] # Not always present (recurring transactions)
# but would always be present for client initiated attempts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;responses&#34;&gt;Responses&lt;/h2&gt;

&lt;h3 id=&#34;success&#34;&gt;Success&lt;/h3&gt;

&lt;p&gt;Once processed, and the transaction has a response, return an array with the results to WHMCS.
For a successful capture, use the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return array(
    &amp;quot;status&amp;quot; =&amp;gt; &amp;quot;success&amp;quot;, # The status index must be success to tell WHMCS that the capture was successful.
    &amp;quot;transid&amp;quot; =&amp;gt; $results[&amp;quot;transid&amp;quot;], # The transid key should be the value of the transaction ID that came back from the gateway.
    &amp;quot;rawdata&amp;quot; =&amp;gt; $results, # The rawdata key should be an array of the data returned from the gateway for storage in the WHMCS Gateway Log.
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;failure&#34;&gt;Failure&lt;/h3&gt;

&lt;p&gt;If the transaction were to fail, use the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return array(
    &amp;quot;status&amp;quot; =&amp;gt; &amp;quot;declined&amp;quot;,
    &amp;quot;rawdata&amp;quot; =&amp;gt; $results,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The status key can be any value (declined, error, invalid hash, etc).
This value will display as the reason for failure, in the gateway log.
The rawdata key should be an array of the data returned from the gateway for storage in the WHMCS Gateway Log.&lt;/p&gt;

&lt;p&gt;If the gateway supports 3D Secure (Verified by Visa or MasterCard Secure Code) then please refer &lt;a href=&#34;//developers.whmcs.com/provisioning-modules/3d-secure&#34; title=&#34;3D Secure Process&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;refunds&#34;&gt;Refunds&lt;/h2&gt;

&lt;p&gt;Code for processing a refund goes into the &lt;strong&gt;_refund&lt;/strong&gt; function.
This receives the same variables as the &lt;strong&gt;_capture&lt;/strong&gt; function, but with an added transaction id:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;transid&#39;] # the transaction ID of the original transaction to refund
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The return arrays for a success or failure should be exactly the same as described above for the &lt;strong&gt;_capture&lt;/strong&gt; function.
If the gateway module will not support refunds, delete the &lt;strong&gt;_refund&lt;/strong&gt; function from the module file.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Callback Files</title>
      <link>//developers.whmcs.com/payment-gateways/callbacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/callbacks/</guid>
      <description>

&lt;p&gt;If you are building a payment gateway that supports notifying you when a payment is successful you should create a callback file as part of your module to receive and handle those notifications.&lt;/p&gt;

&lt;p&gt;A callback file should process and validate the notification and then call one of several functions made available by WHMCS to log and apply the payment.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-callback-file&#34;&gt;Creating a callback file&lt;/h2&gt;

&lt;p&gt;A sample callback file is included in the sample gateway module named &lt;code&gt;callback/gatewaymodule.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We recommend using the sample file as a starting point for your creating your own gateway callback file. Rename it to match the name of your own gateway module.&lt;/p&gt;

&lt;p&gt;Most callback files should use the following workflow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Implement logic to validate the authenticity of the payment gateway callback and prevent abuse.&lt;/li&gt;
&lt;li&gt;Validate the invoice ID the callback relates to using the &lt;code&gt;checkCbInvoiceID&lt;/code&gt; helper method.&lt;/li&gt;
&lt;li&gt;Verify the transaction ID has not already been recorded using the &lt;code&gt;checkCbTransID&lt;/code&gt; helper method.&lt;/li&gt;
&lt;li&gt;Log the transaction to the WHMCS Gateway Log using the &lt;code&gt;logTransaction&lt;/code&gt; helper method.&lt;/li&gt;
&lt;li&gt;Apply the payment to the invoice using the &lt;code&gt;addInvoicePayment&lt;/code&gt; helper method.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;helper-functions&#34;&gt;Helper Functions&lt;/h2&gt;

&lt;p&gt;The following helper functions are made available for use in payment gateway callback files.&lt;/p&gt;

&lt;h3 id=&#34;get-gateway-variables&#34;&gt;Get Gateway Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Get Gateway Variables.
 *
 * Retrieves configuration setting values for a given module name.
 *
 * @param string $gatewayName
 */
$gatewayParams = getGatewayVariables(&#39;yourgatewayname&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function can be used to retrieve the configuration data for a module as specified in the &lt;strong&gt;_config&lt;/strong&gt; array.
For example, it might be needed to get a gateway username or secret key to validate a callback.&lt;/p&gt;

&lt;h3 id=&#34;validate-callback-invoice-id&#34;&gt;Validate Callback Invoice ID&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Validate Callback Invoice ID.
 *
 * Checks invoice ID is a valid invoice number. Note it will count an
 * invoice in any status as valid.
 *
 * Performs a die upon encountering an invalid Invoice ID.
 *
 * Returns a normalised invoice ID.
 *
 * @param int $invoiceId
 * @param string $gatewayName
 */
$invoiceId = checkCbInvoiceID($invoiceId, $gatewayName);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use this function to verify that the invoice ID received in a callback is valid.
Pass the $invoiceid and the gateway name into the function.
If the invoice number is invalid, the callback script execution will be halted.&lt;/p&gt;

&lt;h3 id=&#34;validate-callback-transaction-id&#34;&gt;Validate Callback Transaction ID&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Check Callback Transaction ID.
 *
 * Performs a check for any existing transactions with the same given
 * transaction number.
 *
 * Performs a die upon encountering a duplicate.

 * @param string $transactionId
 */
checkCbTransID($transactionId);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use this function to check for any existing transactions for a given transaction ID.
This protects against duplicate callbacks for the same transaction.
If the transaction ID is already in the database, the callback script execution will be halted.&lt;/p&gt;

&lt;h3 id=&#34;log-transaction&#34;&gt;Log Transaction&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Log Transaction.
 *
 * Add an entry to the Gateway Log for debugging purposes.
 *
 * The debug data can be a string or an array.
 *
 * @param string $gatewayName Display label
 * @param string|array $debugData Data to log
 * @param string $transactionStatus Status
 */
logTransaction($gatewayName, $_POST, $transactionStatus);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use this function to create a gateway log entry.
The first input parameter should be the name of the gateway module.
The second input parameter should be an array of data received, such as the &lt;strong&gt;$_POST&lt;/strong&gt; or &lt;strong&gt;$_REQUEST&lt;/strong&gt; super globals.
The last input parameter should be the human readable result/status to display in the log.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Refunds</title>
      <link>//developers.whmcs.com/payment-gateways/refunds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/refunds/</guid>
      <description>

&lt;p&gt;This function will be called any time a transaction is requested to be refunded from within WHMCS.&lt;/p&gt;

&lt;p&gt;It is supported by all payment gateway module types.  If your payment gateway module does not support refunds, simply do not define this function within your module.&lt;/p&gt;

&lt;p&gt;Like with a capture attempt, upon completion of the refund, you are expected to return an array containing the transaction details consisting of the status, and if successful a transaction ID and optionally some data to be recorded to the gateway log for debugging purposes.&lt;/p&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;The following parameters are made available in the parameters passed to the refund function.&lt;/p&gt;

&lt;h3 id=&#34;invoice-variables&#34;&gt;Invoice Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;invoiceid&#39;] # Invoice ID Number
$params[&#39;transid&#39;] # Transaction ID to be refunded
$params[&#39;amount&#39;] # Amount to be refunded (Format: xxx.xx)
$params[&#39;currency&#39;] # Currency Code (eg. GBD, USD, etc...)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;client-variables&#34;&gt;Client Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;clientdetails&#39;][&#39;firstname&#39;] # Client&#39;s First Name
$params[&#39;clientdetails&#39;][&#39;lastname&#39;] # Client&#39;s Last Name
$params[&#39;clientdetails&#39;][&#39;email&#39;] # Client&#39;s Email Address
$params[&#39;clientdetails&#39;][&#39;address1&#39;] # Client&#39;s Address
$params[&#39;clientdetails&#39;][&#39;address2&#39;]
$params[&#39;clientdetails&#39;][&#39;city&#39;]
$params[&#39;clientdetails&#39;][&#39;state&#39;]
$params[&#39;clientdetails&#39;][&#39;postcode&#39;]
$params[&#39;clientdetails&#39;][&#39;country&#39;]
$params[&#39;clientdetails&#39;][&#39;phonenumber&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;system-variables&#34;&gt;System Variables&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;companyname&#39;] # your Company Name setting in WHMCS
$params[&#39;systemurl&#39;] # the url to the Client Area
$params[&#39;name&#39;] # Module Display Name
$params[&#39;moduleName&#39;] # Module System Name
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;response-format&#34;&gt;Response Format&lt;/h2&gt;

&lt;p&gt;Upon completion of the refund attempt, return the results in the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return array(
    &#39;status&#39; =&amp;gt; &#39;success&#39;,
    &#39;rawdata&#39; =&amp;gt; $responseData,
    &#39;transid&#39; =&amp;gt; $refundTransactionId,
    &#39;fees&#39; =&amp;gt; $feeAmount,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;status&lt;/strong&gt; - &lt;code&gt;success&lt;/code&gt; if successful, otherwise &lt;code&gt;declined&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rawdata&lt;/strong&gt; - data to be recorded in the gateway log for debugging purposes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;transid&lt;/strong&gt; - Unique Transaction ID for the refund transaction&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fees&lt;/strong&gt; - Optional fee amount for the fee value refunded&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Payment Reversals</title>
      <link>//developers.whmcs.com/payment-gateways/reversals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/reversals/</guid>
      <description>

&lt;p&gt;WHMCS 7.2 and later supports payment reversal callbacks.&lt;/p&gt;

&lt;p&gt;If your payment gateway provider supports sending notifications when a payment dispute or chargeback is initiated, you can leverage this to have automated actions performed within WHMCS including reverting of next due date increments, changing the invoice status to Collections and sending administrative users an email notification.&lt;/p&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Supported as part of the callback file, you can trigger a payment reversal action within WHMCS by executing the following function call.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Reverse a payment.
 *
 * @param string $reverseTransactionId
 * @param string $originalTransactionId
 *
 * @throws Exception
 */
try {
    $reverseTransactionId = &#39;10643229BD2660707&#39;;
    $originalTransactionId = &#39;7WA952319L375522P&#39;;
    paymentReversed($reverseTransactionId, $originalTransactionId);
} catch (\Exception $e) {
    // Transaction could not be found or already reversed
    $errorMessage = $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two required input parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reverseTransactionId&lt;/code&gt; - The unique transaction ID assigned to the reversal action&lt;/li&gt;
&lt;li&gt;&lt;code&gt;originalTransactionId&lt;/code&gt; - The unique transaction ID of the original transaction to be reversed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function will throw exceptions under the following conditions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiple Original Transaction ID matches found - in the case of more than one transaction being found for a given original Transaction ID, the reversal cannot be processed automatically&lt;/li&gt;
&lt;li&gt;Original Transaction Not Found - occurs when the original Transaction ID is not found in the database&lt;/li&gt;
&lt;li&gt;Transaction Already Reversed - occurs when the original Transaction ID has already been refunded, or the reversal Transaction ID already exists in the database&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>3D Secure Process</title>
      <link>//developers.whmcs.com/payment-gateways/3d-secure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/3d-secure/</guid>
      <description>

&lt;p&gt;If the merchant gateway supports 3D Secure (also known as Verified by Visa or MasterCard Secure Code), then it can be utilized within WHMCS.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a function to the module named &lt;strong&gt;yourgatewayname_3dsecure&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Return the HTML for the &lt;strong&gt;&lt;form&gt;&lt;/strong&gt; post method to take the user to the 3D Secure process.
An example of this is below:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;strong&gt;_3dsecure&lt;/strong&gt; function is passed all the same &lt;a href=&#34;//developers.whmcs.com/payment-gateways/merchant-gateways#variables&#34; title=&#34;Merchant Gateway Variables&#34;&gt;variables&lt;/a&gt; that the &lt;strong&gt;_capture&lt;/strong&gt; function is.
The return url should be a &lt;a href=&#34;//developers.whmcs.com/payment-gateways/callbacks&#34; title=&#34;Callback Files&#34;&gt;callback file&lt;/a&gt; to handle the response.&lt;/p&gt;

&lt;h2 id=&#34;example-function&#34;&gt;Example Function&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function yourgatewayname_3dsecure(array $params = array()) {
    return &#39;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;https://www.gateway.com/3dsecure/&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;gwlogin&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;loginid&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;invoiceid&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;invoiceid&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;amount&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;amount&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;firstname&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;firstname&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;lastname&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;lastname&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;address&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;address1&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;city&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;city&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;state&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;state&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;postcode&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;postcode&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;country&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;country&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;phonenumber&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;phonenumber&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;email&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;clientdetails&amp;quot;][&amp;quot;email&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;ccnumber&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;cardnum&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;expirymonth&amp;quot; value=&amp;quot;&#39; . substr($params[&#39;cardexp&#39;], 0, 2) . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;expiryyear&amp;quot; value=&amp;quot;&#39; . substr($params[&#39;cardexp&#39;], 2, 2) . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;cvv2&amp;quot; value=&amp;quot;&#39; . $params[&amp;quot;cccvv&amp;quot;] . &#39;&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;return_url&amp;quot; value=&amp;quot;&#39; . $params[&#39;systemurl&#39;] . &#39;/modules/gateways/callback/yourgatewayname.php&amp;quot; /&amp;gt;
&amp;lt;noscript&amp;gt;
&amp;lt;div class=&amp;quot;errorbox&amp;quot;&amp;gt;&amp;lt;b&amp;gt;JavaScript is currently disabled or is not supported by your
browser.&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;Please click the continue button to proceed with the processing of your
transaction.&amp;lt;/div&amp;gt;
&amp;lt;p align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Continue &amp;gt;&amp;gt;&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/noscript&amp;gt;
&amp;lt;/form&amp;gt;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tokenised Remote Storage</title>
      <link>//developers.whmcs.com/payment-gateways/tokenised-remote-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/tokenised-remote-storage/</guid>
      <description>

&lt;p&gt;With increasing rules &amp;amp; requirements surrounding the storing of credit card details,
merchant gateways are offering services where repeat rebills can be performed without needing to store credit card details.
Gateway modules can use this functionality.&lt;/p&gt;

&lt;p&gt;The basic logic behind token gateways in WHMCS is that clients must either have a credit card number or a token stored in order for recurring billing.
Add a function named &lt;strong&gt;_storeremote&lt;/strong&gt; to the custom gateway module.
This function will override the default storage when entering new credit card details.
Instead of saving in the database, &lt;strong&gt;_storeremote&lt;/strong&gt; communicates with the gateways API, and returns a token that gets assigned to WHMCS.&lt;/p&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;A number of variables as passed into the &lt;strong&gt;_storeremote&lt;/strong&gt; function as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$params[&#39;gatewayid&#39;] # the token stored for the client
$params[&#39;cardtype&#39;] #the Card Type (Visa, MasterCard, etc…)
$params[&#39;cardnum&#39;] # the Card Number
$params[&#39;cardexp&#39;] # the Card’s Expiry Date (Format: MMYY)
$params[&#39;cardstart&#39;] # the Card’s Start Date (Format: MMYY)
$params[&#39;cardissuenum&#39;] # the Card’s Issue Number (Switch/Solo Cards)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;calling&#34;&gt;Calling&lt;/h2&gt;

&lt;p&gt;On the first call, the gatewayid will be empty.
When empty, create a new profile at the gateway.
On later calls, the created gatewayid that will be passed in and the existing profile updated.
If the cardnum variable is empty, this indicates a removal request of the stored credit card details.
Once the card details have been updated or stored remotely, return either a success or failure response to tell WHMCS if it worked.
If successful, return also the token that has been assigned:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return array(
    &amp;quot;status&amp;quot; =&amp;gt; &amp;quot;success&amp;quot;,
    &amp;quot;gatewayid&amp;quot; =&amp;gt; $results[&amp;quot;token&amp;quot;],
    &amp;quot;rawdata&amp;quot; =&amp;gt; $results,
);

return array(
    &amp;quot;status&amp;quot; =&amp;gt; &amp;quot;failed&amp;quot;,
    &amp;quot;rawdata&amp;quot; =&amp;gt; $results,
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When this function exists in a gateway module, WHMCS will only store the card type, expiry date and the last 4 digits locally in the database.
Clients and Admins will still be able to see exactly what card is stored remotely from within WHMCS.
Then within the capture function, instead of &lt;code&gt;$params[‘cardnum’]&lt;/code&gt;, &lt;code&gt;$params[‘gatewayid’]&lt;/code&gt; is received to perform the capture.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installation &amp; Activation</title>
      <link>//developers.whmcs.com/payment-gateways/installation-activation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/payment-gateways/installation-activation/</guid>
      <description>

&lt;p&gt;To install the new module, upload it to the &lt;code&gt;/modules/gateways/&lt;/code&gt; folder of your WHMCS installation.&lt;/p&gt;

&lt;p&gt;If the module includes a callback file, that should be uploaded to the &lt;code&gt;/modules/gateways/callback/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Once uploaded, navigate to &lt;strong&gt;Setup &amp;gt; Payment Gateways&lt;/strong&gt; to activate and configure the new module.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;&lt;strong&gt;Important Note&lt;/strong&gt; The process of activating a module detects the type of module that has been created. Therefore if you experience unexpected behaviours, please try deactivating and reactivating your module before continuing.&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&#34;troubleshooting-errors-during-activation&#34;&gt;Troubleshooting errors during activation&lt;/h2&gt;

&lt;p&gt;If you receive a blank page or error message within the &lt;strong&gt;Setup &amp;gt; Payment Gateways&lt;/strong&gt; page upon uploading your new payment gateway module, this indicates there could be a syntax error within the new code.&lt;/p&gt;

&lt;p&gt;To debug this, you can turn on error reporting.  To do this, navigate to &lt;strong&gt;Setup &amp;gt; General Settings &amp;gt; Other&lt;/strong&gt; and check the &lt;strong&gt;Display Errors&lt;/strong&gt; setting.&lt;/p&gt;

&lt;p&gt;This enables PHP error reporting and should show the cause of any issues. Once resolved, remember to disable Display Errors again.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>