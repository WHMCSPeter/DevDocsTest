<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced-rsses on WHMCS Developer Documentation</title>
    <link>//developers.whmcs.com/advanced/index.xml</link>
    <description>Recent content in Advanced-rsses on WHMCS Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <atom:link href="//developers.whmcs.com/advanced/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Advanced</title>
      <link>//developers.whmcs.com/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/advanced/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The following are some advanced customisation options.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;//developers.whmcs.com/advanced/creating-pages/&#34;&gt;Creating Pages&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Learn how to create additional pages within the WHMCS client area&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;//developers.whmcs.com/advanced/db-interaction/&#34;&gt;Interacting with the Database&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Learn how to interact with the WHMCS database&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;//developers.whmcs.com/advanced/date-functions/&#34;&gt;Date Functions&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Learn how to use the date helper functions in WHMCS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;//developers.whmcs.com/advanced/currency-formatting/&#34;&gt;Currency Formatting&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Learn how to use the currency formatting helper functions in WHMCS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;//developers.whmcs.com/advanced/logging/&#34;&gt;Logging&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Learn how to use the logging helper functions in WHMCS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;//developers.whmcs.com/advanced/widgets/&#34;&gt;Widgets&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Learn how to create widgets using AbstractWidget&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;//developers.whmcs.com/advanced/json-file/&#34;&gt;JSON File&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;Provide meta information for modules&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade to WHMCS 8.0</title>
      <link>//developers.whmcs.com/advanced/upgrade-to-whmcs-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/advanced/upgrade-to-whmcs-8/</guid>
      <description>

&lt;p&gt;There are several changes in WHMCS v8.0 and its dependencies that may affect third-party code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For your own code, you will need to manually verify this.&lt;/li&gt;
&lt;li&gt;For any code that comes from third-party vendors, check with the vendor to ensure it&amp;rsquo;s compatible with WHMCS v8.0.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;php-7-2-requirement&#34;&gt;PHP 7.2 requirement&lt;/h2&gt;

&lt;p&gt;WHMCS v8.0 and its dependencies require PHP 7.2. This may require the presence of the PHP 7.2 syntax in your code in order to avoid errors. We recommend that you consult [the PHP manual&amp;rsquo;s PHP 7.2 Migration Guide][&lt;a href=&#34;https://www.php.net/manual/en/migration72.php&#34;&gt;https://www.php.net/manual/en/migration72.php&lt;/a&gt;] as you evaluate and update your code for compatibility with WHMCS v8.0.&lt;/p&gt;

&lt;h2 id=&#34;removed-templates&#34;&gt;Removed templates&lt;/h2&gt;

&lt;p&gt;We have removed the &lt;em&gt;Boxes&lt;/em&gt; and &lt;em&gt;Modern&lt;/em&gt; templates. WHMCS no longer ships with them, and we do not support them.&lt;/p&gt;

&lt;p&gt;Make sure to update any custom order forms based on these to use the &lt;em&gt;Standard&lt;/em&gt; template. You can also use the &lt;em&gt;Legacy Boxes&lt;/em&gt; and &lt;em&gt;Legacy Modern&lt;/em&gt; child templates as a baseline for custom templates.&lt;/p&gt;

&lt;p&gt;Other custom templates will not be affected by this change.&lt;/p&gt;

&lt;h2 id=&#34;updates-for-dependencies&#34;&gt;Updates for dependencies&lt;/h2&gt;

&lt;p&gt;We updated several dependencies within WHMCS while preparing for this upgrade. When ensuring that your code is compatible with WHMCS v8.0, you will likely need to update dependencies as well. The list below includes a selection of our most important updates and notes on selected changes that impacted WHMCS&amp;rsquo;s code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You &lt;strong&gt;must&lt;/strong&gt; independently verify whether your code and its dependencies necessitate upgrades. The updates below are highlights of WHMCS&amp;rsquo;s changes, and are not comprehensive. Your code will have its own unique needs, but many of these items are likely to apply too.&lt;/p&gt;

&lt;h3 id=&#34;carbon&#34;&gt;Carbon&lt;/h3&gt;

&lt;p&gt;Carbon has been upgraded from version 1 to version 2. &lt;code&gt;Carbon\Carbon::parse()&lt;/code&gt; now returns false for invalid values. Previous versions of Carbon would throw an exception.&lt;/p&gt;

&lt;h3 id=&#34;guzzle&#34;&gt;Guzzle&lt;/h3&gt;

&lt;p&gt;Guzzle has been upgraded from version 5 to version 7. The major changes in this upgrade are listed below. For more information and a full list of changes, see [Guzzle&amp;rsquo;s documentation][&lt;a href=&#34;https://github.com/guzzle/guzzle/blob/master/UPGRADING.md&#34;&gt;https://github.com/guzzle/guzzle/blob/master/UPGRADING.md&lt;/a&gt;].&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;client::get()&lt;/code&gt; returns have changed, so you may need to switch to &lt;code&gt;getBody()-&amp;gt;getContents&lt;/code&gt; or cast &lt;code&gt;-&amp;gt;getBody()&lt;/code&gt; to a string.&lt;/p&gt;

&lt;p&gt;You may need to consider making these changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;base_uri&lt;/code&gt; rather than &lt;code&gt;base_url&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Store cookies in &lt;code&gt;CookieJarInterface&lt;/code&gt;, not a &lt;code&gt;key =&amp;gt; value&lt;/code&gt; array.&lt;/li&gt;
&lt;li&gt;When you instantiate the Guzzle Client class, move every option from the &lt;code&gt;defaults&lt;/code&gt; array key to the top level of options:
```
         $client = new Client([&lt;/li&gt;
&lt;li&gt;&amp;lsquo;defaults&amp;rsquo; =&amp;gt; [&lt;/li&gt;
&lt;li&gt;&amp;lsquo;verify&amp;rsquo; =&amp;gt; true,&lt;/li&gt;
&lt;li&gt;&amp;lsquo;exceptions&amp;rsquo; =&amp;gt; true,&lt;/li&gt;
&lt;li&gt;&amp;lsquo;timeout&amp;rsquo; =&amp;gt; 10,&lt;/li&gt;
&lt;li&gt;]&lt;/li&gt;
&lt;li&gt;&amp;lsquo;verify&amp;rsquo; =&amp;gt; true,&lt;/li&gt;
&lt;li&gt;&amp;lsquo;http_errors&amp;rsquo; =&amp;gt; true,&lt;/li&gt;
&lt;li&gt;&amp;lsquo;timeout&amp;rsquo; =&amp;gt; 10,
         ]);
```&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some items have been removed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CompleteEvent&lt;/code&gt; is no longer defined.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StreamHandler&lt;/code&gt; is no longer defined.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GuzzleHttp\Message\ResponseInterface&lt;/code&gt; is no longer defined. We recommend that you replace it with &lt;code&gt;Psr\Http\Message\ResponseInterface&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;laravel&#34;&gt;Laravel&lt;/h3&gt;

&lt;p&gt;Capsule &lt;code&gt;pluck()&lt;/code&gt; and &lt;code&gt;get()&lt;/code&gt; now return a Collection rather than an array. If you&amp;rsquo;d like to minimize changes to your codebase, call &lt;code&gt;-&amp;gt;all()&lt;/code&gt; on it when you feed results into &lt;code&gt;in_array()&lt;/code&gt; and similar methods. Do not call &lt;code&gt;toArray()&lt;/code&gt; instead without changing consuming code. &lt;code&gt;toArray()&lt;/code&gt; will convert all collection items into arrays as well (which Capsule did not do previously).&lt;/p&gt;

&lt;p&gt;Some items are removed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Builder::lists()&lt;/code&gt; is removed. In most cases, we replaced this with &lt;code&gt;pluck()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;String helpers no longer exist, and you must replace them. For example, replace &lt;code&gt;snake_case()&lt;/code&gt; with &lt;code&gt;Str::of(&#39;&amp;lt;string&amp;gt;&#39;)-&amp;gt;snake()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These changes are particularly important if you use Eloquent.&lt;/p&gt;

&lt;h3 id=&#34;smarty&#34;&gt;Smarty&lt;/h3&gt;

&lt;p&gt;We upgraded &lt;code&gt;smarty/smarty&lt;/code&gt; from version 3.1.33 to 3.1.36. Additionally, there are changes in the use of Smarty&amp;rsquo;s Security Policy parameters. For more information, see [Smarty Security Policy][&lt;a href=&#34;https://docs.whmcs.com/Smarty_Security_Policy&#34;&gt;https://docs.whmcs.com/Smarty_Security_Policy&lt;/a&gt;].&lt;/p&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;p&gt;We added and updated the following additional dependencies for Composer:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Dependency&lt;/th&gt;
&lt;th&gt;From version&lt;/th&gt;
&lt;th&gt;To version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abraham/twitteroauth&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0.7.4&lt;/td&gt;
&lt;td&gt;1.1.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bitpay/sdk-light&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.2.2002&lt;/td&gt;
&lt;td&gt;2.0.2007&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;brick/math&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;0.8.15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;composer/composer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.10.5&lt;/td&gt;
&lt;td&gt;1.10.6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ezyang/htmlpurifier&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.9.2&lt;/td&gt;
&lt;td&gt;4.12.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;filp/whoops&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.1.8&lt;/td&gt;
&lt;td&gt;2.7.2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;firebase/php-jwt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.0.0&lt;/td&gt;
&lt;td&gt;5.2.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;google/apiclient&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;v2.1.3&lt;/td&gt;
&lt;td&gt;2.7.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;google/auth&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0.11.1&lt;/td&gt;
&lt;td&gt;1.11.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;guzzlehttp/guzzle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;6.5.3&lt;/td&gt;
&lt;td&gt;7.0.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;illuminate/console&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7.9.2&lt;/td&gt;
&lt;td&gt;7.12.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;illuminate/container&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7.9.2&lt;/td&gt;
&lt;td&gt;7.12.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;illuminate/contracts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7.9.2&lt;/td&gt;
&lt;td&gt;7.12.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;illuminate/database&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7.9.2&lt;/td&gt;
&lt;td&gt;7.12.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;illuminate/events&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7.9.2&lt;/td&gt;
&lt;td&gt;7.12.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;illuminate/support&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7.9.2&lt;/td&gt;
&lt;td&gt;7.12.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;illuminate/validation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;7.9.2&lt;/td&gt;
&lt;td&gt;7.12.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;knplabs/knp-menu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.1.1&lt;/td&gt;
&lt;td&gt;3.1.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;laminas/laminas-diactoros&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;2.3.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;laminas/laminas-httphandlerrunner&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;1.2.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;league/climate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.2.1&lt;/td&gt;
&lt;td&gt;3.5.2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;league/flysystem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.0.45&lt;/td&gt;
&lt;td&gt;1.0.67&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;league/oauth2-client&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.4.1&lt;/td&gt;
&lt;td&gt;2.5.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;league/oauth2-google&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.5.0&lt;/td&gt;
&lt;td&gt;3.0.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;monolog/monolog&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.18.2&lt;/td&gt;
&lt;td&gt;2.0.2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nikic/fast-route&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.2.0&lt;/td&gt;
&lt;td&gt;1.3.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;php-imap/php-imap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.0.9&lt;/td&gt;
&lt;td&gt;3.1.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;phpmyadmin/sql-parser&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4.2.4&lt;/td&gt;
&lt;td&gt;5.3.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;phpmyadmin/phpmailer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;6.0.7&lt;/td&gt;
&lt;td&gt;6.1.5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;phpseclib/mcrypt_compat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.0.5&lt;/td&gt;
&lt;td&gt;1.0.11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;phpseclib/phpseclib&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.0.10&lt;/td&gt;
&lt;td&gt;2.0.27&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;psr/http-factory&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;1.0.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;punic/punic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.6.3&lt;/td&gt;
&lt;td&gt;3.5.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ramsey/collection&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;1.0.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ramsey/uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.4.1&lt;/td&gt;
&lt;td&gt;4.0.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;react/promise&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.5.1&lt;/td&gt;
&lt;td&gt;2.8.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ramsey/uuid&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.4.1&lt;/td&gt;
&lt;td&gt;4.0.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;seld/jsonlint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.6.1&lt;/td&gt;
&lt;td&gt;1.8.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;seld/phar-utils&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.0.1&lt;/td&gt;
&lt;td&gt;1.1.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stripe/stripe-php&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;6.43.1&lt;/td&gt;
&lt;td&gt;7.34.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symfony/polyfill-ctype&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;1.17.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symfony/polyfill-iconv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.15.0&lt;/td&gt;
&lt;td&gt;1.17.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symfony/polyfill-intl-idn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;1.17.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symfony/polyfill-mbstring&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.14.0&lt;/td&gt;
&lt;td&gt;1.17.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symfony/polyfill-php72&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;1.17.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;symfony/polyfill-php73&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;1.17.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tecnickcom/tcpdf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;6.2.26&lt;/td&gt;
&lt;td&gt;6.3.5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;zbateson/stream-decorators&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;1.0.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;zendframework/zend-diactoros&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.3.10&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Creating Pages</title>
      <link>//developers.whmcs.com/advanced/creating-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/advanced/creating-pages/</guid>
      <description>&lt;p&gt;Creating your own client area pages should ordinarily be done by creating an Addon Module with client area output.&lt;/p&gt;

&lt;p&gt;However, if you wish to, you can create a standalone page using the following template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\ClientArea;
use WHMCS\Database\Capsule;

define(&#39;CLIENTAREA&#39;, true);

require __DIR__ . &#39;/init.php&#39;;

$ca = new ClientArea();

$ca-&amp;gt;setPageTitle(&#39;Your Page Title Goes Here&#39;);

$ca-&amp;gt;addToBreadCrumb(&#39;index.php&#39;, Lang::trans(&#39;globalsystemname&#39;));
$ca-&amp;gt;addToBreadCrumb(&#39;mypage.php&#39;, &#39;Your Custom Page Name&#39;);

$ca-&amp;gt;initPage();

//$ca-&amp;gt;requireLogin(); // Uncomment this line to require a login to access this page

// To assign variables to the template system use the following syntax.
// These can then be referenced using {$variablename} in the template.

//$ca-&amp;gt;assign(&#39;variablename&#39;, $value);

// Check login status
if ($ca-&amp;gt;isLoggedIn()) {

    /**
     * User is logged in - put any code you like here
     *
     * Here&#39;s an example to get the currently logged in clients first name
     */

    $clientName = Capsule::table(&#39;tblclients&#39;)
        -&amp;gt;where(&#39;id&#39;, &#39;=&#39;, $ca-&amp;gt;getUserID())-&amp;gt;pluck(&#39;firstname&#39;);
        // &#39;pluck&#39; was renamed within WHMCS 7.0.  Replace it with &#39;value&#39; instead.
        // -&amp;gt;where(&#39;id&#39;, &#39;=&#39;, $ca-&amp;gt;getUserID())-&amp;gt;value(&#39;firstname&#39;);
    $ca-&amp;gt;assign(&#39;clientname&#39;, $clientName);

} else {

    // User is not logged in
    $ca-&amp;gt;assign(&#39;clientname&#39;, &#39;Random User&#39;);

}

/**
 * Set a context for sidebars
 *
 * @link http://docs.whmcs.com/Editing_Client_Area_Menus#Context
 */
Menu::addContext();

/**
 * Setup the primary and secondary sidebars
 *
 * @link http://docs.whmcs.com/Editing_Client_Area_Menus#Context
 */
Menu::primarySidebar(&#39;announcementList&#39;);
Menu::secondarySidebar(&#39;announcementList&#39;);

# Define the template filename to be used without the .tpl extension

$ca-&amp;gt;setTemplate(&#39;mypage&#39;);

$ca-&amp;gt;output();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example demonstrates the attributes for a page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to initiate the page&lt;/li&gt;
&lt;li&gt;How to reference the language file variables (Lang::trans)&lt;/li&gt;
&lt;li&gt;How to check if a user is logged in ($ca-&amp;gt;isLoggedIn())&lt;/li&gt;
&lt;li&gt;How to define template variables ($ca-&amp;gt;assign)&lt;/li&gt;
&lt;li&gt;How to set the template to use and then output it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The template file should be a filename in the active WHMCS system template folder. So, for the example above the path would be &lt;code&gt;/templates/default/mypage.tpl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now when ready to test, upload the PHP file to the root WHMCS directory and the template file to your active template directory. Then visit the PHP file in your browser to try it.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;Custom pages created in this way should always be located in the root WHMCS directory. Attempting to use this code outside of the root directory is unsupported.&lt;/p&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Interacting with the Database</title>
      <link>//developers.whmcs.com/advanced/db-interaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/advanced/db-interaction/</guid>
      <description>

&lt;p&gt;WHMCS 6.0 and later leverages a database connection library to ensure compatibility with modern PHP environments and best practices. It is based on the Laravel framework&amp;rsquo;s database component. This library includes a Database Abstraction Layer (DBAL) called &amp;ldquo;Capsule&amp;rdquo; and an Object Relational Mapping (ORM) library called &amp;ldquo;Eloquent&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The Capsule DBAL component introduces two libraries to WHMCS, a query manager for running database queries and a schema manager for an abstracted API to table management. Capsule&amp;rsquo;s underlying PDO connection is also available for advanced database usage. Capsule has three static methods to get to these components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Capsule::table(string $tableName)&lt;/code&gt;: Access the query manager for the given table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Capsule::schema()&lt;/code&gt;: Access the schema manager for the WHMCS database.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Capsule::connection()&lt;/code&gt;: Access the connection manager to interact with the underlying database connection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;deprecated-functionality&#34;&gt;Deprecated functionality&lt;/h2&gt;

&lt;p&gt;The previously used SQL Helper Functions are still present in WHMCS but are now deprecated and may be removed in a later version of the product:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;select_query()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update_query()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;insert_query()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;full_query()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We encourage all third party developers to use the Capsule DBAL and PDO connection for all new database interaction.&lt;/p&gt;

&lt;h2 id=&#34;using-capsule&#34;&gt;Using Capsule&lt;/h2&gt;

&lt;p&gt;Declare an alias to Laravel&amp;rsquo;s database manager in your project file&amp;rsquo;s use block to access Capsule:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\Database\Capsule;

// Run queries or modify tables as you like.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-query-manager&#34;&gt;The Query Manager&lt;/h2&gt;

&lt;p&gt;Please see &lt;a href=&#34;https://laravel.com/docs/5.2/queries&#34;&gt;Laravel&amp;rsquo;s query documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Capsule::table(string $tableName)&lt;/code&gt; method provides access to the query manager. Declare it with the name of the table you wish to query as it&amp;rsquo;s first parameter to interact with that table. The query manager has a wide range of functionality to perform advanced select, join, insert, update, and delete statements. Capsule&amp;rsquo;s select calls return rows as stdClass objects.&lt;/p&gt;

&lt;p&gt;Capsule escapes all input, so it is not necessary to add escaping slashes to variables passed to these methods.&lt;/p&gt;

&lt;p&gt;All of Capsule&amp;rsquo;s methods throw an exception on failure. Please place Capusle calls in try/catch blocks for graceful error handling and to avoid potential fatal errors in your hook, module, or other customization.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\Database\Capsule;

// Print all client first names using a simple select.

/** @var stdClass $client */
foreach (Capsule::table(&#39;tblclients&#39;)-&amp;gt;get() as $client) {
    echo $client-&amp;gt;firstname . PHP_EOL;
}

// Rename all clients named &amp;quot;John Deo&amp;quot; to &amp;quot;John Doe&amp;quot; using an update statement.
try {
    $updatedUserCount = Capsule::table(&#39;tblclients&#39;)
        -&amp;gt;where(&#39;firstname&#39;, &#39;John&#39;)
        -&amp;gt;where(&#39;lastname&#39;, &#39;Deo&#39;)
        -&amp;gt;update(
            [
                &#39;lastname&#39; =&amp;gt; &#39;Doe&#39;,
            ]
        );

    echo &amp;quot;Fixed {$updatedUserCount} misspelled last names.&amp;quot;;
} catch (\Exception $e) {
    echo &amp;quot;I couldn&#39;t update client names. {$e-&amp;gt;getMessage()}&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-schema-manager&#34;&gt;The Schema Manager&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;Capsule::schema()&lt;/code&gt; method to access the schema manager to modify table schema if necessary. The schema manager has support for creating, dropping and truncating tables and for modifying columns, indexes, and keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; WHMCS does not recommend changing default table schema as that can affect product functionality.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\Database\Capsule;

// Create a new table.
try {
    Capsule::schema()-&amp;gt;create(
        &#39;my_table&#39;,
        function ($table) {
            /** @var \Illuminate\Database\Schema\Blueprint $table */
            $table-&amp;gt;increments(&#39;id&#39;);
            $table-&amp;gt;string(&#39;name&#39;);
            $table-&amp;gt;integer(&#39;serial_number&#39;);
            $table-&amp;gt;boolean(&#39;is_required&#39;);
            $table-&amp;gt;timestamps();
        }
    );
} catch (\Exception $e) {
    echo &amp;quot;Unable to create my_table: {$e-&amp;gt;getMessage()}&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-connection-manager&#34;&gt;The Connection Manager&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;Capsule::connection()&lt;/code&gt; method provides low-level access to the database connection itself. Use it to initiate transactions with automatic commit and rollback or to access the underlying PDO connection to perform manual database queries outside the DBAL. The connection manager also has methods to retrieve query and schema managers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\Database\Capsule;

// Perform potentially risky queries in a transaction for easy rollback.
try {
    Capsule::connection()-&amp;gt;transaction(
        function ($connectionManager)
        {
            /** @var \Illuminate\Database\Connection $connectionManager */
            $connectionManager-&amp;gt;table(&#39;my_table&#39;)-&amp;gt;insert(
                [
                    &#39;name&#39; =&amp;gt; $_POST[&#39;name&#39;],
                    &#39;serial_number&#39; =&amp;gt; $_POST[&#39;serialNumber&#39;],
                    &#39;is_required&#39; =&amp;gt; (int)(bool) $_POST[&#39;isRequired&#39;],
                ]
            );
        }
    );
} catch (\Exception $e) {
    echo &amp;quot;Uh oh! Inserting didn&#39;t work, but I was able to rollback. {$e-&amp;gt;getMessage()}&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-to-pdo&#34;&gt;Getting to PDO&lt;/h2&gt;

&lt;p&gt;Use the connection manager&amp;rsquo;s getPdo() method to retrieve the underlying PDO connection instance. Use the PDO connection to perform manual queries and advanced database usage.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\Database\Capsule;

// Perform potentially risky queries in a transaction for easy rollback.
$pdo = Capsule::connection()-&amp;gt;getPdo();
$pdo-&amp;gt;beginTransaction();

try {
    $statement = $pdo-&amp;gt;prepare(
        &#39;insert into my_table (name, serial_number, is_required) values (:name, :serialNumber, :isRequired)&#39;
    );

    $statement-&amp;gt;execute(
        [
            &#39;:name&#39; =&amp;gt; $_POST[&#39;name&#39;],
            &#39;:serialNumber&#39; =&amp;gt; $_POST[&#39;serialNumber&#39;],
            &#39;:isRequired&#39; =&amp;gt; (bool) $_POST[&#39;isRequired&#39;],
        ]
    );

    $pdo-&amp;gt;commit();
} catch (\Exception $e) {
    echo &amp;quot;Uh oh! {$e-&amp;gt;getMessage()}&amp;quot;;
    $pdo-&amp;gt;rollBack();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;h3 id=&#34;exceptions&#34;&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;All Capsule methods throw an exception on failure. Catch these exceptions and analyze their messages and stack traces to help determine the nature of the failure. WHMCS recommends placing all database interactivity in try/catch blocks for graceful error handling.&lt;/p&gt;

&lt;h3 id=&#34;the-capsule-query-log&#34;&gt;The Capsule Query Log&lt;/h3&gt;

&lt;p&gt;The connection manager&amp;rsquo;s getQueryLog() method returns an array of all queries made during the life of the page request. Queries are stored in the log as an array containing the query run, the parameter bindings passed to the query, and the time it took for the query to execute, measured in milliseconds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

use WHMCS\Database\Capsule;

// Loop through each Capsule query made during the page request.
foreach (Capsule::connection()-&amp;gt;getQueryLog() as $query) {
    echo &amp;quot;Query: {$query[&#39;query&#39;]}&amp;quot; . PHP_EOL;
    echo &amp;quot;Execution Time: {$query[&#39;time&#39;]}ms&amp;quot; . PHP_EOL;
    echo &amp;quot;Parameters: &amp;quot; . PHP_EOL;

    foreach ($query[&#39;bindings&#39;] as $key =&amp;gt; $value) {
        echo &amp;quot;{$key} =&amp;gt; {$value}&amp;quot; . PHP_EOL;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-whmcs-activity-log&#34;&gt;The WHMCS Activity Log&lt;/h3&gt;

&lt;p&gt;All uncaught PDO-based query failures, including those made by Capsule and manual PDO queries, are written to to the WHMCS activity log. View the system activity log to view the details of these failed queries.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Date Functions</title>
      <link>//developers.whmcs.com/advanced/date-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/advanced/date-functions/</guid>
      <description>

&lt;p&gt;The following date helper functions are made available to make it easier to work with dates in WHMCS.&lt;/p&gt;

&lt;h2 id=&#34;todays-date&#34;&gt;Todays Date&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Returns todays date
 *
 * By default returns the format defined in General Settings &amp;gt; Localisation &amp;gt; Date Format
 *
 * @param bool $applyClientDateFormat Set true to apply Localisation &amp;gt; Client Date Format
 *
 * @return string
 */
$todaysdate = getTodaysDate($applyClientDateFormat);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;from-mysql-date&#34;&gt;From MySQL Date&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Formats a MySQL Date/Timestamp value to system settings
 *
 * @param string $datetimestamp The MySQL Date/Timestamp value
 * @param bool $includeTime Pass true to include the time in the result
 * @param bool $applyClientDateFormat Set true to apply Localisation &amp;gt; Client Date Format
 *
 * @return string
 */
$date = fromMySQLDate($date, $includeTime, $applyClientDateFormat);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;to-mysql-date&#34;&gt;To MySQL Date&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Converts a date entered in the system setting format to a MySQL Date/Timestamp
 *
 * @param string $userInputDate
 *
 * @return string Format: 2016-12-30 23:59:59
 */
$date = toMySQLDate($date);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Currency Formatting</title>
      <link>//developers.whmcs.com/advanced/currency-formatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/advanced/currency-formatting/</guid>
      <description>

&lt;p&gt;The following helper functions are provided for formatting currency values.&lt;/p&gt;

&lt;h2 id=&#34;get-clients-currency&#34;&gt;Get Clients Currency&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Get clients currency
 *
 * Required before making a call to formatCurrency
 *
 * @param int $userId
 *
 * @return array
 */
$currencyData = getCurrency($userId);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;format-currency&#34;&gt;Format Currency&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Format currency
 *
 * @param float $amount
 * @param int   $currencyId
 *
 * @return \WHMCS\View\Formatter\Price
 */
$price = formatCurrency($amount, $currencyData[&#39;id&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;$price&lt;/code&gt; value returned will be an object. The default &lt;code&gt;__toString&lt;/code&gt; response format is a fully formatted price output including prefix and suffix.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&#34;https://docs.whmcs.com/classes/7.1/WHMCS/View/Formatter/Price.html&#34;&gt;https://docs.whmcs.com/classes/7.1/WHMCS/View/Formatter/Price.html&lt;/a&gt; for more information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>//developers.whmcs.com/advanced/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/advanced/logging/</guid>
      <description>

&lt;p&gt;The following logging helper methods are made available in WHMCS.&lt;/p&gt;

&lt;h2 id=&#34;log-activity&#34;&gt;Log Activity&lt;/h2&gt;

&lt;p&gt;A helper method is available for adding entries to the activity log.&lt;/p&gt;

&lt;p&gt;This function is available to all hooks, modules and template files throughout the WHMCS system.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Log activity.
 *
 * @param string $message The message to log
 * @param int $userId An optional user id to which the log entry relates
 */
logActivity(&#39;Message goes here&#39;, 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;log-module-call&#34;&gt;Log Module Call&lt;/h2&gt;

&lt;p&gt;We recommend making use of the module log to record all external API calls and requests.&lt;/p&gt;

&lt;p&gt;This makes debugging the external API calls your modules make easier and consistent with other modules.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Log module call.
 *
 * @param string $module The name of the module
 * @param string $action The name of the action being performed
 * @param string|array $requestString The input parameters for the API call
 * @param string|array $responseData The response data from the API call
 * @param string|array $processedData The resulting data after any post processing (eg. json decode, xml decode, etc...)
 * @param array $replaceVars An array of strings for replacement
 */
logModuleCall($module, $action, $requestString, $responseData, $processedData, $replaceVars);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We recommend passing data strings such as usernames and passwords into the &lt;code&gt;$replaceVars&lt;/code&gt; parameter to allow them to be automatically scrubbed and ommitted from module log entries.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Widgets</title>
      <link>//developers.whmcs.com/advanced/widgets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/advanced/widgets/</guid>
      <description>

&lt;p&gt;Widgets are the building blocks of the WHMCS Admin Dashboard.&lt;/p&gt;

&lt;p&gt;Widgets are pluggable and can be created as part of a custom module.&lt;/p&gt;

&lt;p&gt;Widgets that ship with WHMCS by default can be found in the &lt;code&gt;/modules/widgets/&lt;/code&gt; directory. They are shipped unencoded to allow for expansion and customisation.&lt;/p&gt;

&lt;h2 id=&#34;widget-sample&#34;&gt;Widget Sample&lt;/h2&gt;

&lt;p&gt;The following code sample demonstrates how to create a custom widget using a hook file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php

/**
 * Standard add_hook call @see https://developers.whmcs.com/hooks/getting-started/
 */
add_hook(&#39;AdminHomeWidgets&#39;, 1, function() {
    /**
     * Return a new instance of the widget object for display
     */
    return new SampleWidget();
});

/**
 * Sample Widget example
 */
class SampleWidget extends \WHMCS\Module\AbstractWidget
{
    /**
     * @type string The title of the widget
     */
    protected $title = &#39;Hello World&#39;;

    /**
     * @type string A description/purpose of the widget
     */
    protected $description = &#39;&#39;;

    /**
     * @type int The sort weighting that determines the output position on the page
     */
    protected $weight = 150;

    /**
     * @type int The number of columns the widget should span (1, 2 or 3)
     */
    protected $columns = 1;

    /**
     * @type bool Set true to enable data caching
     */
    protected $cache = false;

    /**
     * @type int The length of time to cache data for (in seconds)
     */
    protected $cacheExpiry = 120;

    /**
     * @type string The access control permission required to view this widget. Leave blank for no permission.
     * @see Permissions section below.
     */
    protected $requiredPermission = &#39;&#39;;

    /**
     * Get Data.
     *
     * Obtain data required to render the widget.
     *
     * We recommend executing queries and API calls within this function to enable
     * you to take advantage of the built-in caching functionality for improved performance.
     *
     * When caching is enabled, this method will be called when the cache is due for
     * a refresh or when the user invokes it.
     *
     * @return array
     */
    public function getData()
    {
        $clients = localAPI(&#39;getclients&#39;, []);

        return array(
            &#39;welcome&#39; =&amp;gt; &#39;Hello World!&#39;,
            &#39;clients&#39; =&amp;gt; $clients[&#39;clients&#39;],
        );
    }

    /**
     * Generate Output.
     *
     * Generate and return the body output for the widget.
     *
     * @param array $data The data returned by the getData method.
     *
     * @return string
     */
    public function generateOutput($data)
    {
        $clientOutput = [];
        foreach ($data[&#39;clients&#39;][&#39;client&#39;] as $client) {
            $clientOutput[] = &amp;quot;&amp;lt;a href=\&amp;quot;clientsprofile.php?id={$client[&#39;id&#39;]}\&amp;quot;&amp;gt;{$client[&#39;firstname&#39;]} {$client[&#39;lastname&#39;]}&amp;lt;/a&amp;gt;&amp;quot;;
        }

        if (count($clientOutput) == 0) {
            $clientOutput[] = &#39;No Clients Found&#39;;
        }

        $clientOutput = implode(&#39;&amp;lt;br&amp;gt;&#39;, $clientOutput);

        return &amp;lt;&amp;lt;&amp;lt;EOF
&amp;lt;div class=&amp;quot;widget-content-padded&amp;quot;&amp;gt;
    &amp;lt;div&amp;gt;{$data[&#39;welcome&#39;]}&amp;lt;/div&amp;gt;
    &amp;lt;div id=&amp;quot;sampleWidgetClientOutput&amp;quot;&amp;gt;{$clientOutput}&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
EOF;
    }
}


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;widget-sample-output&#34;&gt;Widget Sample Output&lt;/h3&gt;

&lt;p&gt;Using the sample code, the widget will output will look something like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../sample-widget-output.png&#34; alt=&#34;Widget Output Sample&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;permissions&#34;&gt;Permissions&lt;/h2&gt;

&lt;p&gt;Widgets use the administrator role access control permissions system.&lt;/p&gt;

&lt;p&gt;The permission you define for a widget must match one of the access control permissions defined in WHMCS.&lt;/p&gt;

&lt;p&gt;The most commonly used permissions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List Clients&lt;/li&gt;
&lt;li&gt;View Clients Summary&lt;/li&gt;
&lt;li&gt;Perform Server Operations&lt;/li&gt;
&lt;li&gt;Perform Registrar Operations&lt;/li&gt;
&lt;li&gt;Add New Order&lt;/li&gt;
&lt;li&gt;Create Invoice&lt;/li&gt;
&lt;li&gt;List Support Tickets&lt;/li&gt;
&lt;li&gt;Configure General Settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a full list of permissions, see \WHMCS\User\Admin\Permission::all();&lt;/p&gt;

&lt;h2 id=&#34;abstractwidget&#34;&gt;AbstractWidget&lt;/h2&gt;

&lt;p&gt;More information on the AbstractWidget class used in the sample can be found at &lt;a href=&#34;http://docs.whmcs.com/classes/7.1/WHMCS/Module/AbstractWidget.html&#34;&gt;http://docs.whmcs.com/classes/7.1/WHMCS/Module/AbstractWidget.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Admin Area</title>
      <link>//developers.whmcs.com/advanced/admin-area/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/advanced/admin-area/</guid>
      <description>

&lt;p&gt;The admin area of WHMCS can be customised through the use of themes and hooks.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The default template that ships with WHMCS is called the Blend theme.&lt;/p&gt;

&lt;p&gt;If you wish to make changes, we recommend first creating a copy of the theme with a custom name. This ensures your customisations can be preserved when applying future updates.&lt;/p&gt;

&lt;p&gt;Make a copy of the Blend theme directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy the &lt;code&gt;~/admin/templates/blend/&lt;/code&gt; directory to &lt;code&gt;~/admin/templates/yourname/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the admin directory name has been customised, adjust the path accordingly.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;Theme names should be a single word, consisting of only lowercase letters and numbers.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;Now it’s time to customise your theme.&lt;/p&gt;

&lt;h2 id=&#34;customising&#34;&gt;Customising&lt;/h2&gt;

&lt;p&gt;The header and footer template files that are common to every page and act as a wrapper around the primary body content are a good place to start for this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We strongly recommend you maintain all of the output variables present in the default template files in your custom header/footer as this will help ensure compatibility with addons and extensions you later install&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The footer template file includes a number of lines of code which are essential to the correct operation of the admin area, particularly the client limit notifications. admin user notes, and the intelligent search option on each page. Please take care not to remove these lines.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;logo&#34;&gt;Logo&lt;/h3&gt;

&lt;p&gt;In order to make changes to the logo displayed on the top left corner of admin area pages, replace the &lt;code&gt;logo.gif&lt;/code&gt; file in the &lt;code&gt;~/admin/templates/yourname/images&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&#34;css-styling&#34;&gt;CSS Styling&lt;/h2&gt;

&lt;p&gt;In order to make changes to any of the CSS that is applied by default, please create a custom CSS file in your theme and load it using the header template file.&lt;/p&gt;

&lt;h2 id=&#34;templates&#34;&gt;Templates&lt;/h2&gt;

&lt;p&gt;All admin themes contain the following template files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;authconfirm.tpl - This template file is used to display the Password Confirmation prompt on any admin area page that requires it. For example: &lt;em&gt;Setup &amp;gt; General Settings&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;clientssummary.tpl - Controls the display of the Summary Tab and associated information within an individual Clients Profile.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;footer.tpl - This template file controls the footer of each admin area page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;header.tpl - This template file controls the header of each admin area page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;homepage.tpl - Controls the display of the Admin Dashboard. Widgets are the building blocks of the admin dashboard and are the recommended way to add additional data and information. We have documentation on creating and working with widgets available at &lt;a href=&#34;https://developers.whmcs.com/advanced/widgets/&#34;&gt;Widgets&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;menu.tpl - Controls the primary navigation dropdown menu bar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;sidebar.tpl - This template file controls the left sidebar menu of each admin area page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;systemhealthandupdates.tpl - Controls the display and styling of the System Health Status page.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;viewticket.tpl - Controls the display of the view for an individual support ticket when viewed within the admin area.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;viewticketcustomfields.tpl - Controls the display of custom fields and their data when viewing an individual support ticket within the admin area.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;When you are ready with your new template and wish to test it, follow the steps below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Login to the Admin Area&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Navigate to &lt;em&gt;My Account&lt;/em&gt; using the menu located at the top of any page&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Under the Template setting, select the name of the template you created above&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Hit &lt;em&gt;Save Changes&lt;/em&gt; and you will immediately begin seeing your new template&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;making-your-template-live&#34;&gt;Making your template live&lt;/h2&gt;

&lt;p&gt;To apply the change to other admin users, please navigate to &lt;em&gt;Setup &amp;gt; Staff Management &amp;gt; Administrators&lt;/em&gt; and edit the Template setting for the applicable admin users.&lt;/p&gt;

&lt;h2 id=&#34;further-customisation-via-hooks&#34;&gt;Further Customisation via Hooks&lt;/h2&gt;

&lt;p&gt;There are a number of hook points that can be used to introduce customisations. For a full list and the latest documentation, please visit our &lt;a href=&#34;https://developers.whmcs.com/hooks-reference/admin-area/&#34;&gt;Admin Area Hook Reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some example hook use cases are provided below.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;If you wish to output custom javascript, we recommend using the AdminAreaFooterOutput hook point for best performance.&lt;/p&gt;
&lt;/div&gt;


&lt;h3 id=&#34;adding-a-link-to-the-actions-section-of-the-client-summary-page&#34;&gt;Adding a link to the Actions section of the Client Summary page&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/**
 * Provide a link to an addon module from the client summary page.
 */

if (!defined(&#39;WHMCS&#39;)) {
    die(&#39;This hook should not be run directly&#39;);
}

add_hook(&#39;AdminAreaClientSummaryActionLinks&#39;, 1, function ($vars) {
    $userid = $vars[&#39;userid&#39;];

    $url = addonmodules.php?module=addon_module&amp;amp;userid=&#39; . $userid;

    return [
        &#39;&amp;lt;a href=&amp;quot;&#39; . $url . &#39;&amp;quot;&amp;gt;My custom addon link&amp;lt;/a&amp;gt;&#39;,
    ];
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-a-link-to-view-ticket-page-within-the-admin-area&#34;&gt;Adding a link to View Ticket page within the admin area&lt;/h3&gt;

&lt;p&gt;Displays a banner on the View Ticket page within the admin area that can be used to provide additional information. In this example, it includes the unique URL needed to view the current ticket within the client area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/**
 * Display a banner on the admin area view ticket page.
 */

use WHMCS\Config\Setting;

if (!defined(&#39;WHMCS&#39;)) {
    die(&#39;This hook should not be run directly&#39;);
}

add_hook(&#39;AdminAreaViewTicketPage&#39;, 1, function ($vars) {
    $systemUrl = Setting::getValue(&#39;SystemURL&#39;);

    $ticketData = localAPI(&#39;GetTicket&#39;, array(
        &#39;ticketid&#39; =&amp;gt; $vars[&#39;ticketid&#39;]
    ));

    $clientTicketUrl = $systemUrl . &#39;/viewticket.php?tid=&#39;
        . $ticketData[&#39;tid&#39;] . &#39;&amp;amp;c=&#39; . $ticketData[&#39;c&#39;];

    return &amp;lt;&amp;lt;&amp;lt;EOT
&amp;lt;script&amp;gt;
$(document).ready(function() {
    $(&#39;&amp;lt;div class=&amp;quot;alert alert-info text-center&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;&#39; . $clientTicketUrl . &#39;&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&#39; . $clientTicketUrl . &#39;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&#39;).prependTo(&#39;#contentarea&#39;);
});
&amp;lt;/script&amp;gt;
EOT;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;manipulating-the-dom-to-change-product-behaviour&#34;&gt;Manipulating the dom to change product behaviour&lt;/h3&gt;

&lt;p&gt;The below example demonstrates how you can use hooks and javascript to modify the behaviour of the admin area. In this specific example, we demonstrate how to disable the send welcome email option by default when creating a new client via the admin area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/**
 * Disable the send welcome email checkbox by default when creating a new client.
 */

if (!defined(&#39;WHMCS&#39;)) {
    die(&#39;This hook should not be run directly&#39;);
}

add_hook(&#39;AdminAreaFooterOutput&#39;, 1, function ($vars) {
    if (strpos($_SERVER[&#39;REQUEST_URI&#39;], &#39;clientsadd.php&#39;) !== false) {
        return &#39;&amp;lt;script&amp;gt;
        $(document).ready(function() {
            $(&amp;quot;input[name=sendemail]&amp;quot;).attr(&amp;quot;checked&amp;quot;, false);
        });
    &amp;lt;/script&amp;gt;&#39;;
    }
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JSON File</title>
      <link>//developers.whmcs.com/advanced/json-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/advanced/json-file/</guid>
      <description>&lt;p&gt;When developing modules for WHMCS, you can place a &lt;code&gt;whmcs.json&lt;/code&gt; file in the module&amp;rsquo;s root directory to provide additional meta information that WHMCS will use in display of the &lt;strong&gt;Apps &amp;amp; Integrations&lt;/strong&gt; pages.&lt;/p&gt;

&lt;p&gt;A sample &lt;code&gt;whmcs.json&lt;/code&gt; is provided below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;schema&amp;quot;: &amp;quot;1.0&amp;quot;,
  &amp;quot;type&amp;quot;: &amp;quot;whmcs-notifications&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;email&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;proprietary&amp;quot;,
  &amp;quot;category&amp;quot;: &amp;quot;notifications&amp;quot;,
  &amp;quot;description&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Email&amp;quot;,
    &amp;quot;tagline&amp;quot;: &amp;quot;Configure rule based notifications delivered by email.&amp;quot;,
    &amp;quot;long&amp;quot;: &amp;quot;Setup advanced rule based notifications for events and triggers that matter to you and receive those notifications to one or more email addresses.&amp;quot;,
    &amp;quot;features&amp;quot;: [
      &amp;quot;Setup rule based events and triggers&amp;quot;,
      &amp;quot;Receive notifications by email&amp;quot;
    ]
  },
  &amp;quot;logo&amp;quot;: {
    &amp;quot;filename&amp;quot;: &amp;quot;logo.png&amp;quot;
  },
  &amp;quot;support&amp;quot;: {
    &amp;quot;homepage&amp;quot;: &amp;quot;https:\/\/www.whmcs.com\/&amp;quot;, 
    &amp;quot;learn_more&amp;quot;: &amp;quot;https:\/\/www.whmcs.com\/tour&amp;quot;, 
    &amp;quot;email&amp;quot;: &amp;quot;support@whmcs.com&amp;quot;, 
    &amp;quot;support_url&amp;quot;: &amp;quot;https:\/\/support.whmcs.com\/&amp;quot;,
    &amp;quot;docs_url&amp;quot;: &amp;quot;https:\/\/docs.whmcs.com\/Notifications&amp;quot;
  },
  &amp;quot;authors&amp;quot;: [
    {
      &amp;quot;name&amp;quot;: &amp;quot;WHMCS&amp;quot;,
      &amp;quot;homepage&amp;quot;: &amp;quot;https:\/\/www.whmcs.com\/&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A brief description of each parameter and what it is used for can be found below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;schema&lt;/td&gt;
&lt;td&gt;The current version of the whmcs.json file structure.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;The type of module. The available types are: &lt;code&gt;whmcs-addons&lt;/code&gt;, &lt;code&gt;whmcs-fraud&lt;/code&gt;, &lt;code&gt;whmcs-gateways&lt;/code&gt;, &lt;code&gt;whmcs-registrars&lt;/code&gt;, &lt;code&gt;whmcs-security&lt;/code&gt;, &lt;code&gt;whmcs-servers&lt;/code&gt;, &lt;code&gt;whmcs-notifications&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;The name of the module.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;license&lt;/td&gt;
&lt;td&gt;Which type of license the module is released under.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;category&lt;/td&gt;
&lt;td&gt;The category in which the module should be organized.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;description&lt;/td&gt;
&lt;td&gt;Additional parameters that describe the module.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;description.name&lt;/td&gt;
&lt;td&gt;The display name of the module.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;description.tagline&lt;/td&gt;
&lt;td&gt;A short summary description of the module.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;description.long&lt;/td&gt;
&lt;td&gt;A more detailed description of the module.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;description.features&lt;/td&gt;
&lt;td&gt;An array containing each feature that will display as a list of bullet points.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;logo.filename&lt;/td&gt;
&lt;td&gt;The file that should be used as the module logo (500 pixel recommended width.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;support.homepage&lt;/td&gt;
&lt;td&gt;A URL that links to the website homepage for the module.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;support.learn_more&lt;/td&gt;
&lt;td&gt;A URL that links to a page with additional information about the module.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;support.email&lt;/td&gt;
&lt;td&gt;The email address to contact to get support for the module&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;support.support_url&lt;/td&gt;
&lt;td&gt;A URL that links to a support desk or resources for the module.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;support.docs_url&lt;/td&gt;
&lt;td&gt;A URL that links to the documentation for the module.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;authors&lt;/td&gt;
&lt;td&gt;An array of objects that represent each author and a link to their website.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;author name&lt;/td&gt;
&lt;td&gt;The name of the module author.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;author homepage&lt;/td&gt;
&lt;td&gt;A URL that links to the module author&amp;rsquo;s website.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The logo.png file used for a module should not exceed &lt;strong&gt;500&lt;/strong&gt; pixels in width. An example placeholder logo for reference can be found below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./advanced/module-image-placeholder.png&#34; alt=&#34;Module Image Placeholder&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>