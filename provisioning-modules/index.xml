<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Provisioning-modules-rsses on WHMCS Developer Documentation</title>
    <link>//developers.whmcs.com/provisioning-modules/index.xml</link>
    <description>Recent content in Provisioning-modules-rsses on WHMCS Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <atom:link href="//developers.whmcs.com/provisioning-modules/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Provisioning Modules</title>
      <link>//developers.whmcs.com/provisioning-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Provisioning Modules, enable provisioning and management of services in WHMCS.&lt;/p&gt;

&lt;p&gt;Provisioning Modules are also referred to as Product or Server Modules.&lt;/p&gt;

&lt;p&gt;The core function of a module is creating, suspending, unsuspending, and terminating of products.
This happens as various events occur.
These events include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New order payment&lt;/li&gt;
&lt;li&gt;Items becoming overdue&lt;/li&gt;
&lt;li&gt;Overdue invoice payment&lt;/li&gt;
&lt;li&gt;Cancellation requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A WHMCS module can do much more than just that including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automated password resets.&lt;/li&gt;
&lt;li&gt;Upgrades/downgrades.&lt;/li&gt;
&lt;li&gt;Renewals.&lt;/li&gt;
&lt;li&gt;Admin based links.&lt;/li&gt;
&lt;li&gt;Client area output.&lt;/li&gt;
&lt;li&gt;Metric data for Usage Billing&lt;/li&gt;
&lt;li&gt;And more via custom functions.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>//developers.whmcs.com/provisioning-modules/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/getting-started/</guid>
      <description>

&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;

&lt;p&gt;We make available a sample provisioning module on Github. We recommend using this as a starting point for a custom module.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/WHMCS/sample-provisioning-module&#34;&gt;https://github.com/WHMCS/sample-provisioning-module&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;choosing-a-name&#34;&gt;Choosing a Name&lt;/h2&gt;

&lt;p&gt;Provisioning Modules are located in the &lt;code&gt;/modules/servers/&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;Module names should be a single word, consisting of only lowercase letters and numbers. The name must start with a letter, and must be unique.&lt;/p&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Configuration Options</title>
      <link>//developers.whmcs.com/provisioning-modules/config-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/config-options/</guid>
      <description>&lt;p&gt;This function defines the settings that can be configured on a per product basis for your module.&lt;/p&gt;

&lt;p&gt;The name of this function must be &lt;code&gt;yourmodulename_ConfigOptions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The supported configuration field types include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text&lt;/li&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;li&gt;Yes/No Checkboxes&lt;/li&gt;
&lt;li&gt;Dropdown Menus&lt;/li&gt;
&lt;li&gt;Radio Buttons&lt;/li&gt;
&lt;li&gt;Text Areas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below are examples of the available parameters for each type of field. Provisioning modules support up to 24 options defined in this way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function yourmodulename_ConfigOptions() {
    return [
        &amp;quot;username&amp;quot; =&amp;gt; [
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;UserName&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;text&amp;quot;, # Text Box
            &amp;quot;Size&amp;quot; =&amp;gt; &amp;quot;25&amp;quot;, # Defines the Field Width
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Textbox&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;Example&amp;quot;,
        ],
        &amp;quot;password&amp;quot; =&amp;gt; [
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Password&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;password&amp;quot;, # Password Field
            &amp;quot;Size&amp;quot; =&amp;gt; &amp;quot;25&amp;quot;, # Defines the Field Width
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Password&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;Example&amp;quot;,
        ],
        &amp;quot;usessl&amp;quot; =&amp;gt; [
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Enable SSL&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;yesno&amp;quot;, # Yes/No Checkbox
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Tick to use secure connections&amp;quot;,
        ],
        &amp;quot;package&amp;quot; =&amp;gt; [
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Package Name&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;dropdown&amp;quot;, # Dropdown Choice of Options
            &amp;quot;Options&amp;quot; =&amp;gt; &amp;quot;Starter,Advanced,Ultimate&amp;quot;,
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Sample Dropdown&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;Advanced&amp;quot;,
        ],
        &amp;quot;packageWithNVP&amp;quot; =&amp;gt; [
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Package Name v2&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;dropdown&amp;quot;, # Dropdown Choice of Options
            &amp;quot;Options&amp;quot; =&amp;gt; [
                &#39;package1&#39; =&amp;gt; &#39;Starter&#39;,
                &#39;package2&#39; =&amp;gt; &#39;Advanced&#39;,
                &#39;package3&#39; =&amp;gt; &#39;Ultimate&#39;,
            ],
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Sample Dropdown&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;package2&amp;quot;,
        ],
        &amp;quot;disk&amp;quot; =&amp;gt; [
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Disk Space&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;radio&amp;quot;, # Radio Selection of Options
            &amp;quot;Options&amp;quot; =&amp;gt; &amp;quot;100MB,200MB,300MB&amp;quot;,
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Radio Options Demo&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;200MB&amp;quot;,
        ],
        &amp;quot;comments&amp;quot; =&amp;gt; [
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Notes&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;textarea&amp;quot;, # Textarea
            &amp;quot;Rows&amp;quot; =&amp;gt; &amp;quot;3&amp;quot;, # Number of Rows
            &amp;quot;Cols&amp;quot; =&amp;gt; &amp;quot;50&amp;quot;, # Number of Columns
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Description goes here&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;Enter notes here&amp;quot;,
        ],
    ];
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Simple Mode</title>
      <link>//developers.whmcs.com/provisioning-modules/simple-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/simple-mode/</guid>
      <description>

&lt;p&gt;Simple Configuration Mode is a feature available to module developers to simplify the configuration process for a module.&lt;/p&gt;

&lt;p&gt;Using Simple Mode allows you to reduce the number of Module Setting fields that are shown to end users by default.  For example, you can restrict the default Module Settings view to just the most common fields that a user needs to customise when creating a product assigned to your module, and have the other less commonly used fields only be shown if the user switches to Advanced Mode.&lt;/p&gt;

&lt;p&gt;The screenshots below shows the difference in Simple and Advanced Modes for the cPanel module.&lt;/p&gt;

&lt;h2 id=&#34;simple-mode&#34;&gt;Simple Mode&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;cpanel-simple-mode.png&#34; alt=&#34;Simple Mode&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;advanced-mode&#34;&gt;Advanced Mode&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;cpanel-advanced-mode.png&#34; alt=&#34;Advanced Mode&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To enable Simple Mode for your module, all you need to do is set an additional parameter in your Module Setting field definitions that you wish to appear in Simple Mode.  Below is an example of a module with two fields, one in Simple Mode, and the other only shown when in Advanced Mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function provisioningmodule_ConfigOptions($params)
{
    return [
        &#39;Simple Mode Field&#39; =&amp;gt; [
            &#39;Type&#39; =&amp;gt; &#39;text&#39;,
            &#39;Size&#39; =&amp;gt; &#39;25&#39;,
            &#39;SimpleMode&#39; =&amp;gt; true,
        ],
        &#39;Advanced Mode Field&#39; =&amp;gt; [
            &#39;Type&#39; =&amp;gt; &#39;text&#39;,
            &#39;Size&#39; =&amp;gt; &#39;25&#39;,
        ],
    ];
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Loader Functions</title>
      <link>//developers.whmcs.com/provisioning-modules/loader-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/loader-functions/</guid>
      <description>

&lt;p&gt;Setting a loader function allows you to create a field that offers a dropdown of options for an end user to choose from.&lt;/p&gt;

&lt;p&gt;Unlike the standard &amp;ldquo;dropdown&amp;rdquo; setting field type which allows you to offer a predefined and hard-coded choice of options to the user, a field with a loader function will display a list of options that have been fetched dynamically from a remote API service.&lt;/p&gt;

&lt;p&gt;An example use case for this is for a Package or Plan name field, where the values need to be fetched via an API from the remote system where the Packages or Plans are defined. Without a loader function, the end user would have to manually enter the package or plan name for the product. With a loader being used, WHMCS will poll the remote API service for a list of possible values when the field is rendered to the end user and allow them to make a choice.&lt;/p&gt;

&lt;p&gt;To use a loader function for a field, when defining the field in the &lt;strong&gt;ConfigOptions&lt;/strong&gt; function, you must also define a loader function that will be called to populate the field with a list of available options.&lt;/p&gt;

&lt;p&gt;Each field can have its own unique loader function defined. These fields will be populated with the return values of the associated loader function when simple mode is used.&lt;/p&gt;

&lt;p&gt;Here is an example of a field that defines a loader function with the name &lt;strong&gt;provisioningmodule_LoaderFunction&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function provisioningmodule_ConfigOptions($params)
{
    return [
        // Text field powered by the Loader function
        &#39;Loader Populated Field&#39; =&amp;gt; [
            &#39;Type&#39; =&amp;gt; &#39;text&#39;,
            &#39;Size&#39; =&amp;gt; &#39;25&#39;,
            &#39;Loader&#39; =&amp;gt; &#39;provisioningmodule_LoaderFunction&#39;,
            &#39;SimpleMode&#39; =&amp;gt; true,
        ],
    ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The loader function you define must be created and should return an array of key value pairs.&lt;/p&gt;

&lt;p&gt;The key should be the value that your module expects to receive, and the value should be a human friendly display label for the key value. In many cases these may be the same.&lt;/p&gt;

&lt;h2 id=&#34;error-handling&#34;&gt;Error Handling&lt;/h2&gt;

&lt;p&gt;If the connection to the remote API service needed to fetch the dynamically loaded values fails, your code should throw an Exception.&lt;/p&gt;

&lt;p&gt;WHMCS will recognize an Exception and display the error message returned in that exception to the end user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Loader function that will populate the field in ConfigOptions
 * @return array The list of package names
 */
function provisioningmodule_LoaderFunction($params) {
    // Make a call to the remote API endpoint
    $ch = curl_init(&#39;https://www.example.com/api/function&#39;);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($ch);

    // Check for any curl errors or an empty response
    if (curl_error($ch)) {
        throw new Exception(&#39;Unable to connect: &#39; . curl_errno($ch) . &#39; - &#39; . curl_error($ch));
    } elseif (empty($response)) {
        throw new Exception(&#39;Empty response&#39;);
    }

    // We&#39;re done with curl so we can release the resource now
    curl_close($ch);

    // Attempt to decode the response
    $packageNames = json_decode($response, true);  

    // Check to make sure valid json was returned
    if (is_null($packageNames)) {
        throw new Exception(&#39;Invalid response format&#39;);
    }

    // Format the list of values for display
    // [&#39;value&#39; =&amp;gt; &#39;Display Label&#39;]
    $list = [];
    foreach ($packageNames as $packageName) {
        $list[$packageName] = ucfirst($packageName);
    }

    return $list;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Meta Data Parameters</title>
      <link>//developers.whmcs.com/provisioning-modules/meta-data-params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/meta-data-params/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;//developers.whmcs.com/provisioning-modules&#34; title=&#34;Provisioning Modules&#34;&gt;Provisioning Modules&lt;/a&gt; support a number of meta data configuration parameters.&lt;/p&gt;

&lt;p&gt;They include:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Supported As Of&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DisplayName&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;Module Name&lt;/td&gt;
&lt;td&gt;&lt;em&gt;An alternate display name that will be used instead of the filename if defined&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;APIVersion&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;5.2&lt;/td&gt;
&lt;td&gt;1.1&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Defines API Version the module uses. Use &lt;code&gt;1.1&lt;/code&gt; unless you have a need specific to use &lt;code&gt;1.0&lt;/code&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RequiresServer&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Defines whether the module requires servers to function. A lot of modules these days don&amp;rsquo;t require servers be configured so setting this to false prevents users from creating servers assigned to it.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DefaultNonSSLPort&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;If specified, will display by default when configuring a server with the module when &lt;code&gt;Use SSL&lt;/code&gt; is disabled and will allow a user to override it should they wish.  Use this if your API can operate on varying port numbers.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DefaultSSLPort&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;If specified, will display by default when configuring a server with the module when &lt;code&gt;Use SSL&lt;/code&gt; is enabled and will allow a user to override it should they wish.  Use this if your API can operate on varying port numbers.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ServiceSingleSignOnLabel&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;For use with Single Sign-On, define here what you want to show as the text label for the Single Sign-On option for an instance of a service under a client.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;AdminSingleSignOnLabel&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;6.0&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;For use with Single Sign-On, define here what you want to show as the text label for the Single Sign-On option for a server assigned to the module within the admin area.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ListAccountsProductField&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;7.10&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;For use with Server Sync, define the config option indexed field, from the _ConfigOptions function, that identifies the product on the remote system.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ListAccountsUniqueIdentifierDisplayName&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;7.10&lt;/td&gt;
&lt;td&gt;Domain&lt;/td&gt;
&lt;td&gt;&lt;em&gt;For use with Server Sync, define the display name of the unique identifier to be displayed on the table output.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ListAccountsUniqueIdentifierField&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;7.10&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;em&gt;For use with Server Sync and Usage Metrics, define the field in the return that matches the unique identifier. The following values are supported: &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;customfield.yourFieldName&lt;/code&gt;. If using the &lt;code&gt;customfield.yourFieldName&lt;/code&gt; value, replace &lt;code&gt;yourFieldName&lt;/code&gt; with the name of the custom field to be used.&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These parameters are defined by a function which is responsible for returning an associative array containing the defined meta data configuration parameters and their values.&lt;/p&gt;

&lt;p&gt;The following example illustrates how one might make a simple MetaData function.&lt;/p&gt;

&lt;h2 id=&#34;example-metadata-function-a-id-example-function-a&#34;&gt;Example MetaData Function &lt;a id=&#34;example-function&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function mymodule_MetaData() {
    return array(
        &#39;DisplayName&#39; =&amp;gt; &#39;myModule&#39;,
        &#39;APIVersion&#39; =&amp;gt; &#39;1.1&#39;,
        &#39;DefaultNonSSLPort&#39; =&amp;gt; &#39;1234&#39;,
        &#39;DefaultSSLPort&#39; =&amp;gt; &#39;4321&#39;,
        &#39;ServiceSingleSignOnLabel&#39; =&amp;gt; &#39;Login to myModule Client&#39;,
        &#39;AdminSingleSignOnLabel&#39; =&amp;gt; &#39;Login to myModule Admin&#39;,
        &#39;ListAccountsUniqueIdentifierDisplayName&#39; =&amp;gt; &#39;Domain&#39;,
        &#39;ListAccountsUniqueIdentifierField&#39; =&amp;gt; &#39;domain&#39;,
        &#39;ListAccountsProductField&#39; =&amp;gt; &#39;configoption1&#39;,
    );
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Supported Functions</title>
      <link>//developers.whmcs.com/provisioning-modules/supported-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/supported-functions/</guid>
      <description>

&lt;p&gt;Here is an overview of all functions that a WHMCS provisioning module can contain.
Functions within a module are optional and need not be in the module if they don’t apply.
Remember, all functions should have the prefix &lt;strong&gt;filename_&lt;/strong&gt; and then the function name.
The function name is the header below.&lt;/p&gt;

&lt;h2 id=&#34;createaccount-a-id-create-account-a&#34;&gt;CreateAccount &lt;a id=&#34;create-account&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This function runs when a new product provisions.
This can be by WHMCS upon checkout or payment for a new order.
Also, by an admin user from the Products/Services tab in a clients profile of the admin area.&lt;/p&gt;

&lt;h2 id=&#34;suspendaccount-a-id-suspend-account-a&#34;&gt;SuspendAccount &lt;a id=&#34;suspend-account&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This function runs when a suspension is requested.
Requested by the WHMCS Cron when a product becomes overdue, or by admin user in the Client Profile.&lt;/p&gt;

&lt;h2 id=&#34;unsuspendaccount-a-id-unsuspend-account-a&#34;&gt;UnsuspendAccount &lt;a id=&#34;unsuspend-account&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This function runs when an unsuspension is requested.
Requested upon payment of an overdue invoice for a product.&lt;/p&gt;

&lt;h2 id=&#34;terminateaccount-a-id-terminate-account-a&#34;&gt;TerminateAccount &lt;a id=&#34;terminate-account&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This function runs when a termination is requested.
Requested by the WHMCS Cron for long overdue products when enabled (&lt;a href=&#34;http://docs.whmcs.com/Automation_Settings#Enable_Termination&#34; title=&#34;Automation Settings&#34;&gt;Automation Settings&lt;/a&gt;).
Also requested by an admin user in the Client Profile.&lt;/p&gt;

&lt;h2 id=&#34;renew-a-id-renew-a&#34;&gt;Renew &lt;a id=&#34;renew&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This function runs each time a renewal invoice for a product becomes paid.&lt;/p&gt;

&lt;h2 id=&#34;changepassword-a-id-change-password-a&#34;&gt;ChangePassword &lt;a id=&#34;change-password&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This function runs as a client requests a password change.
The option will not show up if the function is not defined in the module.
The status of the product must also be active.
Admins can also invoke this command from the admin area.&lt;/p&gt;

&lt;h2 id=&#34;changepackage-a-id-change-package-a&#34;&gt;ChangePackage &lt;a id=&#34;change-package&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This function runs for upgrading and downgrading of products.
This function runs when an upgrade or downgrade order placed by the client becomes paid.
Admins can also invoke this from the product management pages.
The same function runs for upgrades and downgrades of both products and configurable options.&lt;/p&gt;

&lt;h2 id=&#34;clientarea-a-id-client-area-a&#34;&gt;ClientArea &lt;a id=&#34;client-area&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This function can be used to define module specific client area output.
It accepts a return of HTML for display on the product details page of the client area.
Output via a template file within the module folder named &amp;ldquo;clientarea.tpl&amp;rdquo; is also possible.
Discussion of this function in more detail later on in the docs.&lt;/p&gt;

&lt;h2 id=&#34;adminarea-a-id-admin-area-a&#34;&gt;AdminArea &lt;a id=&#34;admin-area&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Used to define HTML code that displays on server configuration page (&lt;strong&gt;Setup&lt;/strong&gt; &amp;gt; &lt;strong&gt;Products/Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;Servers&lt;/strong&gt;).
Used to provide an automated shortcut/login link to the integrated server control panel.&lt;/p&gt;

&lt;h2 id=&#34;loginlink-a-id-login-link-a&#34;&gt;LoginLink &lt;a id=&#34;login-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Used to define HTML code to link to the customers account on a server control panel.
Displayed on the product management page of the admin area.
The return must be HTML output or link (no forms).&lt;/p&gt;

&lt;h2 id=&#34;clientareacustombuttonarray-a-id-client-area-custom-button-array-a&#34;&gt;ClientAreaCustomButtonArray &lt;a id=&#34;client-area-custom-button-array&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Used to define custom functions that your module supports.
Customers can invoke and run these from the client area.
The functions can perform actions or product page output in the client area.
Example usages for this are to provide product management pages, bandwidth reporting pages, etc…&lt;/p&gt;

&lt;h2 id=&#34;clientareaallowedfunctions-a-id-client-area-allowed-functions-a&#34;&gt;ClientAreaAllowedFunctions &lt;a id=&#34;client-area-allowed-functions&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Like the above, used to define custom functions.
Customers can invoke, but are not shown as buttons by default (i.e. custom client area output will invoke them).&lt;/p&gt;

&lt;h2 id=&#34;admincustombuttonarray-a-id-admin-custom-button-array-a&#34;&gt;AdminCustomButtonArray &lt;a id=&#34;admin-custom-button-array&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Used to define custom functions in your module for admin users.
This can contain more functions than the client area equivalent.&lt;/p&gt;

&lt;h2 id=&#34;usageupdate-a-id-usage-update-a&#34;&gt;UsageUpdate &lt;a id=&#34;usage-update&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Used to perform a daily import of the disk and bandwidth usage from a server.
The data imported is then used to display the usage stats both within the client and admin areas of WHMCS.
The data is also used in disk and bandwidth overage billing calculations if enabled for a product.&lt;/p&gt;

&lt;h2 id=&#34;metricprovider-a-id-usage-metrics-a&#34;&gt;MetricProvider &lt;a id=&#34;usage-metrics&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Used to list the names of and collect usage for metric stats of a server.
The name data is used for product price configuration within the admin areas of WHMCS.
The usage data is periodically collected and stored in WHMCS for display within
both the client and admin area.  That stored usage is also used for generating
invoice line items, if enabled in the Invoicing section of General Setting.&lt;/p&gt;

&lt;h2 id=&#34;adminservicestabfields-a-id-admin-services-tab-fields-a&#34;&gt;AdminServicesTabFields &lt;a id=&#34;admin-services-tab-fields&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Used to define extra fields or output to display within admin product pages.&lt;/p&gt;

&lt;h2 id=&#34;adminservicestabfieldssave-a-id-admin-servics-tab-fields-save-a&#34;&gt;AdminServicesTabFieldsSave &lt;a id=&#34;admin-servics-tab-fields-save&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Used in conjunction with the above.
This function handles the values submitted in any custom fields when a save occurs.&lt;/p&gt;

&lt;h2 id=&#34;metadata-a-id-meta-data-a&#34;&gt;MetaData &lt;a id=&#34;meta-data&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Used to define a number of meta data configuration parameters.
This function returns an array, consisting key-value pairs, where the key is the parameter name and the value is the parameter value.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Module Parameters</title>
      <link>//developers.whmcs.com/provisioning-modules/module-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/module-parameters/</guid>
      <description>

&lt;p&gt;The module parameters are the data/values passed into each function when called.
Every provisioning module function receives the same parameters.
These parameters provide information about the specific product/service the module command runs for.
The parameters also contains the settings from the product itself.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;serviceid&lt;/td&gt;
&lt;td&gt;The unique ID of the service.&lt;br /&gt;Database Field: tblhosting.id&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;pid&lt;/td&gt;
&lt;td&gt;The product ID for the service.&lt;br /&gt;Database Field: tblproducts.id&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;serverid&lt;/td&gt;
&lt;td&gt;The assigned server ID for the service.&lt;br /&gt;Database Field: tblservers.id&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;domain&lt;/td&gt;
&lt;td&gt;The domain entered by the customer when ordering.&lt;br /&gt;Database Field: tblhosting.domain&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;username&lt;/td&gt;
&lt;td&gt;Username generated for the service. (defaults to first 8 letters of the domain)&lt;br /&gt;Database Field: tblhosting.username&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td&gt;Password generated for the service. (10 char generated on first creation consisting of letters &amp;amp; numbers, both upper &amp;amp; lowercase).  &lt;br /&gt;Database Field: tblhosting.password&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;producttype&lt;/td&gt;
&lt;td&gt;The product type which can be one of hostingaccount, reselleraccount, server or other.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;moduletype&lt;/td&gt;
&lt;td&gt;The module name (will match filename of module).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;configoptionX&lt;/td&gt;
&lt;td&gt;with X being from 1 to 24. &lt;br /&gt;These fields contain the module settings for the product defined in the ConfigOptions function.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;clientsdetails&lt;/td&gt;
&lt;td&gt;Contains an array of all client details service owner. This contains things like firstname, lastname, email, address1, country, etc…&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;customfields&lt;/td&gt;
&lt;td&gt;Contains an array of all custom fields defined on the product.  &lt;br /&gt;The key is the custom field name - $params[&amp;lsquo;customfields&amp;rsquo;][&amp;lsquo;Field Name&amp;rsquo;].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;configoptions&lt;/td&gt;
&lt;td&gt;Contains an array of all the configurable options defined on the product.  &lt;br /&gt;Again the key being the option name in this case - $params[&amp;lsquo;configoptions&amp;rsquo;][&amp;lsquo;Option Name Here&amp;rsquo;].&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;server&lt;/td&gt;
&lt;td&gt;true/false - Is the product assigned to a server.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;serverip&lt;/td&gt;
&lt;td&gt;The IP Address of the selected server.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;serverhostname&lt;/td&gt;
&lt;td&gt;The Hostname of the selected server.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;serverusername&lt;/td&gt;
&lt;td&gt;The Username of the selected server.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;serverpassword&lt;/td&gt;
&lt;td&gt;The Password of the selected server.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;serveraccesshash&lt;/td&gt;
&lt;td&gt;The Access Hash of the selected server.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;serversecure&lt;/td&gt;
&lt;td&gt;true/false - Is an SSL connection enabled in the Server Configuration.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;serverport&lt;/td&gt;
&lt;td&gt;The server port if module supports override with custom port&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;config-options-a-id-config-options-a&#34;&gt;Config Options &lt;a id=&#34;config-options&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;//developers.whmcs.com/provisioning-modules/getting-started#product-configuration-options&#34; title=&#34;Product Configuration Options&#34;&gt;Config Options&lt;/a&gt; (do not confuse with Configurable Options) are the module&amp;rsquo;s settings.
These are defined in the ConfigOptions function of the module.
Config Options are set on a per product basis.
Supplied as a numbered list: $params[‘configoption1’], $params[‘configoption2’], etc.
Defined by the order specified in the ConfigOptions function of the module.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Every module function except the _ConfigOptions function receives the $params array. The _ConfigOptions function is unique because it is the only function that is not called in relation to a specific client instance of a product or service.&lt;/p&gt;

&lt;h2 id=&#34;custom-fields-configurable-options-a-id-custom-fields-configurable-options-a&#34;&gt;Custom Fields &amp;amp; Configurable Options &lt;a id=&#34;custom-fields-configurable-options&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Values from any custom fields &amp;amp; configurable options are passed into modules as parameters.
Passed as an array with the key being the name of the field or option.&lt;/p&gt;

&lt;p&gt;For example for a custom field called “Username”, would become $params[‘customfields’][‘Username’].
Likewise, a configurable option named “Disk Space”, would become $params[‘configoptions’][‘Disk Space’].&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Core Module Functions</title>
      <link>//developers.whmcs.com/provisioning-modules/core-module-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/core-module-functions/</guid>
      <description>

&lt;p&gt;The core module functions are &lt;strong&gt;Create&lt;/strong&gt;, &lt;strong&gt;Suspend&lt;/strong&gt;, &lt;strong&gt;Unsuspend&lt;/strong&gt;, &lt;strong&gt;Terminate&lt;/strong&gt;, &lt;strong&gt;Renew&lt;/strong&gt;, &lt;strong&gt;ChangePassword&lt;/strong&gt; and &lt;strong&gt;ChangePackage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These 7 functions all operate in a similar manner. They can run both manually and automatically.
Each expected to return either a success or error response.&lt;/p&gt;

&lt;h2 id=&#34;response-handling-a-id-response-handling-a&#34;&gt;Response Handling &lt;a id=&#34;response-handling&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Each of these functions after running actions must either return a success or error.&lt;/p&gt;

&lt;p&gt;For a successful result the code must actually return the word &amp;ldquo;&lt;em&gt;success&lt;/em&gt;&amp;rdquo; to end the function.
When WHMCS receives &amp;ldquo;&lt;em&gt;success&lt;/em&gt;&amp;rdquo; it knows the function completed and continues on that basis.&lt;/p&gt;

&lt;p&gt;Should the function fail, the return should be a user understandable error message, as it will display to staff users.&lt;/p&gt;

&lt;h2 id=&#34;action-events-a-id-action-events-a&#34;&gt;Action Events &lt;a id=&#34;action-events&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;When a function is successful, there are various actions that run as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CreateAccount&lt;/strong&gt; - Changes status to Active + Sends Product Welcome Email&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SuspendAccount&lt;/strong&gt; - Changes status to Suspended&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UnsuspendAccount&lt;/strong&gt; - Changes status to Active&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TerminateAccount&lt;/strong&gt; - Changes status to Terminated&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ChangePassword&lt;/strong&gt; - Updates password in database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides the above actions, admin users receive a confirmation of functions completing, or errors in the case of failure.
Functions invoked through automation, such as payment of a new order, that notification can be via email.
In the case of ChangePassword, any errors returned are also displayed to client users.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Single Sign-On</title>
      <link>//developers.whmcs.com/provisioning-modules/single-sign-on/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/single-sign-on/</guid>
      <description>

&lt;p&gt;Single sign-on can occur for a service or server.&lt;/p&gt;

&lt;p&gt;Whichever method being used, the return should be the same.&lt;/p&gt;

&lt;p&gt;The return from either function should always be an array and contain two keys of a possible three.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;success - This is a &lt;a href=&#34;http://docs.whmcs.com/Glossary#Boolean&#34;&gt;boolean&lt;/a&gt; value and should indicate success or failure&lt;/li&gt;
&lt;li&gt;redirectTo - This should be a fully formatted URL return from your SSO request&lt;/li&gt;
&lt;li&gt;errorMsg - Any appropriate error message to be displayed to whoever is making the request&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;service-single-sign-on-a-id-service-sso-a&#34;&gt;Service Single Sign-On &lt;a id=&#34;service-sso&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Service single sign-on is to allow admin and client users to login to the control panel of the service automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Perform single sign-on for a given instance of a product/service.
 *
 * Called when single sign-on is requested for an instance of a product/service.
 *
 * When successful, returns an URL to which the user should be redirected.
 *
 * @param array $params common module parameters
 *
 * @see https://developers.whmcs.com/provisioning-modules/module-parameters/
 *
 * @return array
 */
function mymodule_ServiceSingleSignOn(array $params)
{
	$return = array(
		&#39;success&#39; =&amp;gt; false,
	);
	try {
        /**
         * all the service&#39;s single sign-on token retrieval function, using the
         * values provided by WHMCS in `$params`.
         * The variables and response format would depend on your server API
         */

        $response = $formattedResponse = custom_call_to_server();

        $return = array(
            &#39;success&#39; =&amp;gt; true,
            &#39;redirectTo&#39; =&amp;gt; $response[&#39;redirectUrl&#39;],
        );
    } catch (Exception $e) {
        $return[&#39;errorMsg&#39;] = $e-&amp;gt;getMessage();
        $response = $e-&amp;gt;getMessage();
        $formattedResponse = $e-&amp;gt;getTraceAsString();
    }

    /**
     * Log any call to the server
     */
	logModuleCall(
        &#39;provisioningmodule&#39;,
        __FUNCTION__,
        $params,
        $response,
        $formattedResponse,
        array(&#39;username&#39;, &#39;password&#39;)
    );

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to call your &lt;strong&gt;_ServiceSingleSignOn&lt;/strong&gt; function from the Client Area, create a button or link that uses the following URL format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/clientarea.php?action=productdetails&amp;amp;id=SERVICE_ID_HERE&amp;amp;dosinglesignon=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace &lt;strong&gt;SERVICE_ID_HERE&lt;/strong&gt; with the ID of the client&amp;rsquo;s service that you wish to perform the single sign-on with.&lt;/p&gt;

&lt;p&gt;The most common methods of displaying the link are; in the sidebar, or a button in the client area output of the module. The following resources go into further detail on how to use the WHMCS hooks system or client area output in a module:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.whmcs.com/themes/sidebars/&#34;&gt;https://developers.whmcs.com/themes/sidebars/&lt;/a&gt;
&lt;a href=&#34;https://developers.whmcs.com/provisioning-modules/client-area-output/&#34;&gt;https://developers.whmcs.com/provisioning-modules/client-area-output/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;server-single-sign-on-a-id-server-sso-a&#34;&gt;Server Single Sign-On &lt;a id=&#34;server-sso&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Server single sign-on allows for Admin users to login to the associated server management panel (like WHM for cPanel) automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Perform single sign-on for a server.
 *
 * Called when single sign-on is requested for a server assigned to the module.
 *
 * This differs from ServiceSingleSignOn in that it relates to a server
 * instance within the admin area, as opposed to a single client instance of a
 * product/service.
 *
 * When successful, returns an URL to which the user should be redirected to.
 *
 * @param array $params common module parameters
 *
 * @see https://developers.whmcs.com/provisioning-modules/module-parameters/
 *
 * @return array
 */
function mymodule_AdminSingleSignOn(array $params)
{
	$return = array(
		&#39;success&#39; =&amp;gt; false,
	);
	try {
        /**
         * all the service&#39;s single sign-on token retrieval function, using the
         * values provided by WHMCS in `$params`.
         * The variables and response format would depend on your server API
         */

        $response = $formattedResponse = custom_call_to_server();

        $return = array(
            &#39;success&#39; =&amp;gt; true,
            &#39;redirectTo&#39; =&amp;gt; $response[&#39;redirectUrl&#39;],
        );
    } catch (Exception $e) {
        $return[&#39;errorMsg&#39;] = $e-&amp;gt;getMessage();
        $response = $e-&amp;gt;getMessage();
        $formattedResponse = $e-&amp;gt;getTraceAsString();
    }

    /**
     * Log any call to the server
     */
	logModuleCall(
        &#39;provisioningmodule&#39;,
        __FUNCTION__,
        $params,
        $response,
        $formattedResponse,
        array(&#39;username&#39;, &#39;password&#39;)
    );

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Usage Update</title>
      <link>//developers.whmcs.com/provisioning-modules/usage-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/usage-update/</guid>
      <description>

&lt;p&gt;The UsageUpdate function performs a daily import of the disk and bandwidth usage for accounts of a server.
The data imported is then used to display the usage stats both within the client and admin areas of WHMCS.
The data is also used in disk and bandwidth overage billing calculations if enabled for a product.&lt;/p&gt;

&lt;p&gt;The UsageUpdate function runs via WHMCS Cron, for any active, enabled server.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Important: Runs per server not per product&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This can only run if your module has a server created in WHMCS for it - products alone do not invoke it.&lt;/p&gt;

&lt;p&gt;The function receives the id, ip, hostname, username/hash, &amp;amp; password variables.
The function will query the disk and bandwidth usage for the server, and updates the database.
The database update should be a single call for speed and efficiency.&lt;/p&gt;

&lt;h2 id=&#34;example-usage-update-function-a-id-example-function-a&#34;&gt;Example Usage Update Function &lt;a id=&#34;example-function&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function mymodule_UsageUpdate($params) {

    $serverid = $params[&#39;serverid&#39;];
    $serverhostname = $params[&#39;serverhostname&#39;];
    $serverip = $params[&#39;serverip&#39;];
    $serverusername = $params[&#39;serverusername&#39;];
    $serverpassword = $params[&#39;serverpassword&#39;];
    $serveraccesshash = $params[&#39;serveraccesshash&#39;];
    $serversecure = $params[&#39;serversecure&#39;];

    // Run connection to retrieve usage for all domains/accounts on $serverid

    // Now loop through results and update DB

    foreach ($results AS $domain =&amp;gt; $values) {
        try {
            \WHMCS\Database\Capsule::table(&#39;tblhosting&#39;)
                -&amp;gt;where(&#39;server&#39;, $serverid)
                -&amp;gt;where(&#39;domain&#39;, $values[&#39;domain&#39;])
                -&amp;gt;update([
                    &#39;diskusage&#39; =&amp;gt; $values[&#39;diskusage&#39;],
                    &#39;disklimit&#39; =&amp;gt; $values[&#39;disklimit&#39;],
                    &#39;bwusage&#39; =&amp;gt; $values[&#39;bandwidth&#39;],
                    &#39;bwlimit&#39; =&amp;gt; $values[&#39;bwlimit&#39;],
                    &#39;lastupdate&#39; =&amp;gt; Capsule::raw(&#39;now()&#39;),
                ]);
        } catch (\Exception $e) {
            // Handle any error which may occur
        } 
    }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Usage Metrics</title>
      <link>//developers.whmcs.com/provisioning-modules/usage-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/usage-metrics/</guid>
      <description>

&lt;p&gt;&lt;code&gt;Compatibility: This functionality is available since v7.9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usage metrics give Services information about resource consumption and Products
the ability to price those resources.&lt;/p&gt;

&lt;p&gt;Please make sure to read the feature documentation for
&lt;a href=&#34;https://docs.whmcs.com/Usage_Billing&#34;&gt;Usage Billing&lt;/a&gt; so that you have the best
understanding of how your module is expected to interact with WHMCS.&lt;/p&gt;

&lt;h2 id=&#34;metricprovider-function&#34;&gt;MetricProvider Function&lt;/h2&gt;

&lt;p&gt;The MetricProvider function is responsible for returning an object that implements
\WHMCS\UsageBilling\Contracts\Metrics\ProviderInterface.&lt;/p&gt;

&lt;p&gt;This object provides a list of available metrics, all usage of the server, and
usage by given tenant on that server.
Interface and class are documented in the WHMCS\UsageBilling namespace at &lt;a href=&#34;https://classdocs.whmcs.com/&#34;&gt;https://classdocs.whmcs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following illustrates how one might make a simple class that fulfills the interface&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace WHMCS\Module\Server\Mymodule;
/**
 * The above namespace is automatically registered for autoloading classes within
 * a &amp;quot;lib&amp;quot; sub-directory relative to your module directory. So, place this class 
 * in modules/servers/mymodule/lib/MyMtricsProvider.php. 
 */

use WHMCS\UsageBilling\Contracts\Metrics\MetricInterface;
use WHMCS\UsageBilling\Contracts\Metrics\ProviderInterface;
use WHMCS\UsageBilling\Metrics\Metric;
use WHMCS\UsageBilling\Metrics\Units\Accounts;
use WHMCS\UsageBilling\Metrics\Usage;

class MyMetricsProvider implements ProviderInterface
{
    private $moduleParams = [];
    public function __construct($moduleParams)
    {
        // A sample `$params` array may be defined as:
        //
        // ```
        // array(
        //     &amp;quot;server&amp;quot; =&amp;gt; true
        //     &amp;quot;serverid&amp;quot; =&amp;gt; 1
        //     &amp;quot;serverip&amp;quot; =&amp;gt; &amp;quot;11.111.4.444&amp;quot;
        //     &amp;quot;serverhostname&amp;quot; =&amp;gt; &amp;quot;my.testserver.tld&amp;quot;
        //     &amp;quot;serverusername&amp;quot; =&amp;gt; &amp;quot;root&amp;quot;
        //     &amp;quot;serverpassword&amp;quot; =&amp;gt; &amp;quot;&amp;quot;
        //     &amp;quot;serveraccesshash&amp;quot; =&amp;gt; &amp;quot;ZZZZ1111222333444555AAAA&amp;quot;
        //     &amp;quot;serversecure&amp;quot; =&amp;gt; true
        //     &amp;quot;serverhttpprefix&amp;quot; =&amp;gt; &amp;quot;https&amp;quot;
        //     &amp;quot;serverport&amp;quot; =&amp;gt; &amp;quot;77777&amp;quot;
        // )
        // ```
        $this-&amp;gt;moduleParams = $moduleParams;
    }

    public function metrics()
    {
        return [
            new Metric(
                &#39;emailaddr&#39;,
                &#39;Email Mailboxes&#39;,
                MetricInterface::TYPE_SNAPSHOT,
                new Accounts(&#39;Mailboxes&#39;)
            ),
        ];
    }

    public function usage()
    {
        $serverData = $this-&amp;gt;apiCall(&#39;stats&#39;);
        $usage = [];
        foreach ($serverData as $data) {
            $usage[$data[&#39;username&#39;]] = $this-&amp;gt;wrapUserData($data);
        }
        
        return $usage;
    }
    
    public function tenantUsage($tenant)
    {
        $userData = $this-&amp;gt;apiCall(&#39;user_stats&#39;);
        
        return $this-&amp;gt;wrapUserData($userData);
    }

    private function wrapUserData($data)
    {
        $wrapped = [];
        foreach ($this-&amp;gt;metrics() as $metric) {
            $key = $metric-&amp;gt;systemName();
            if ($data[$key]) {
                $value = $data[$key];
                $metric = $metric-&amp;gt;withUsage(
                    new Usage($value)
                );
            }
            
            $wrapped[] = $metric;
        }
        
        return $wrapped;
    }
    
    private function apiCall($action)
    {
        // make remote call with $moduleParams
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The MetricProvider function will be invoked in various contexts throughout WHMCS
so it is important to utilize strategies in your class design that minimize
communication with remote servers.  The usage() and tenantUsage() methods will
only be invoked in the context of a service with a server.  However, the metrics()
method will be invoked in contexts specifically about Products. This method
must always return a valid list for all potential servers that use the module.&lt;/p&gt;

&lt;h3 id=&#34;example-metricprovider-function-a-id-example-function-a&#34;&gt;Example MetricProvider Function &lt;a id=&#34;example-function&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;use WHMCS\Module\Server\MyModule\MyMetricsProvider;

function mymodule_MetricProvider($params) {

    return new MyMetricProvider($params);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;metrics&#34;&gt;Metrics&lt;/h2&gt;

&lt;p&gt;The metric() method must return an array of \WHMCS\UsageBilling\Contracts\Metrics\MetricInterface
instances, as noted by the ProviderInterface.  You may use, or extend, \WHMCS\UsageBilling\Metrics\Metric&lt;/p&gt;

&lt;h3 id=&#34;metric-type&#34;&gt;Metric Type&lt;/h3&gt;

&lt;p&gt;The metric type of your MetricInterface instance is a critical expression of
if/when the remote system is resetting the usage data.  If the incorrect type is
used the snapshot data stored within WHMCS may track usage incorrectly.&lt;/p&gt;

&lt;p&gt;For metrics that are related to non-ephemeral entities, such as mailboxes, disk
usage, or databases, your remote system is unlikely to reset this data.  These
are a &amp;ldquo;snapshot&amp;rdquo; type (\WHMCS\UsageBilling\Contracts\Metrics\MetricInterface::TYPE_SNAPSHOT)&lt;/p&gt;

&lt;p&gt;For metrics that are related to usage that is an accumulative measure at the
remote system, like bandwidth, it is likely that these will be reset of a
specific frequency.  WHMCS support a &amp;ldquo;time-based&amp;rdquo; daily and a monthly frequency via \WHMCS\UsageBilling\Contracts\Metrics\MetricInterface::TYPE_DAY
and \WHMCS\UsageBilling\Contracts\Metrics\MetricInterface::TYPE_MONTH.  When data
is collected by WHMCS, the value of these metrics will overwrite any previous
data for the respective time period.  So for monthly items, WHMCS internals will
manage one record for each calendar month; for daily, WHMCS will manage on
record for each day of each month.  At the end of a service&amp;rsquo;s billing term, any
uninvoiced usage for those periods will be summed and calculations applied to
that total.&lt;/p&gt;

&lt;h3 id=&#34;metric-units&#34;&gt;Metric Units&lt;/h3&gt;

&lt;p&gt;Several unit classes are readily available in the \WHMCS\UsageBilling\Metrics\Units
namespace.  These include Bytes, MegaBytes, GigaBytes, Accounts, and Domains.  These
extend one of the two base concrete classes, WholeNumber or FloatingPoint. You can use
those directly or extend them with your own concrete definition if you have need
for repeated use of a custom unit.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Metrics should describe usage by providing an object that implements
\WHMCS\UsageBilling\Contracts\Metrics\UsageInterface.
You may use \WHMCS\UsageBilling\Metrics\Usage if you wish.  You will provide this
usage detail via the usage() and tenantUsage() methods.&lt;/p&gt;

&lt;p&gt;If usage values returned by your API are not in the units that you wish WHMCS to
report has, you will need to manage any conversion.&lt;/p&gt;

&lt;p&gt;The usage() method should return an array of tenants and a list of metrics with
usage (in the form of an object instance that implements \WHMCS\UsageBilling\Contracts\Metrics\UsageInterface).
This method is use in a global context, such as by the cron when polling for all
metric information.&lt;/p&gt;

&lt;p&gt;The tenantUsage($tenant) should simply provide the list of MetricInterface objects
 that have been populated with UsageInterface objects.  This method
is used in specific contexts of a service.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom Functions</title>
      <link>//developers.whmcs.com/provisioning-modules/custom-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/custom-functions/</guid>
      <description>

&lt;p&gt;Custom functions allow definition of extra operations that run using the module.
The custom functions can perform actions, or define extra client area pages/output.
Permissions can be granted for who can use each custom function, be it just clients, just admins, or both.&lt;/p&gt;

&lt;p&gt;The convention for custom function names follow the same as any other function of a module.
It must begin with the module &lt;strong&gt;filename_&lt;/strong&gt;, and then the custom function name.&lt;/p&gt;

&lt;p&gt;The easiest way to show this is with an example.&lt;/p&gt;

&lt;h2 id=&#34;example-custom-function-a-id-example-function-a&#34;&gt;Example Custom Function &lt;a id=&#34;example-function&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Let’s take an example of a reboot &amp;amp; shutdown function in a VM/VPS system.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function mymodule_reboot($params) {

	# Code to perform reboot action goes here...

    if ($successful) {
		$result = &amp;quot;success&amp;quot;;
	} else {
		$result = &amp;quot;Error Message Goes Here...&amp;quot;;
	}
	return $result;

}

function mymodule_shutdown($params) {

	# Code to perform shutdown action goes here...

    if ($successful) {
		$result = &amp;quot;success&amp;quot;;
	} else {
		$result = &amp;quot;Error Message Goes Here...&amp;quot;;
	}
	return $result;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above shows how to define custom functions and to used the passed variables.
The custom function returns either “success” or an error message to show a failure.
If we wanted to allow clients to perform reboots, but only admins to be able to perform a shutdown, that would be defined like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function mymodule_ClientAreaCustomButtonArray() {
    $buttonarray = array(
	 &amp;quot;Reboot Server&amp;quot; =&amp;gt; &amp;quot;reboot&amp;quot;,
	);
	return $buttonarray;
}

function mymodule_AdminCustomButtonArray() {
    $buttonarray = array(
	 &amp;quot;Reboot Server&amp;quot; =&amp;gt; &amp;quot;reboot&amp;quot;,
	 &amp;quot;Shutdown Server&amp;quot; =&amp;gt; &amp;quot;shutdown&amp;quot;,
	);
	return $buttonarray;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above allows a clients to run the “reboot” function, and admins “reboot” and “shutdown”.&lt;/p&gt;

&lt;p&gt;The key value of the array is what displays to admins/clients on the button or menu options for the commands.
And the value is the custom function name excluding the &lt;strong&gt;modulename_&lt;/strong&gt; prefix.&lt;/p&gt;

&lt;p&gt;A description of how to provide a button or way to invoke a custom function is in the Client Area Output section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;clientarea.php?action=productdetails&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;id&amp;quot; value=&amp;quot;{$serviceid}&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;modop&amp;quot; value=&amp;quot;custom&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;a&amp;quot; value=&amp;quot;reboot&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Reboot VPS Server&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Client Area Output</title>
      <link>//developers.whmcs.com/provisioning-modules/client-area-output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/client-area-output/</guid>
      <description>

&lt;p&gt;Another key function of a module is to give clients access to extra options and output within the client area. Done either on the product details page (using the ClientArea function of a module), or as a &lt;a href=&#34;//developers.whmcs.com/provisioning-modules/custom-functions#example-function&#34; title=&#34;Custom Function Example&#34;&gt;custom function/action&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;product-details-page-output-a-id-product-details-output-a&#34;&gt;Product Details Page Output &lt;a id=&#34;product-details-output&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Creating output to display on the same page as the product details in the client area is easy.
Create a template file named “clientarea.tpl” within the module folder.
This template file will process as a Smarty template file.
This means it can make use of Smarty variables.
The variables will be the same module vars as passed to every module function.
Also, other smarty functions such as logic functions are available.&lt;/p&gt;

&lt;p&gt;More advanced actions, such as performing API Calls or defining variables for the output are possible.
A ClientArea function within the module that runs any code and returns an array with the template file to use, and any variables desired besides the defaults.
Returning different template file values based on data in the $_GET or $_POST array data, allows for many pages which can have direct links.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function mymodule_ClientArea($vars) {
    return array(
        &#39;templatefile&#39; =&amp;gt; &#39;clientarea&#39;,
        &#39;vars&#39; =&amp;gt; array(
            &#39;test1&#39; =&amp;gt; &#39;hello&#39;,
            &#39;test2&#39; =&amp;gt; &#39;world&#39;,
        ),
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;custom-pages-a-id-custom-pages-a&#34;&gt;Custom Pages &lt;a id=&#34;custom-pages&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Situations that need a custom page, rather than output on the existing product details page, are possible.
Done using &lt;a href=&#34;//developers.whmcs.com/provisioning-modules/custom-functions#example-function&#34; title=&#34;Custom Function Example&#34;&gt;custom functions&lt;/a&gt; as described earlier, with that function returning an array as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function mymodule_mycustomfunction($vars) {
    return array(
        &#39;templatefile&#39; =&amp;gt; &#39;customfunc&#39;,
        &#39;breadcrumb&#39; =&amp;gt; array(
            &#39;stepurl.php?action=this&amp;amp;var=that&#39; =&amp;gt; &#39;Custom Function&#39;,
        ),
        &#39;vars&#39; =&amp;gt; array(
            &#39;test1&#39; =&amp;gt; &#39;hello&#39;,
            &#39;test2&#39; =&amp;gt; &#39;world&#39;,
        ),
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clients then need access to use this function, and a link in the product details page.
Do this using the methods described in the previous &amp;lsquo;&lt;a href=&#34;//developers.whmcs.com/provisioning-modules/custom-functions#example-function&#34; title=&#34;Custom Function Example&#34;&gt;Custom Functions&lt;/a&gt;&amp;rsquo; section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Admin Services Tab</title>
      <link>//developers.whmcs.com/provisioning-modules/admin-services-tab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/provisioning-modules/admin-services-tab/</guid>
      <description>

&lt;p&gt;Admin Services Tab functions allow definition of extra fields to appear on the product details in the admin area.
Used for informational output, or for settings and values stored in custom tables or outside WHMCS.&lt;/p&gt;

&lt;p&gt;WHMCS uses this in the core system for our licensing addon module.
The license specific fields of the allowed system are set and viewed from the product details.&lt;/p&gt;

&lt;p&gt;There are 2 functions relating to the services tab - &lt;code&gt;AdminServicesTabFields&lt;/code&gt; and &lt;code&gt;AdminServicesTabFieldsSave&lt;/code&gt;.
The first of these allows definition of the extra fields to output.
The latter allows handling any input on submission/save, if required.&lt;/p&gt;

&lt;p&gt;So on to an example, below we show you how to define 4 extra fields.
This example shows an input, dropdown, textarea and info only output.
The examples continues to update them in a custom table of the database via the save event.&lt;/p&gt;

&lt;h2 id=&#34;example-admin-services-tab-function-a-id-example-function-a&#34;&gt;Example Admin Services Tab Function &lt;a id=&#34;example-function&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;function mymodule_AdminServicesTabFields($params) {

    $result = select_query(
        &amp;quot;mod_customtable&amp;quot;,
        &amp;quot;&amp;quot;,
        array(&amp;quot;serviceid&amp;quot; =&amp;gt; $params[&#39;serviceid&#39;],)
    );
    $data = mysql_fetch_array($result);
    $var1 = $data[&#39;var1&#39;];
    $var2 = $data[&#39;var2&#39;];
    $var3 = $data[&#39;var3&#39;];
    $var4 = $data[&#39;var4&#39;];

    $fieldsarray = array(
     &#39;Field 1&#39; =&amp;gt; &#39;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;modulefields[0]&amp;quot; size=&amp;quot;30&amp;quot; value=&amp;quot;&#39;.$var1.&#39;&amp;quot; /&amp;gt;&#39;,
     &#39;Field 2&#39; =&amp;gt; &#39;&amp;lt;select name=&amp;quot;modulefields[1]&amp;quot;&amp;gt;&amp;lt;option&amp;gt;Val1&amp;lt;/option&amp;lt;/select&amp;gt;&#39;,
     &#39;Field 3&#39; =&amp;gt; &#39;&amp;lt;textarea name=&amp;quot;modulefields[2]&amp;quot; rows=&amp;quot;2&amp;quot; cols=&amp;quot;80&amp;quot;&amp;gt;&#39;.$var3.&#39;&amp;lt;/textarea&amp;gt;&#39;,
     &#39;Field 4&#39; =&amp;gt; $var4, # Info Output Only
    );
    return $fieldsarray;

}

function mymodule_AdminServicesTabFieldsSave($params) {
    update_query(&amp;quot;mod_customtable&amp;quot;,array(
        &amp;quot;var1&amp;quot;=&amp;gt;$_POST[&#39;modulefields&#39;][0],
        &amp;quot;var2&amp;quot;=&amp;gt;$_POST[&#39;modulefields&#39;][1],
        &amp;quot;var3&amp;quot;=&amp;gt;$_POST[&#39;modulefields&#39;][2],
    ),array(&amp;quot;serviceid&amp;quot;=&amp;gt;$params[&#39;serviceid&#39;]));
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>