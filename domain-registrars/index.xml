<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Domain-registrars-rsses on WHMCS Developer Documentation</title>
    <link>//developers.whmcs.com/domain-registrars/index.xml</link>
    <description>Recent content in Domain-registrars-rsses on WHMCS Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <atom:link href="//developers.whmcs.com/domain-registrars/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Domain Registrars</title>
      <link>//developers.whmcs.com/domain-registrars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Registrar Modules&lt;/strong&gt; allow for the registration and management of domains within WHMCS.&lt;/p&gt;

&lt;p&gt;Registrar Modules are also referred to as &lt;strong&gt;Domain Modules&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The core function of a registrar module is registering, transferring and renewing of domains. These are triggered when payments are made within WHMCS for domain purchases or renewals.&lt;/p&gt;

&lt;p&gt;Other functionality a registrar module can provide includes the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;checking availability of domains&lt;/li&gt;
&lt;li&gt;providing domain name suggestions&lt;/li&gt;
&lt;li&gt;viewing and updating of nameservers&lt;/li&gt;
&lt;li&gt;viewing and updating of WHOIS information&lt;/li&gt;
&lt;li&gt;viewing and management of DNS Host Records&lt;/li&gt;
&lt;li&gt;viewing and management of Email Forwarding services&lt;/li&gt;
&lt;li&gt;fetching of the EPP Code / Domain Release&lt;/li&gt;
&lt;li&gt;management of Registrar Lock status&lt;/li&gt;
&lt;li&gt;registering, modification and deletion of Private Nameservers&lt;/li&gt;
&lt;li&gt;enable/disable of ID Protection&lt;/li&gt;
&lt;li&gt;domain expiry date and status syncronisation&lt;/li&gt;
&lt;li&gt;transfer status monitoring&lt;/li&gt;
&lt;li&gt;deletion requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unlimited custom additional functionality can also be implemented using custom methods.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>//developers.whmcs.com/domain-registrars/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/getting-started/</guid>
      <description>

&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;

&lt;p&gt;We make available a sample provisioning module on Github. We recommend using this as a starting point for a custom module.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/WHMCS/sample-registrar-module&#34;&gt;https://github.com/WHMCS/sample-registrar-module&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;choosing-a-name&#34;&gt;Choosing a Name&lt;/h2&gt;

&lt;p&gt;Registrar Modules are located in the &lt;code&gt;/modules/registrars/&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;Module names should be a single word, consisting of only lowercase letters and numbers. The name must start with a letter, and must be unique.&lt;/p&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Configuration Options</title>
      <link>//developers.whmcs.com/domain-registrars/config-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/config-options/</guid>
      <description>&lt;p&gt;As with all modules in WHMCS, the configuration function is a required function of all registrar modules.&lt;/p&gt;

&lt;p&gt;This defines the settings that are available for your registrar module. The name of this function must be &lt;code&gt;yourmodulename_getConfigArray&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The supported configuration field types include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text&lt;/li&gt;
&lt;li&gt;Password&lt;/li&gt;
&lt;li&gt;Yes/No Checkboxes&lt;/li&gt;
&lt;li&gt;Dropdown Menus&lt;/li&gt;
&lt;li&gt;Radio Buttons&lt;/li&gt;
&lt;li&gt;Text Areas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below are examples of the available parameters for each field type. Provisioning modules support up to 24 options defined in this way.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function yourmodulename_getConfigArray($params)
{
    return array(
        &amp;quot;username&amp;quot; =&amp;gt; array (
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;UserName&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;text&amp;quot;, # Text Box
            &amp;quot;Size&amp;quot; =&amp;gt; &amp;quot;25&amp;quot;, # Defines the Field Width
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Textbox&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;Example&amp;quot;,
        ),
        &amp;quot;password&amp;quot; =&amp;gt; array (
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Password&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;password&amp;quot;, # Password Field
            &amp;quot;Size&amp;quot; =&amp;gt; &amp;quot;25&amp;quot;, # Defines the Field Width
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Password&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;Example&amp;quot;,
        ),
        &amp;quot;usessl&amp;quot; =&amp;gt; array (
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Enable SSL&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;yesno&amp;quot;, # Yes/No Checkbox
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Tick to use secure connections&amp;quot;,
        ),
        &amp;quot;package&amp;quot; =&amp;gt; array (
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Package Name&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;dropdown&amp;quot;, # Dropdown Choice of Options
            &amp;quot;Options&amp;quot; =&amp;gt; &amp;quot;Starter,Advanced,Ultimate&amp;quot;,
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Sample Dropdown&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;Advanced&amp;quot;,
        ),
        &amp;quot;disk&amp;quot; =&amp;gt; array (
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Disk Space&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;radio&amp;quot;, # Radio Selection of Options
            &amp;quot;Options&amp;quot; =&amp;gt; &amp;quot;100MB,200MB,300MB&amp;quot;,
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Radio Options Demo&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;200MB&amp;quot;,
        ),
        &amp;quot;comments&amp;quot; =&amp;gt; array (
            &amp;quot;FriendlyName&amp;quot; =&amp;gt; &amp;quot;Notes&amp;quot;,
            &amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;textarea&amp;quot;, # Textarea
            &amp;quot;Rows&amp;quot; =&amp;gt; &amp;quot;3&amp;quot;, # Number of Rows
            &amp;quot;Cols&amp;quot; =&amp;gt; &amp;quot;50&amp;quot;, # Number of Columns
            &amp;quot;Description&amp;quot; =&amp;gt; &amp;quot;Description goes here&amp;quot;,
            &amp;quot;Default&amp;quot; =&amp;gt; &amp;quot;Enter notes here&amp;quot;,
        ),
    );
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Function Index</title>
      <link>//developers.whmcs.com/domain-registrars/function-index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/function-index/</guid>
      <description>&lt;p&gt;The following is an index of all prescribed supported functions for a registrar module.&lt;/p&gt;

&lt;p&gt;Your registrar module should only define the functions that your module supports.&lt;/p&gt;

&lt;p&gt;Remember, all functions should have the prefix &lt;code&gt;yourmodulename_&lt;/code&gt; and then the function name.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RegisterDomain&lt;/td&gt;
&lt;td&gt;Called when the registration of a new domain is initiated within WHMCS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;TransferDomain&lt;/td&gt;
&lt;td&gt;Called when a domain transfer request is initiated within WHMCS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RenewDomain&lt;/td&gt;
&lt;td&gt;Called when a request to renew a domain is initiated within WHMCS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GetDomainInformation&lt;/td&gt;
&lt;td&gt;Called when a domain is viewed within WHMCS. Recommended instead of GetNameservers and GetRegistrarLock in WHMCS 7.6 and later.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GetNameservers&lt;/td&gt;
&lt;td&gt;Called when a domain is viewed within WHMCS. It can return up to 5 nameservers that are set for the domain.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SaveNameservers&lt;/td&gt;
&lt;td&gt;Called when a change is submitted for a domains nameservers.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GetRegistrarLock&lt;/td&gt;
&lt;td&gt;Called when a domains details are viewed within WHMCS. It should return the current lock status of a domain.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SaveRegistrarLock&lt;/td&gt;
&lt;td&gt;Called when the lock status setting is toggled within WHMCS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GetContactDetails&lt;/td&gt;
&lt;td&gt;Called when the WHOIS information is displayed within WHMCS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SaveContactDetails&lt;/td&gt;
&lt;td&gt;Called when revised WHOIS information is submitted.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ResendIRTPVerificationEmail&lt;/td&gt;
&lt;td&gt;Called when a request is made to resend the IRTP contact verification emails.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GetDNS&lt;/td&gt;
&lt;td&gt;Called when the DNS Host Records are requested to be viewed within WHMCS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SaveDNS&lt;/td&gt;
&lt;td&gt;Called when any changes to DNS Host Records information is submitted.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IDProtectToggle&lt;/td&gt;
&lt;td&gt;Called when the ID Protection setting is toggled on or off.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;GetEPPCode&lt;/td&gt;
&lt;td&gt;Called when the EPP Code is requested for a transfer out.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ReleaseDomain&lt;/td&gt;
&lt;td&gt;Called when a domain release is requested (eg. UK IPSTag Changes).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RegisterNameserver&lt;/td&gt;
&lt;td&gt;Called when a child nameserver registration request comes from WHMCS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ModifyNameserver&lt;/td&gt;
&lt;td&gt;Called when a child nameserver modification request comes from WHMCS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;DeleteNameserver&lt;/td&gt;
&lt;td&gt;Called when a child nameserver deletion request comes from WHMCS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;RequestDelete&lt;/td&gt;
&lt;td&gt;Called when a domain deletion request comes from WHMCS.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ClientArea&lt;/td&gt;
&lt;td&gt;Used to define module specific client area output. It accepts a return of HTML for display on the domain details page of the client area. Output via a template file within the module folder named &amp;ldquo;clientarea.tpl&amp;rdquo; is also possible. This function is discussed in more detail later on in the docs.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ClientAreaCustomButtonArray&lt;/td&gt;
&lt;td&gt;Used to define custom functions that the module supports. Customers can invoke and run these from the client area. The functions can perform actions or product page output in the client area. Example usages for this are to provide domain management pages, bandwidth reporting pages, etc&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ClientAreaAllowedFunctions&lt;/td&gt;
&lt;td&gt;Like the above, used to define custom functions. These are functions that customers can invoke, but are not shown as buttons by default. (i.e. custom client area output will invoke them).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Domain Syncronisation</title>
      <link>//developers.whmcs.com/domain-registrars/domain-syncing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/domain-syncing/</guid>
      <description>

&lt;p&gt;The domain syncronisation functions allow you to propagate any domain expiry date and status changes at the registry level to WHMCS.  This is particularly useful for domain transfers where completion of the transfer and expiry dates can not be known by WHMCS automatically without it.&lt;/p&gt;

&lt;h2 id=&#34;domain-syncing&#34;&gt;Domain Syncing&lt;/h2&gt;

&lt;p&gt;Domain syncing is performed in batches. When defined in your module, the Sync function will be called for 50 domains on a rolling basis each time the domain sync cron is invoked. Once all domains assigned to your module have been synced it will start from the beginning again.&lt;/p&gt;

&lt;p&gt;The below example shows the supported return values for the function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function modulename_Sync($params) {

    /**
     * Available parameters include the following.
     * Any settings defined in your Config Options method will also be available.
     */

    $params[&#39;domainid&#39;];
    $params[&#39;domain&#39;];
    $params[&#39;sld&#39;];
    $params[&#39;tld&#39;];
    $params[&#39;registrar&#39;];
    $params[&#39;regperiod&#39;];
    $params[&#39;status&#39;];
    $params[&#39;dnsmanagement&#39;];
    $params[&#39;emailforwarding&#39;];
    $params[&#39;idprotection&#39;];

    // Perform code to fetch domain status here

    // Return your result.
    // If &#39;error&#39; is returned, all other values will be ignored. It is important to ensure &#39;error&#39; is not returned in this array
    // unless the sync should not be completed. The error message will be provided in the &amp;quot;Domain Synchronisation Report&amp;quot; email.

    return array(
        &#39;active&#39; =&amp;gt; true, // Return true if the domain is active
        &#39;cancelled&#39; =&amp;gt; false, // Return true if the domain has been cancelled
        &#39;transferredAway&#39; =&amp;gt; false, // Return true if the domain has been transferred away from this registrar
        &#39;expirydate&#39; =&amp;gt; &#39;2018-09-28&#39;, // Return the current expiry date for the domain
        &#39;error&#39; =&amp;gt; &#39;Error message goes here.&#39; // The error message returned here will be returned within the Domain Synchronisation Report Email
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;notice tip&#34; &gt;&lt;p&gt;Settings relating to domain syncing are in &lt;strong&gt;Configuration &amp;gt; System Settings &amp;gt; Automation Settings&lt;/strong&gt; or, prior to WHMCS 8.0, &lt;strong&gt;Setup &amp;gt; Automation Settings&lt;/strong&gt;. There are 3 key settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Domain Sync Enabled&lt;/em&gt;&lt;/strong&gt; - Check to allow the domain sync cron to actually run.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Sync Next Due Date&lt;/em&gt;&lt;/strong&gt; - Enable this setting to update next due date to match the expiry field as part of the sync.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Domain Sync Notify Only&lt;/em&gt;&lt;/strong&gt; - Enable this to allow WHMCS to run the sync checks and report any inconsistencies. But, no changes to the domains will occur. With this enabled you receive an email report listing any discrepancies between the registrar and WHMCS.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;


&lt;h2 id=&#34;transfer-syncing&#34;&gt;Transfer Syncing&lt;/h2&gt;

&lt;p&gt;Transfer syncing works in a similar way to domain syncing. When defined in your module, this function will be called for every domain in the Pending Transfer status when the domain sync cron runs.&lt;/p&gt;

&lt;p&gt;The Transfer Sync method supports a number of return values.  A completed status indicator, the expiry date, a failed state, and a failure reason.  The below code example demonstrates the use of these.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function modulename_TransferSync($params) {

    /**
     * Available parameters include the following.
     * Any settings defined in your Config Options method will also be available.
     */

    $params[&#39;domainid&#39;];
    $params[&#39;domain&#39;];
    $params[&#39;sld&#39;];
    $params[&#39;tld&#39;];
    $params[&#39;registrar&#39;];
    $params[&#39;regperiod&#39;];
    $params[&#39;status&#39;];
    $params[&#39;dnsmanagement&#39;];
    $params[&#39;emailforwarding&#39;];
    $params[&#39;idprotection&#39;];

    // Perform code to fetch transfer status here

    return array(
        &#39;completed&#39; =&amp;gt; true, // Return as true upon successful completion of the transfer
        &#39;expirydate&#39; =&amp;gt; &#39;2017-10-15&#39;, // The expiry date of the domain
        &#39;failed&#39; =&amp;gt; false, // Return as true when transfer fails permanently
        &#39;reason&#39; =&amp;gt; &#39;Reason message can go here&#39;, // Reason for the transfer failure if available
        &#39;error&#39; =&amp;gt; &#39;Error message goes here&#39;, // If the check fails, an error message string can be provided here
    );
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Module Parameters</title>
      <link>//developers.whmcs.com/domain-registrars/module-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/module-parameters/</guid>
      <description>&lt;p&gt;The module parameters are the data values passed into each registrar module function when called.&lt;/p&gt;

&lt;p&gt;Registrar module functions all receive the same common set of parameters. These parameters provide information about the specific domain the module command is being invoked for. The parameters also contain the settings defined for the module itself.&lt;/p&gt;

&lt;p&gt;Additional variables specific to the action being performed such as EPP code, nameservers and WHOIS contact information may be available depending upon the function being called.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;userid&lt;/td&gt;
&lt;td&gt;The client ID who owns the domain&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;domainid&lt;/td&gt;
&lt;td&gt;The unique ID of the domain&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sld&lt;/td&gt;
&lt;td&gt;eg. &lt;code&gt;yourdomain&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tld&lt;/td&gt;
&lt;td&gt;eg. &lt;code&gt;.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;regperiod&lt;/td&gt;
&lt;td&gt;The registration term for the domain (1-10 years)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;eppcode&lt;/td&gt;
&lt;td&gt;Present only for incoming domain transfer orders (Transfers only)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Nameservers&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ns1&lt;/td&gt;
&lt;td&gt;First Nameserver (Registrations, Transfers and Nameserver Updates only)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ns2&lt;/td&gt;
&lt;td&gt;Second Nameserver&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ns3&lt;/td&gt;
&lt;td&gt;Third Nameserver&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ns4&lt;/td&gt;
&lt;td&gt;Fourth Nameserver&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;ns5&lt;/td&gt;
&lt;td&gt;Fifth Nameserver&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Contact Information&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;firstname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;lastname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fullname&lt;/td&gt;
&lt;td&gt;First name and last name combined&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;companyname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;email&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;address1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;address2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;city&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;state&lt;/td&gt;
&lt;td&gt;State code eg. TX&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fullstate&lt;/td&gt;
&lt;td&gt;State name eg. Texas&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;postcode&lt;/td&gt;
&lt;td&gt;Postcode/Zip code&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;countrycode&lt;/td&gt;
&lt;td&gt;Country code eg. GB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;countryname&lt;/td&gt;
&lt;td&gt;Country name eg. United Kingdom&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;phonenumber&lt;/td&gt;
&lt;td&gt;Phone number as the user provided it&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;phonecc&lt;/td&gt;
&lt;td&gt;Country code determined based on country&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fullphonenumber&lt;/td&gt;
&lt;td&gt;Format: +CC.xxxxxxxxxxxx&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;additionalfields&lt;/td&gt;
&lt;td&gt;An array of additional registrant information fields and their values&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Admin/Tech/Billing&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adminfirstname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adminlastname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;admincompanyname&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adminemail&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adminaddress1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adminaddress2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;admincity&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adminstate&lt;/td&gt;
&lt;td&gt;State code eg. TX&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adminfullstate&lt;/td&gt;
&lt;td&gt;State name eg. Texas&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adminpostcode&lt;/td&gt;
&lt;td&gt;Postcode/Zip code&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;admincountry&lt;/td&gt;
&lt;td&gt;eg. GB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adminphonenumber&lt;/td&gt;
&lt;td&gt;Phone number as the user provided it&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;adminfullphonenumber&lt;/td&gt;
&lt;td&gt;Format: +CC.xxxxxxxxxxxx&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Domain Addons&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;dnsmanagement&lt;/td&gt;
&lt;td&gt;True/false for if DNS Management add-on is active&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;emailforwarding&lt;/td&gt;
&lt;td&gt;True/false for if Email Forwarding add-on is active&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;idprotection&lt;/td&gt;
&lt;td&gt;True/false for if ID Protection add-on is active&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Premium Parameters&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;premiumEnabled&lt;/td&gt;
&lt;td&gt;True if premium domain orders are enabled in WHMCS (Registration/Transfers only)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;premiumCost&lt;/td&gt;
&lt;td&gt;The cost price fetched at the time of the order being placed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Grace/Redemption Parameters&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;isInGracePeriod&lt;/td&gt;
&lt;td&gt;True if domain is within the renewal grace period. Available in the module renewal function only&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;isInRedemptionGracePeriod&lt;/td&gt;
&lt;td&gt;True if the domain is within the redemption grace period. Available in the module renewal function only&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;IDN Parameters&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;idnlanguage&lt;/td&gt;
&lt;td&gt;The language code for the domain.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;domain_punycode&lt;/td&gt;
&lt;td&gt;The Punycode version of the domain name.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;sld_punycode&lt;/td&gt;
&lt;td&gt;The SLD with the Punycode domain name.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tld_punycode&lt;/td&gt;
&lt;td&gt;The TLD with the Punycode domain name.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;is_idn&lt;/td&gt;
&lt;td&gt;Whether the domain is an IDN.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Module Functions</title>
      <link>//developers.whmcs.com/domain-registrars/module-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/module-functions/</guid>
      <description>

&lt;p&gt;Registrar module functions are expected to return data and information to WHMCS for rendering to the end user.&lt;/p&gt;

&lt;p&gt;The data should be returned as part of a structured array. The exact format varies depending upon the registrar module function being invoked, and the data it returns. For specific details of the expected and supported values, please refer to the sample registrar module.&lt;/p&gt;

&lt;h2 id=&#34;error-handling&#34;&gt;Error Handling&lt;/h2&gt;

&lt;p&gt;Registrar module functions will assume success providing no error message is returned.&lt;/p&gt;

&lt;p&gt;In the event of an error or failure, a user friendly error message should be returned in the &lt;code&gt;error&lt;/code&gt; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return array(
    &#39;error&#39; =&amp;gt; &#39;Domain name not found&#39;,
);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Domain Information</title>
      <link>//developers.whmcs.com/domain-registrars/domain-information/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/domain-information/</guid>
      <description>

&lt;p&gt;This function allows you to build and return an object representing a given domain.  The attributes of the object can include data including nameservers, expiry date, registrar and transfer lock status, domain contact verification status and more.&lt;/p&gt;

&lt;div class=&#34;notice success&#34; &gt;&lt;p&gt;In WHMCS 7.6 and later, it is recommended to use the &lt;code&gt;GetDomainInformation&lt;/code&gt; function in place of the individual &lt;code&gt;GetNameservers&lt;/code&gt; and &lt;code&gt;GetRegistrarLock&lt;/code&gt; functions in scenarios where a single API call can retrieve both nameservers and registrar lock status for best performance.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;Note this function is only available in WHMCS 7.6.0 and later.&lt;/p&gt;

&lt;h2 id=&#34;example-usage&#34;&gt;Example Usage&lt;/h2&gt;

&lt;p&gt;The function expects a return of a &lt;a href=&#34;https://docs.whmcs.com/classes/7.6/WHMCS/Domain/Registrar/Domain.html&#34;&gt;WHMCS Registrar Domain object&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The example below demonstrates setting all supported domain attributes at the time of writing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use WHMCS\Carbon;
use WHMCS\Domain\Registrar\Domain;

function modulename_GetDomainInformation($params) {
	/**
     * Perform API call to retrieve domain information. This example assumes
     * $response is populated with an array of data returned by the Registrar&#39;s API.
     */
	$response = [];

	return (new Domain)
        -&amp;gt;setDomain($response[&#39;domain&#39;])
        -&amp;gt;setNameservers($response[&#39;nameservers&#39;])
        -&amp;gt;setRegistrationStatus($response[&#39;status&#39;])
        -&amp;gt;setTransferLock($response[&#39;transferlock&#39;])
        -&amp;gt;setTransferLockExpiryDate(null)
        -&amp;gt;setExpiryDate(Carbon::createFromFormat(&#39;Y-m-d&#39;, $response[&#39;expirydate&#39;])) // $response[&#39;expirydate&#39;] = YYYY-MM-DD
        -&amp;gt;setRestorable(false)
        -&amp;gt;setIdProtectionStatus($response[&#39;addons&#39;][&#39;hasidprotect&#39;])
        -&amp;gt;getDnsManagementStatus($response[&#39;addons&#39;][&#39;hasdnsmanagement&#39;])
        -&amp;gt;setEmailForwardingStatus($response[&#39;addons&#39;][&#39;hasemailforwarding&#39;])
        -&amp;gt;setIsIrtpEnabled(in_array($response[&#39;tld&#39;], [&#39;.com&#39;]))
        -&amp;gt;setIrtpOptOutStatus($response[&#39;irtp&#39;][&#39;optoutstatus&#39;])
        -&amp;gt;setIrtpTransferLock($response[&#39;irtp&#39;][&#39;lockstatus&#39;])
        -&amp;gt;IrtpTransferLockExpiryDate($irtpTransferLockExpiryDate)
        -&amp;gt;setDomainContactChangePending($response[&#39;status&#39;][&#39;contactpending&#39;])
        -&amp;gt;setPendingSuspension($response[&#39;status&#39;][&#39;pendingsuspend&#39;])
        -&amp;gt;setDomainContactChangeExpiryDate($response[&#39;status&#39;][&#39;expires&#39;])
        -&amp;gt;setRegistrantEmailAddress($response[&#39;registrant&#39;][&#39;email&#39;])
        -&amp;gt;setIrtpVerificationTriggerFields(
            [
                &#39;Registrant&#39; =&amp;gt; [
                    &#39;First Name&#39;,
                    &#39;Last Name&#39;,
                    &#39;Organization Name&#39;,
                    &#39;Email&#39;,
                ],
            ]
        );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If an error is encountered while attempting to fetch the domain information, you should throw an exception. All exceptions will be caught by WHMCS and the exception message displayed to the end user.&lt;/p&gt;

&lt;p&gt;Method signatures for the &lt;code&gt;WHMCS\Domain\Registrar\Domain&lt;/code&gt; class can be found in the
&lt;a href=&#34;https://docs.whmcs.com/classes/7.6/WHMCS/Domain/Registrar/Domain.html&#34;&gt;WHMCS Class Documention&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Availability Checks</title>
      <link>//developers.whmcs.com/domain-registrars/availability-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/availability-checks/</guid>
      <description>

&lt;p&gt;In WHMCS 7.1 and later, domain registrar modules can take control of Domain Availability checks and lookups.&lt;/p&gt;

&lt;p&gt;There are two supported functions: &lt;code&gt;CheckAvailability&lt;/code&gt; and &lt;code&gt;GetSuggestions&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;check-availability&#34;&gt;Check Availability&lt;/h2&gt;

&lt;p&gt;The purpose of this function is to check if a domain is available for registration or transfer.&lt;/p&gt;

&lt;h3 id=&#34;input-parameters&#34;&gt;Input Parameters&lt;/h3&gt;

&lt;p&gt;In addition to the regular &lt;a href=&#34;//developers.whmcs.com/domain-registrars/module-parameters/&#34;&gt;Common Module Parameters&lt;/a&gt;, the CheckAvailability function is passed the following input parameters.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;searchTerm&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The search term provided by the end user&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;punyCodeSearchTerm&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;For an IDN domain, the puny code encoded search term&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tldsToInclude&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;An array of TLDs/extensions to perform the availability check for&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;isIdnDomain&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;If IDN Domains are enabled for this WHMCS installation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;premiumEnabled&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;If Premium Domains are enabled for this WHMCS installation&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;For performance reasons, we recommending performing the lookup for all requested extensions at the same time if the registrar supports it.&lt;/p&gt;
&lt;/div&gt;


&lt;h3 id=&#34;return&#34;&gt;Return&lt;/h3&gt;

&lt;p&gt;The return of this function is expected to be an ArrayObject based collection of \WHMCS\Domains\DomainLookup\SearchResult results.&lt;/p&gt;

&lt;p&gt;Each SearchResult object consists of an SLD and TLD, a status (available, registered, reserved) and optionally premium information such as Purchase Cost Price.&lt;/p&gt;

&lt;h3 id=&#34;code-sample&#34;&gt;Code Sample&lt;/h3&gt;

&lt;p&gt;Please refer to the example provided in the &lt;a href=&#34;https://github.com/WHMCS/sample-registrar-module&#34;&gt;Sample Registrar Module available via Github&lt;/a&gt; for an example implementation of the &lt;code&gt;CheckAvailability&lt;/code&gt; function.&lt;/p&gt;

&lt;h2 id=&#34;get-domain-suggestions&#34;&gt;Get Domain Suggestions&lt;/h2&gt;

&lt;p&gt;The purpose of this function is to return a list of alternative domain registration suggestions based on the search term provided by an end user.&lt;/p&gt;

&lt;h3 id=&#34;input-parameters-1&#34;&gt;Input Parameters&lt;/h3&gt;

&lt;p&gt;In addition to the regular &lt;a href=&#34;//developers.whmcs.com/domain-registrars/module-parameters/&#34;&gt;Common Module Parameters&lt;/a&gt;, the GetSuggestions function is passed the following input parameters.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;searchTerm&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;The search term provided by the end user&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;punyCodeSearchTerm&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;For an IDN domain, the puny code encoded search term&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;tldsToInclude&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;An array of TLDs/extensions to perform the availability check for&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;isIdnDomain&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;If IDN Domains are enabled for this WHMCS installation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;premiumEnabled&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;If Premium Domains are enabled for this WHMCS installation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;suggestionSettings&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;An array of settings and their values as defined in the &lt;code&gt;DomainSuggestionOptions&lt;/code&gt; function&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;return-1&#34;&gt;Return&lt;/h3&gt;

&lt;p&gt;The return of this function is expected to be an ArrayObject based collection of \WHMCS\Domains\DomainLookup\SearchResult results.&lt;/p&gt;

&lt;p&gt;All domains returned by the suggestions function should be available for registration.&lt;/p&gt;

&lt;h3 id=&#34;code-sample-1&#34;&gt;Code Sample&lt;/h3&gt;

&lt;p&gt;Please refer to the example provided in the &lt;a href=&#34;https://github.com/WHMCS/sample-registrar-module&#34;&gt;Sample Registrar Module available via Github&lt;/a&gt; for an example implementation of the &lt;code&gt;GetDomainSuggestions&lt;/code&gt; function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Premium Domains</title>
      <link>//developers.whmcs.com/domain-registrars/premium-domains/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/premium-domains/</guid>
      <description>

&lt;p&gt;In WHMCS 7.1 and later, registrar modules can include support for the selling of Premium Domains.&lt;/p&gt;

&lt;p&gt;Premium Domains cannot be detected with traditional WHOIS lookups, and therefore to use Premium Domains, it requires a registrar module to implement the &lt;a href=&#34;//developers.whmcs.com/domain-registrars/availability-checks/&#34;&gt;Availability Check&lt;/a&gt; functions.&lt;/p&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How It Works&lt;/h2&gt;

&lt;p&gt;Premium Domain functionality must be enabled by admin users before it can be used. The status is passed as a boolean value to both the CheckAvailability and GetSuggestions registrar module functions under the parameter &lt;code&gt;premiumEnabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When enabled, domain availability checks must return if a domain is premium, and if it is, also return pricing information.&lt;/p&gt;

&lt;p&gt;The cost price of the registration will then be converted into the end users currency, and a markup as defined by the WHMCS admin user will be applied before displaying the price to the end user.&lt;/p&gt;

&lt;p&gt;The registration and renewal registrar module functions will be passed two additional parameters when Premium Domains are enabled:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;premiumEnabled&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;If Premium Domains are enabled for this WHMCS installation&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;premiumCost&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;The cost price for the action being performed (registration or renewal)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;If the cost price passed to the Register or Renew functions by WHMCS does not match the cost price of the domain at the time the action is being performed, the process should be aborted and an appropriate error message should be returned for the admin user.&lt;/p&gt;
&lt;/div&gt;


&lt;h3 id=&#34;code-sample&#34;&gt;Code Sample&lt;/h3&gt;

&lt;p&gt;Please refer to the example provided in the &lt;a href=&#34;https://github.com/WHMCS/sample-registrar-module&#34;&gt;Sample Registrar Module available via Github&lt;/a&gt; for an example implementation of the &lt;code&gt;CheckAvailability&lt;/code&gt; and &lt;code&gt;Register&lt;/code&gt; functions. Both include the appropriate parameters for Premium Domain handling.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Client Area Output</title>
      <link>//developers.whmcs.com/domain-registrars/client-area-output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/client-area-output/</guid>
      <description>&lt;p&gt;Using this function, it is possible to output custom HTML in the Client Area when a client is managing a domain name.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;_ClientArea&lt;/code&gt; function, you can return output that will be shown in the Domain Overview when viewing a domain in the Client Area.&lt;/p&gt;

&lt;p&gt;All the parameters available in other registrar module functions are available to you within this function.
Visit the &lt;a href=&#34;https://developers.whmcs.com/domain-registrars/module-parameters/&#34;&gt;Module Parameters&lt;/a&gt; page for information on  the variables available in &lt;code&gt;$params&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The function should return the HTML to be rendered on the page.&lt;/p&gt;

&lt;p&gt;Note: We recommend avoiding making remote API calls within this function as doing so will result in increased overheads for page
load and potentially slower page load times.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Client Area Output.
 *
 * This function renders output to the domain details interface within
 * the client area. The return should be the HTML to be output.
 *
 * @param array $params common module parameters
 *
 * @see https://developers.whmcs.com/domain-registrars/module-parameters/
 *
 * @return string HTML Output
 */
function registrarmodule_ClientArea($params)
{
    $output = &amp;lt;&amp;lt;&amp;lt;HTML
&amp;lt;div class=&amp;quot;alert alert-info&amp;quot;&amp;gt;
    Your custom HTML output goes here...
&amp;lt;/div&amp;gt;
HTML;
    return $output;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Transfer Policy (IRTP) Management</title>
      <link>//developers.whmcs.com/domain-registrars/transfer-policy-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/transfer-policy-management/</guid>
      <description>

&lt;p&gt;The Inter Registry Transfer Policy, (also commonly referred to as IRTP), states that any time a material change is made to a domain&amp;rsquo;s registrant, organization or email address, a new Change of Registrant process should be triggered.&lt;/p&gt;

&lt;p&gt;In WHMCS 7.6 and later, registrar modules can incorporate support for Transfer Policy related messaging as follows.&lt;/p&gt;

&lt;h2 id=&#34;whois-contact-verification&#34;&gt;WHOIS Contact Verification&lt;/h2&gt;

&lt;p&gt;WHMCS supports display of informational banners and messaging when contact verification is required, either due to a newly registered domain or a change in WHOIS contact information being requested.&lt;/p&gt;

&lt;p&gt;For these informational alerts to be displayed, the appropriate attributes need to be set via the &lt;code&gt;GetDomainInformation&lt;/code&gt; method within a registrar module.&lt;/p&gt;

&lt;p&gt;A description of the methods used in WHOIS Contact Verification messaging are provided below:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;setIsIrtpEnabled&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;Must be set to true to enable Transfer Policy functionality.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setIrtpOptOutStatus&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;True or false depending on the current opt-out status for the Inter Registry Transfer Policy (optional)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setIrtpTransferLock&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;True or false depending on the current IRTP Transfer Lock status for the given domain (optional)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IrtpTransferLockExpiryDate&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;The expiry date of the transfer lock (optional)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setDomainContactChangePending&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;True if a WHOIS Contact Verification process is in progress&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setPendingSuspension&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;True if failure to complete the current WHOIS Contact Verification process will result in domain suspension (typically for new registrations)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setDomainContactChangeExpiryDate&lt;/td&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;The date by which the current WHOIS Contact Verification process must be completed by&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setIrtpVerificationTriggerFields&lt;/td&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td&gt;The fields of WHOIS that when changed will trigger a new WHOIS Contact Verification process&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;example-usage&#34;&gt;Example Usage&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;use WHMCS\Carbon;
use WHMCS\Domain\Registrar\Domain;

function modulename_GetDomainInformation(array $params) {
	// Perform API call to retrieve domain information

	return (new Domain)
        -&amp;gt;setIsIrtpEnabled(true)
        -&amp;gt;setIrtpOptOutStatus(false)
        -&amp;gt;setIrtpTransferLock(true)
        -&amp;gt;IrtpTransferLockExpiryDate(Carbon::createFromFormat(&#39;Y-m-d&#39;, &#39;2019-06-15&#39;))
        -&amp;gt;setDomainContactChangePending(true)
        -&amp;gt;setPendingSuspension(true)
        -&amp;gt;setDomainContactChangeExpiryDate(Carbon::createFromFormat(&#39;Y-m-d&#39;, &#39;2018-08-20&#39;))
        -&amp;gt;setIrtpVerificationTriggerFields(
            [
                &#39;Registrant&#39; =&amp;gt; [
                    &#39;First Name&#39;,
                    &#39;Last Name&#39;,
                    &#39;Organization Name&#39;,
                    &#39;Email&#39;,
                ],
            ]
        );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other attributes relating to a domain are supported. More information on these can be found in the &lt;a href=&#34;//developers.whmcs.com/domain-registrars/domain-information/&#34;&gt;Domain Information&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h2 id=&#34;resend-contact-verification-email&#34;&gt;Resend Contact Verification Email&lt;/h2&gt;

&lt;p&gt;If supported by a registrar API, the &lt;code&gt;ResendIRTPVerificationEmail&lt;/code&gt; function can be defined within a registrar module to allow end users and administrators to request the WHOIS Contact Verification emails be resent.&lt;/p&gt;

&lt;p&gt;The standard registrar module parameters are passed to this function, errors are supported using the standard array based return as in other registrar module functions.&lt;/p&gt;

&lt;h3 id=&#34;example-usage-1&#34;&gt;Example Usage&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function modulename_ResendIRTPVerificationEmail(array $params) {
	// Perform API call to initiate resending of the IRTP Verification Email
	$success = true;
	$errorMessage = &#39;&#39;;

	if ($success) {
		return [&#39;success&#39; =&amp;gt; true];
	} else {
		return [&#39;error&#39; =&amp;gt; $errorMessage];
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TLD &amp; Pricing Sync</title>
      <link>//developers.whmcs.com/domain-registrars/tld-pricing-sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/tld-pricing-sync/</guid>
      <description>

&lt;p&gt;In WHMCS 7.10 and later, the Registrar TLD &amp;amp; Pricing Sync Utility allows for a registrar module to support importing TLDs and pricing.&lt;/p&gt;

&lt;p&gt;Users can use the Sync Utility to import TLDs and automatically apply a defined margin markup.&lt;/p&gt;

&lt;p&gt;To integrate this functionality into your registrar module, you must define a &lt;code&gt;GetTldPricing&lt;/code&gt; function that builds and returns a ResultList object containing ImportItems defining TLDs and their cost pricing.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Required/Optional&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;setExtension&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;Required&lt;/td&gt;
&lt;td&gt;The extension to import. Example: .com, .net, or .co.uk&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setMinYears&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;The minimum number of years that the extension can be registered for. Default: 1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setMaxYears&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;The maximum number of years that the extension can be registered for. Default: 10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setYearsStep&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;The number of years between each registration period. Default: 1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setRegisterPrice&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;Required&lt;/td&gt;
&lt;td&gt;The registration cost price for the minimum registration period term.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setRenewPrice&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;The renewal cost price for the minimum registration period term. Pass null if renewals are not supported.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setTransferPrice&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;The transfer cost price for the minimum registration period term. Pass null if transfers are not supported.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setGraceFeeDays&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;The grace period for the extension.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setGraceFeePrice&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;The grace fee cost price for the extension. Pass null if grace periods are not supported.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setRedemptionFeeDays&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;The redemption period for the extension.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setRedemptionFeePrice&lt;/td&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;The redemption fee cost price for the extension. Pass null if redemption periods are not supported.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setCurrency&lt;/td&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;Required&lt;/td&gt;
&lt;td&gt;The ISO4217 three letter currency code that registrar cost prices are defined in. This currency must exist within the WHMCS installation. eg. USD, GBP, etc&amp;hellip;.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setEppRequired&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;Does the extension require an EPP code for transfer requests&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;setYears&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;Optional&lt;/td&gt;
&lt;td&gt;Use in place of &lt;code&gt;setMinYears&lt;/code&gt;, &lt;code&gt;setMaxYears&lt;/code&gt;, and &lt;code&gt;setYearsStep&lt;/code&gt; for extensions with more specialised pricing. Default: array()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;example-usage&#34;&gt;Example Usage&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;use WHMCS\Domain\TopLevel\ImportItem;
use WHMCS\Results\ResultsList;

function modulename_GetTldPricing(array $params)
{
    // Perform API call to retrieve extension information
    // A connection error should return a simple array with error key and message
    // return [&#39;error&#39; =&amp;gt; &#39;This error occurred&#39;,];

    $results = new ResultsList;

    foreach ($extensionData as $extension) {
        // All the set methods can be chained and utilised together.
        $item = (new ImportItem)
            -&amp;gt;setExtension($extension[&#39;tld&#39;])
            -&amp;gt;setMinYears($extension[&#39;minPeriod&#39;])
            -&amp;gt;setMaxYears($extension[&#39;maxPeriod&#39;])
            -&amp;gt;setRegisterPrice($extension[&#39;registrationPrice&#39;])
            -&amp;gt;setRenewPrice($extension[&#39;renewalPrice&#39;])
            -&amp;gt;setTransferPrice($extension[&#39;transferPrice&#39;])
            -&amp;gt;setRedemptionFeeDays($extension[&#39;redemptionDays&#39;])
            -&amp;gt;setRedemptionFeePrice($extension[&#39;redemptionFee&#39;])
            -&amp;gt;setCurrency($extension[&#39;currencyCode&#39;])
            -&amp;gt;setEppRequired($extension[&#39;transferSecretRequired&#39;]);

        $results[] = $item;
    }
    return $results;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Extending Further</title>
      <link>//developers.whmcs.com/domain-registrars/extending-further/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/extending-further/</guid>
      <description>

&lt;h2 id=&#34;custom-functions&#34;&gt;Custom Functions&lt;/h2&gt;

&lt;p&gt;Custom functions allow you to define extra operations that can be performed using the module. The custom functions can perform actions, or define extra client area pages/output. Permissions can be granted for who can use each custom function, be it just clients, just admins, or both.&lt;/p&gt;

&lt;p&gt;The convention for custom function names follow the same as any other function of a module. It must begin with &lt;code&gt;yourmodulename_&lt;/code&gt;, and then the custom function name.&lt;/p&gt;

&lt;p&gt;The easiest way to show this is with an example. So let&amp;rsquo;s take an example of a Push Function that will use a template, &lt;code&gt;pushdomain.tpl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function yourmodulename_push($params) {

    $domainid = $params[&#39;domainid&#39;];
    $sld = $params[&#39;sld&#39;];
    $tld = $params[&#39;tld&#39;];

    return array(
        &#39;templatefile&#39; =&amp;gt; &#39;pushdomain&#39;,
        &#39;breadcrumb&#39; =&amp;gt; array(
            &#39;clientarea.php?action=domaindetails&amp;amp;domainid=&#39;.$domainid.&#39;&amp;amp;modop=custom&amp;amp;a=push&#39; =&amp;gt; &#39;Push Domain&#39;,
        ),
        &#39;vars&#39; =&amp;gt; array(
            &#39;var1&#39; =&amp;gt; &#39;valuehere&#39;,
            &#39;var2&#39; =&amp;gt; &#39;anothervaluehere&#39;,
        ),
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above shows how to define custom functions, use the parameters passed, and return an array response. The response can either be a simple empty array/error for an action function, or a complex array return like the above to define an extra client area page for extra domain management functionality.&lt;/p&gt;

&lt;p&gt;Now we need to allow clients to use this. The following function defines that clients are allowed to invoke the push function, and will add a menu option to the &lt;strong&gt;Domain Actions&lt;/strong&gt; dropdown within the client area for it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function yourmodulename_ClientAreaCustomButtonArray() {
    return array(
        &amp;quot;Push Domain&amp;quot; =&amp;gt; &amp;quot;push&amp;quot;,
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The key value of the array is what is displayed to admins/clients on the button or menu options for the commands, and the value is the custom function name excluding the &lt;code&gt;modulename_&lt;/code&gt; prefix.&lt;/p&gt;

&lt;p&gt;If you want to provide clients with a custom button or way to invoke a function, then this can be done as follows within a &lt;code&gt;.tpl&lt;/code&gt; file described in the previous Client Area Output section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form method=&amp;quot;post&amp;quot; action=&amp;quot;clientarea.php?action=domaindetails&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;domainid&amp;quot; value=&amp;quot;{$domainid}&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;modop&amp;quot; value=&amp;quot;custom&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;a&amp;quot; value=&amp;quot;reboot&amp;quot; /&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Reboot VPS Server&amp;quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;idn-domains&#34;&gt;IDN Domains&lt;/h2&gt;

&lt;p&gt;If you wish to support registration and management of IDN domain names via a registrar module, the domain object can be
used to access various parameters related to the domain. A domain name is considered IDN if it contains at least one character that is in a language-specific script or alphabet. IDN is supported for second level domain names but not top level at this time.&lt;/p&gt;

&lt;p&gt;The following options are available:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$domainObj = $params[&#39;original&#39;][&#39;domainObj&#39;];
$fullDomainUnicode = $domainObj-&amp;gt;toPunycode(); // The full domain name as stored in the database.
$isIdn = $domainObj-&amp;gt;isIdn(); // Returns true if domain is an IDN domain.
$fullDomainPunycode = $domainObj-&amp;gt;toUnicode(); // The full domain name in Unicode.
$secondLevelUnicode = $domainObj-&amp;gt;getUnicodeSecondLevel(); // The domain name (excluding TLD) in Unicode.
$secondLevelPunycode = $domainObj-&amp;gt;getPunycodeSecondLevel(); // The domain name (excluding TLD) converted to Punycode.
$tld = $domainObj-&amp;gt;getTopLevel(); // The Top Level Domain for the given domain.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hooks</title>
      <link>//developers.whmcs.com/domain-registrars/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>//developers.whmcs.com/domain-registrars/hooks/</guid>
      <description>&lt;p&gt;Registrar modules can also define hook functions.&lt;/p&gt;

&lt;div class=&#34;notice info&#34; &gt;&lt;p&gt;Hooks allow you to integrate with events and actions that occur inside WHMCS.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;Hooks for your registrar module should be defined in a file named &lt;code&gt;hooks.php&lt;/code&gt; within your registrar module directory.  These hooks will then be auto-detected and loaded throughout WHMCS.&lt;/p&gt;

&lt;p&gt;The hook functions within that file should be defined in exactly the same way as normal.&lt;/p&gt;

&lt;p&gt;Please refer to Hook Documentation for more info on creating and working with hooks in WHMCS.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>